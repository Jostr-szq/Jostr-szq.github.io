<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>iOS面试题(2)</title>
    <link href="/2022/12/22/iOS%E9%9D%A2%E8%AF%95%E9%A2%98-2/"/>
    <url>/2022/12/22/iOS%E9%9D%A2%E8%AF%95%E9%A2%98-2/</url>
    
    <content type="html"><![CDATA[<h3 id="1-weak的实现原理？sideTable的结构是什么样的？"><a href="#1-weak的实现原理？sideTable的结构是什么样的？" class="headerlink" title="1. weak的实现原理？sideTable的结构是什么样的？"></a>1. weak的实现原理？sideTable的结构是什么样的？</h3><p>weak：其实是一个hash表结构，其中的key是所指对象的地址，value是weak的指针数组，weak表示的是弱引用，不会对对象引用计数+1，当引用的对象被释放的时候，其值被自动设置为nil，一般用于解决循环引用的。</p><p>weak的实现原理<br>1、初始化时：runtime会调用objc_initWeak函数，初始化一个新的weak指针指向对象的地址。<br>2、添加引用时：objc_initWeak函数会调用 objc_storeWeak() 函数， objc_storeWeak() 的作用是更新指针指向，创建对应的弱引用表。3、释放时，调用clearDeallocating函数。clearDeallocating函数首先根据对象地址获取所有weak指针地址的数组，然后遍历这个数组把其中的数据设为nil，最后把这个entry从weak表中删除，最后清理对象的记录。</p><p>SideTable的结构如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SideTable</span> &#123;</span><br><span class="hljs-comment">// 保证原子操作的自旋锁</span><br>    <span class="hljs-keyword">spinlock_t</span> slock;<br>    <span class="hljs-comment">// 引用计数的 hash 表</span><br>    RefcountMap refcnts;<br>    <span class="hljs-comment">// weak 引用全局 hash 表</span><br>    <span class="hljs-keyword">weak_table_t</span> weak_table;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-关联对象的应用？系统如何实现关联对象的"><a href="#2-关联对象的应用？系统如何实现关联对象的" class="headerlink" title="2. 关联对象的应用？系统如何实现关联对象的"></a>2. 关联对象的应用？系统如何实现关联对象的</h3><p>应用：可以在不改变类的源码的情况下，为类添加实例变量（注意：这里指的实例变量，并不是真正的属于类的实例变量，而是一个关联值变量）结合category使用，为类扩展存储属性。</p><p>关联对象实现原理：关联对象的值实际上是通过AssociationsManager对象负责管理的，这个对象里有个AssociationsHashMap静态表，用来存储对象的关联值的，关于AssociationsHashMap存储的数据结构如下：<br>AssociationsHashMap：<br>——添加属性对象的指针地址（key）：ObjectAssociationMap（value：所有关联值对象）<br>ObjectAssociationMap：<br>——关联值的key：关联值的value</p><p>关联对象的应用和系统如何实现关联对象的大概顺序如下:<br><code>AssociationsManager</code>关联对象管理器-&gt;<code>AssociationsHashMap</code>哈希映射表-&gt;<code>ObjectAssociationMap</code>关联对象指针-&gt;<code>ObjcAssociation</code>关联对象</p><h3 id="3-关联对象的如何进行内存管理的？关联对象如何实现weak属性"><a href="#3-关联对象的如何进行内存管理的？关联对象如何实现weak属性" class="headerlink" title="3. 关联对象的如何进行内存管理的？关联对象如何实现weak属性?"></a>3. 关联对象的如何进行内存管理的？关联对象如何实现weak属性?</h3><p>内存管理：<br>关联对象的ObjectAssociation中有两个属性(uintptr_t _policy, id value),<br>_policy 包含 retain, assgin copy, 会对应的对对象进行和普通对象一样的内存管理操作.</p><p>weak属性:</p><ol><li>实现weak,用__weak修饰对象,并将其用block包裹,关联时,关联block对象</li><li>额外创造一个类WeakObjectContainer，在这个类里实现weak属性 weakObject ，虽然 分类里 retain 了一个 WeakObjectContainer，但是 WeakObjectContainer 最终会随着属性的持有对象一起销毁，不存在泄露。</li></ol><h3 id="3-AutoReleasePool的原理？所使用的的数据结构是什么？"><a href="#3-AutoReleasePool的原理？所使用的的数据结构是什么？" class="headerlink" title="3. AutoReleasePool的原理？所使用的的数据结构是什么？"></a>3. AutoReleasePool的原理？所使用的的数据结构是什么？</h3>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
      <category>iOS面试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>iOS</tag>
      
      <tag>面试题</tag>
      
      <tag>内存管理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>iOS面试题(1)</title>
    <link href="/2022/12/21/iOS%E9%9D%A2%E8%AF%95%E9%A2%98-1/"/>
    <url>/2022/12/21/iOS%E9%9D%A2%E8%AF%95%E9%A2%98-1/</url>
    
    <content type="html"><![CDATA[<h3 id="1-介绍下runtime的内存模型-isa，对象，类，metaclass，结构体的存储信息等"><a href="#1-介绍下runtime的内存模型-isa，对象，类，metaclass，结构体的存储信息等" class="headerlink" title="1. 介绍下runtime的内存模型(isa，对象，类，metaclass，结构体的存储信息等)"></a>1. 介绍下runtime的内存模型(isa，对象，类，metaclass，结构体的存储信息等)</h3><p><strong>对象</strong>：OC中的对象指向的是一个objc_object指针类型，typedef struct objc_object *id；从它的结构体中可以看出，它包含一个isa指针，指向的是这个对象的类对象。一个对象的实例就是通过isa指针找到它自己的class，而这个class中存储的就是这个实例的方法列表，属性列表，成员变量等相关信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs objective-c">&#x2F;&#x2F;&#x2F; Represents an instance of a class.<br>struct objc_object &#123;<br>    Class _Nonnull isa  OBJC_ISA_AVAILABILITY;<br>&#125;;<br><br>&#x2F;&#x2F;&#x2F; A pointer to an instance of a class.<br>typedef struct objc_object *id;<br></code></pre></td></tr></table></figure><p>源码地址：<a href="https://opensource.apple.com/source/objc4/objc4-818.2/runtime/objc-private.h.auto.html">https://opensource.apple.com/source/objc4/objc4-818.2/runtime/objc-private.h.auto.html</a></p><p><strong>类</strong>：在OC中类也是用class表示的，实际上它指向的是objc_class指针类型,typedef struct objc_class *Class;而objc_class继承于objc_object,这就很好的解释了万物皆对象，oc中的类也是对象。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs objective-c">struct objc_class &#123;<br>    Class _Nonnull isa  OBJC_ISA_AVAILABILITY;<br><br>#if !__OBJC2__<br>    Class _Nullable super_class                              OBJC2_UNAVAILABLE;<br>    const char * _Nonnull name                               OBJC2_UNAVAILABLE;<br>    long version                                             OBJC2_UNAVAILABLE;<br>    long info                                                OBJC2_UNAVAILABLE;<br>    long instance_size                                       OBJC2_UNAVAILABLE;<br>    struct objc_ivar_list * _Nullable ivars                  OBJC2_UNAVAILABLE;<br>    struct objc_method_list * _Nullable * _Nullable methodLists                    OBJC2_UNAVAILABLE;<br>    struct objc_cache * _Nonnull cache                       OBJC2_UNAVAILABLE;<br>    struct objc_protocol_list * _Nullable protocols          OBJC2_UNAVAILABLE;<br>#endif<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-为什么要设计metaclass"><a href="#2-为什么要设计metaclass" class="headerlink" title="2. 为什么要设计metaclass?"></a>2. 为什么要设计metaclass?</h3><p>符合单一职责设计原则，从面向对象的设计理念来说，万物皆对象，类也是对象，当然元类也是对象，存在的目的一方面可以让对象的继承链关系完美闭环，也保证能完美的复用传递消息机制。这样设计也是参考了smalltalk的理念。</p><h3 id="3-class-copyIvarList-和class-copyPropertyList-区别"><a href="#3-class-copyIvarList-和class-copyPropertyList-区别" class="headerlink" title="3. class_copyIvarList()和class_copyPropertyList()区别"></a>3. class_copyIvarList()和class_copyPropertyList()区别</h3><p>class_copyIvarList()可以获取到所有的成员变量，包括花括号内的变量(包含.h和.m)</p><p>class_copyPropertyList()只能获取到@property关键字声明的属性(.h和.m)</p><p>区别：</p><p>class_copyIvarList 获取类对象中的所有实例变量信息，从 <code>class_ro_t</code> 中获取：</p><p>class_copyPropertyList 获取类对象中的属性信息， class_rw_t 的 properties，先后输出了 category / extension/ baseClass 的属性，而且仅输出当前的类的属性信息，而不会向上去找 superClass 中定义的属性。</p><h3 id="4-class-rw-t和class-ro-t区别"><a href="#4-class-rw-t和class-ro-t区别" class="headerlink" title="4. class_rw_t和class_ro_t区别"></a>4. class_rw_t和class_ro_t区别</h3><p>两个结构体都存放着当前类的属性，方法，实例变量，协议等;</p><p>class_ro_t存放是编译期就确定的;</p><p>class_rw_t存放是在runtime时才确定的，它会先将class_ro_t的内容拷贝过去，然后再将当前类的分类的属性，方法拷贝其中。所以可以说<code>class_rw_t</code>是<code>class_ro_t</code>的超集，当然实际访问类的方法、属性等也都是访问的<code>class_rw_t</code>中的内容；</p><h3 id="5-category是如何被加载的，两个category的load方法的加载顺序，两个category同名方法的加载顺序？"><a href="#5-category是如何被加载的，两个category的load方法的加载顺序，两个category同名方法的加载顺序？" class="headerlink" title="5. category是如何被加载的，两个category的load方法的加载顺序，两个category同名方法的加载顺序？"></a>5. category是如何被加载的，两个category的load方法的加载顺序，两个category同名方法的加载顺序？</h3><p>category的加载是发生在运行时，加载的过程是把category的实例方法，属性，协议添加到类对象上，把类方法添加到meteclass上；</p><p>加载顺序为：父类&gt;本类&gt;分类，而不同分类的加载顺序按照编译的顺序加载，即：xcode中的Build Phases中的Compile Sources中的文件从上到下的顺序加载的。</p><p>同名的普通方法，会优先调用分类的方法，不同分类的同名方法会根据编译顺序，先调用最后一个编译的分类方法。</p><p><strong>原因</strong>：根据runtime的消息传递机制中的核心函数void objc_msgSend(id self,SEL cmd,…)来发送消息，先从当前类中查找调用的方法，若没有找到则继续从其父类中一层层往上找，那么对于category重写同一个方法，则在消息传递的过程中，会最先找到category中的方法并执行该方法。对于多个分类调用同一个方法，Xcode在运行时是根据buildPhases-&gt;Compile Sources里面的从上至下顺序编译的，编译时通过压栈的方式将多个分类压栈，根据后进先出的原则，后编译的会被先调用，（插入顶部添加，即[methodLists insertObject:category_method atIndex:0]; 所以objc_msgSend遍历方法列表查找SEL 对应的IMP时，会先找到分类重写的那个，调用执行）当objc_msgSend找到方法并调用之后，就不再继续传递消息，所以形成所谓的覆盖。</p><h3 id="6-category和extension的区别，能给NSObject添加Extension吗，结果？"><a href="#6-category和extension的区别，能给NSObject添加Extension吗，结果？" class="headerlink" title="6. category和extension的区别，能给NSObject添加Extension吗，结果？"></a>6. category和extension的区别，能给NSObject添加Extension吗，结果？</h3><p><strong>category：分类</strong></p><p>给类添加新的方法<br>不能给类添加成员变量<br>通过@property定义的变量，只能生成对应的getter和setter的方法声明，但是不能实现getter和setter方法，同时也不能生成带下划线的成员属性<br>是运行期决定的<br>注意：为什么不能添加属性，原因就是category是运行期决定的，在运行期类的内存布局已经确定，如果添加实例变量会破坏类的内存布局，会产生意想不到的错误。</p><p><strong>extension：扩展</strong></p><p>可以给类添加成员变量，但是是私有的 可以給类添加方法，但是是私有的 添加的属性和方法是类的一部分，在编译期就决定的。在编译器和头文件的@interface和实现文件里的@implement一起形成了一个完整的类。 伴随着类的产生而产生，也随着类的消失而消失 必须有类的源码才可以给类添加extension，所以对于系统一些类，如nsstring，就无法添加类扩展 不能给NSObject添加Extension，因为在extension中添加的方法或属性必须在源类的文件的.m文件中实现才可以，即：你必须有一个类的源码才能添加一个类的extension。</p><h3 id="7-消息转发机制，消息转发机制和其他语言的消息机制优劣对比"><a href="#7-消息转发机制，消息转发机制和其他语言的消息机制优劣对比" class="headerlink" title="7. 消息转发机制，消息转发机制和其他语言的消息机制优劣对比"></a>7. 消息转发机制，消息转发机制和其他语言的消息机制优劣对比</h3><p>消息转发机制是相对于消息传递机制而言的。</p><p><strong>消息传递机制：</strong><br>Runtime也就是运行时，就是系统在运行时的一些机制，其中最主要的就是消息机制。<br>对于C语言，函数的调用在编译阶段就会决定调用哪个函数，编译完成后，顺序执行。而OC的函数调用，称为消息发送，在编译阶段并不能真正决定调用哪个函数（也就是说，在编译阶段，OC可以调用任何函数，即使这个函数并未实现，但只要声明过就不会报错。而C语在编译阶段就会报错）。只有在运行时，才会根据函数的名称找到对应函数的地址来进行调用。</p><p>[objc makeTest]<br>首先，编译器将代码[obj makeText];转化为objc_msgSend(obj, @selector (makeText));，在objc_msgSend函数中。首先通过obj的isa指针找到obj对应的class。在Class中先去cache中 通过SEL查找对应函数method，若 cache中未找到。再去methodList中查找，若methodlist中未找到，则取superClass中查找。若能找到，则将method加入到cache中，以方便下次查找，并通过method中的函数指针跳转到对应的函数中去执行。</p><p>消息转发机制(可以间接实现多继承)：<br>如通过以上消息发送机制，并未找到对应的函数实现，将会进入到消息转发机制流程；</p><ol><li><p><strong>动态方法解析</strong></p><p>resolveInstanceMethod，可以动态的添加一个方法到类中</p></li><li><p><strong>替换消息接收者，快速转发</strong></p><p>forwardingTargetForSelector，指定其他类对象作为消息的接收者，进行消息快速转发</p></li><li><p><strong>完全消息转发机制</strong></p><p>runtime发送methodSignatureForSelector消息获取Selector对应的方法签名。返回值非空则通过forwardInvocation:转发消息，返回值为空则向当前对象发送doesNotRecognizeSelector:消息，程序崩溃退出。</p><ul><li>把消息存储，在你觉得合适的时机转发出去，或者不处理这个消息。</li><li>修改消息的target，selector，参数等</li><li>多次转发这个消息，转发给多个对象</li></ul></li></ol><h3 id="8-在方法调用的时候，方法查询-gt-动态解析-gt-消息转发-之前都做了什么？"><a href="#8-在方法调用的时候，方法查询-gt-动态解析-gt-消息转发-之前都做了什么？" class="headerlink" title="8. 在方法调用的时候，方法查询-&gt;动态解析-&gt;消息转发 之前都做了什么？"></a>8. 在方法调用的时候，方法查询-&gt;动态解析-&gt;消息转发 之前都做了什么？</h3><p>Objective-C 实例对象执行方法步骤</p><ol><li>获取 receiver 对应的类 Class</li><li>在 Class 缓存列表中(就是<code>objc_class</code>里的<code>cache_t</code>到<code>class_ro_t</code>的方法list)根据选择子<code>selector</code>查找<code>IMP</code></li><li>若缓存中没有找到，则在方法列表中继续查找.</li><li>若方法列表没有，则从父类查找，重复以上步骤.</li><li>若最终没有找到，则进行消息转发操作.</li></ol><ul><li>方法查询之前 要知道 receiver和 selector.主要是要明确我们是哪个实例调用了哪个方法.</li><li>动态解析解析之前要 在所属的类中先征询接受者,看其是否能动态加方法，来处理当前这个未知选择器.</li><li>消息转发 之前 要询问是否把消息转发给另一个对象.</li></ul><h3 id="9-IMP、SEL、Method的区别和使用场景"><a href="#9-IMP、SEL、Method的区别和使用场景" class="headerlink" title="9. IMP、SEL、Method的区别和使用场景"></a>9. <code>IMP</code>、<code>SEL</code>、<code>Method</code>的区别和使用场景</h3><ul><li><p><code>IMP</code> : 是方法的具体实现(指针)</p></li><li><p><code>SEL</code> :方法名称</p></li><li><p><code>Method </code>:是objc_method类型指针，它是一个结构体 ,如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs objective-c">struct objc_method &#123;<br>    SEL _Nonnull method_name                                 OBJC2_UNAVAILABLE;<br>    char * _Nullable method_types                            OBJC2_UNAVAILABLE;<br>    IMP _Nonnull method_imp                                  OBJC2_UNAVAILABLE;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p>使用场景</p><ul><li><p>例如 Button添加Target和Selector的时候.或者 实现类的<code>swizzle</code>的时候会用到，通过<code>class_getInstanceMethod(class, SEL)</code>来获取类的方法<code>Method</code>，其中用到了SEL作为方法名</p></li><li><p>例如 给类动态添加方法，此时我们需要调用class_addMethod(Class, SEL, IMP, types)，该方法需要我们传递一个方法的实现函数IMP，例如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs objective-c">static void funcName(id receiver, SEL cmd, 方法参数...) &#123;<br>   &#x2F;&#x2F; 方法具体的实现   <br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="10-load、initialize方法的区别是什么？在继承关系中他们有什么区别？"><a href="#10-load、initialize方法的区别是什么？在继承关系中他们有什么区别？" class="headerlink" title="10. load、initialize方法的区别是什么？在继承关系中他们有什么区别？"></a>10. load、initialize方法的区别是什么？在继承关系中他们有什么区别？</h3><p><strong>调用顺序：启动-&gt;load(自动调用)-&gt;[xxClass loadData]-&gt;initialize(自动调用)-&gt;loadData</strong></p><ul><li></li></ul>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
      <category>iOS面试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>iOS</tag>
      
      <tag>Runtime</tag>
      
      <tag>面试题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>iOS组件化方案(2)</title>
    <link href="/2022/03/22/iOS%E7%BB%84%E4%BB%B6%E5%8C%96%E6%96%B9%E6%A1%88-Part2/"/>
    <url>/2022/03/22/iOS%E7%BB%84%E4%BB%B6%E5%8C%96%E6%96%B9%E6%A1%88-Part2/</url>
    
    <content type="html"><![CDATA[<h3 id="组件化通讯方案"><a href="#组件化通讯方案" class="headerlink" title="组件化通讯方案"></a>组件化通讯方案</h3><p>目前主流的主要有以下三种方式：</p><ul><li>1、<code>URL</code>路由</li><li>2、<code>target-action</code></li><li>3、<code>protocol</code>匹配</li></ul><h3 id="URL路由"><a href="#URL路由" class="headerlink" title="URL路由"></a>URL路由</h3><p>目前iOS上大部分路由工具都是基于URL匹配的，或者是根据命名约定，用runtime方法进行动态调用</p><p>这些动态化的方案的优点是实现简单，缺点是需要维护字符串表，或者依赖于命名约定，无法在编译时暴露出所有问题，需要在运行时才能发现错误。</p><p>URL路由方式主要是以蘑菇街为代表的的<a href="https://links.jianshu.com/go?to=https://github.com/meili/MGJRouter">MGJRouter</a></p><p>其实现思路是：</p><ul><li>App启动时实例化各组件模块，然后这些组件向<code>ModuleManager</code>注册<code>Url</code>，有些时候不需要实例化，使用class注册</li><li>当组件A需要调用组件B时，向<code>ModuleManager</code>传递URL，参数跟随URL以GET方式传递，类似openURL。然后由ModuleManager负责调度组件B，最后完成任务。</li></ul><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">// 1、注册某个URL</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">MGJRouter</span>.</span></span>register<span class="hljs-constructor">URLPattern(<span class="hljs-string">&quot;app://home&quot;</span>)</span> &#123; (info) <span class="hljs-keyword">in</span><br>    print(<span class="hljs-string">&quot;info: \(info)&quot;</span>)<br>&#125;<br><br><span class="hljs-comment">//2、调用路由</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">MGJRouter</span>.</span></span><span class="hljs-keyword">open</span><span class="hljs-constructor">URL(<span class="hljs-string">&quot;app://home&quot;</span>)</span><br></code></pre></td></tr></table></figure><h4 id="URL-路由的优点"><a href="#URL-路由的优点" class="headerlink" title="URL 路由的优点"></a>URL 路由的优点</h4><ul><li>极高的动态性，适合经常开展运营活动的app，例如电商</li><li>方便地统一管理多平台的路由规则</li><li>易于适配URL Scheme</li></ul><h4 id="URl-路由的缺点"><a href="#URl-路由的缺点" class="headerlink" title="URl 路由的缺点"></a>URl 路由的缺点</h4><ul><li>传参方式有限，并且无法利用编译器进行参数类型检查，因此所有的参数都是通过字符串转换而来</li><li>只适用于界面模块，不适用于通用模块</li><li>参数的格式不明确，是个灵活的 dictionary，也需要有个地方可以查参数格式。</li><li>不支持storyboard</li><li>依赖于字符串硬编码，难以管理，蘑菇街做了个后台专门管理。</li><li>无法保证所使用的的模块一定存在</li><li>解耦能力有限，url 的”注册”、”实现”、”使用”必须用相同的字符规则，一旦任何一方做出修改都会导致其他方的代码失效，并且重构难度大</li></ul><p>除了<code>CTMediator</code>，还有以下这些三方框架</p><ul><li><a href="https://links.jianshu.com/go?to=https://github.com/clayallsopp/routable-ios">routable-ios</a></li><li><a href="https://links.jianshu.com/go?to=https://github.com/joeldev/JLRoutes">JLRoutes</a></li><li><a href="https://links.jianshu.com/go?to=https://github.com/lightory/HHRouter">HHRouter</a></li></ul><h3 id="target-action"><a href="#target-action" class="headerlink" title="target-action"></a>target-action</h3><p>这个方案是基于OC的runtime、category特性动态获取模块，例如通过<code>NSClassFromString</code>获取类并创建实例，通过<code>performSelector + NSInvocation</code>动态调用方法</p><p>其主要的代表框架是<a href="https://links.jianshu.com/go?to=https://github.com/casatwy/CTMediator">casatwy的CTMediator</a></p><p>其实现思路是：</p><ul><li>1、利用分类为路由添加新接口，在接口中通过字符串获取对应的类</li><li>2、通过runtime创建实例，动态调用实例的方法</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-comment">//******* 1、分类定义新接口</span><br><span class="hljs-class"><span class="hljs-keyword">extension</span> <span class="hljs-title">CTMediator</span></span>&#123;<br>    <span class="hljs-meta">@objc</span> <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">A_showHome</span><span class="hljs-params">()</span></span>-&gt;<span class="hljs-type">UIViewController?</span>&#123;<br>        <span class="hljs-keyword">let</span> params = [<br>            kCTMediatorParamsKeySwiftTargetModuleName: <span class="hljs-string">&quot;CJLBase_Example&quot;</span><br>        ]<br>        <br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> vc = <span class="hljs-keyword">self</span>.performTarget(<span class="hljs-string">&quot;A&quot;</span>, action: <span class="hljs-string">&quot;Extension_HomeViewController&quot;</span>, params: params, shouldCacheTarget: <span class="hljs-literal">false</span>) <span class="hljs-keyword">as</span>? <span class="hljs-type">UIViewController</span>&#123;<br>            <span class="hljs-keyword">return</span> vc<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//******* 2、模块提供者提供target-action的调用方式（对外需要加上public关键字）</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Target_A</span>: <span class="hljs-title">NSObject</span> </span>&#123;<br>    <br>    <span class="hljs-meta">@objc</span> <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Action_Extension_HomeViewController</span><span class="hljs-params">(<span class="hljs-number">_</span> params: [String: <span class="hljs-keyword">Any</span>])</span></span>-&gt;<span class="hljs-type">UIViewController</span>&#123;<br>         <br>        <span class="hljs-keyword">let</span> home = <span class="hljs-type">HomeViewController</span>()<br>        <span class="hljs-keyword">return</span> home<br>    &#125;<br><br>&#125;<br><br><span class="hljs-comment">//******* 3、使用</span><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> vc = <span class="hljs-type">CTMediator</span>.sharedInstance().<span class="hljs-type">A_showHome</span>() &#123;<br>            <span class="hljs-keyword">self</span>.navigationController?.pushViewController(vc, animated: <span class="hljs-literal">true</span>)<br>        &#125;<br></code></pre></td></tr></table></figure><p>其模块间的引用关系如下图所示</p><img src="/2022/03/22/iOS%E7%BB%84%E4%BB%B6%E5%8C%96%E6%96%B9%E6%A1%88-Part2/d74f03f0de964014923b74a6d4b9c5d3.png" class="" title="image.png"><p><strong>优点</strong></p><p>**<br>**</p><ul><li>利用 <code>分类</code> 可以明确声明接口，进行编译检查</li><li>实现方式<code>轻量</code></li></ul><p>**<br>**</p><p><strong>缺点</strong></p><p>**<br>**</p><ul><li>需要在<code>mediator</code> 和 <code>target</code>中重新添加每一个接口，模块化时代码较为繁琐</li><li>在 <code>category</code> 中仍然引入了<code>字符串硬编码</code>，内部使用字典传参，一定程度上也存在和 URL 路由相同的问题</li><li>无法保证使用的模块一定存在，target在修改后，使用者只能在运行时才能发现错误</li><li>可能会创建过多的 target 类</li></ul><p>**<br>**</p><p><strong>CTMediator源码分析</strong></p><p>**<br>**</p><ul><li>通过分类中调用的<code>performTarget</code>来到<code>CTMediator</code>中的具体实现，即<code>performTarget:action:params:shouldCacheTarget:</code>，主要是通过传入的name，找到对应的<code>target</code> 和 <code>action</code></li></ul><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs objectivec">- (<span class="hljs-keyword">id</span>)performTarget:(<span class="hljs-built_in">NSString</span> *)targetName action:(<span class="hljs-built_in">NSString</span> *)actionName params:(<span class="hljs-built_in">NSDictionary</span> *)params shouldCacheTarget:(<span class="hljs-built_in">BOOL</span>)shouldCacheTarget<br>&#123;<br>    <span class="hljs-keyword">if</span> (targetName == <span class="hljs-literal">nil</span> || actionName == <span class="hljs-literal">nil</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>;<br>    &#125;<br>    <span class="hljs-comment">//在swift中使用时，需要传入对应项目的target名称，否则会找不到视图控制器</span><br>    <span class="hljs-built_in">NSString</span> *swiftModuleName = params[kCTMediatorParamsKeySwiftTargetModuleName];<br>    <br>    <span class="hljs-comment">// generate target 生成target</span><br>    <span class="hljs-built_in">NSString</span> *targetClassString = <span class="hljs-literal">nil</span>;<br>    <span class="hljs-keyword">if</span> (swiftModuleName.length &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">//swift中target文件名拼接</span><br>        targetClassString = [<span class="hljs-built_in">NSString</span> stringWithFormat:<span class="hljs-string">@&quot;%@.Target_%@&quot;</span>, swiftModuleName, targetName];<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">//OC中target文件名拼接</span><br>        targetClassString = [<span class="hljs-built_in">NSString</span> stringWithFormat:<span class="hljs-string">@&quot;Target_%@&quot;</span>, targetName];<br>    &#125;<br>    <span class="hljs-comment">//缓存中查找target</span><br>    <span class="hljs-built_in">NSObject</span> *target = [<span class="hljs-keyword">self</span> safeFetchCachedTarget:targetClassString];<br>    <span class="hljs-comment">//缓存中没有target</span><br>    <span class="hljs-keyword">if</span> (target == <span class="hljs-literal">nil</span>) &#123;<br>        <span class="hljs-comment">//通过字符串获取对应的类</span><br>        Class targetClass = <span class="hljs-built_in">NSClassFromString</span>(targetClassString);<br>        <span class="hljs-comment">//创建实例</span><br>        target = [[targetClass alloc] init];<br>    &#125;<br><br>    <span class="hljs-comment">// generate action 生成action方法名称</span><br>    <span class="hljs-built_in">NSString</span> *actionString = [<span class="hljs-built_in">NSString</span> stringWithFormat:<span class="hljs-string">@&quot;Action_%@:&quot;</span>, actionName];<br>    <span class="hljs-comment">//通过方法名字符串获取对应的sel</span><br>    SEL action = <span class="hljs-built_in">NSSelectorFromString</span>(actionString);<br>    <br>    <span class="hljs-keyword">if</span> (target == <span class="hljs-literal">nil</span>) &#123;<br>        <span class="hljs-comment">// 这里是处理无响应请求的地方之一，这个demo做得比较简单，如果没有可以响应的target，就直接return了。实际开发过程中是可以事先给一个固定的target专门用于在这个时候顶上，然后处理这种请求的</span><br>        [<span class="hljs-keyword">self</span> NoTargetActionResponseWithTargetString:targetClassString selectorString:actionString originParams:params];<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>;<br>    &#125;<br>    <span class="hljs-comment">//是否需要缓存</span><br>    <span class="hljs-keyword">if</span> (shouldCacheTarget) &#123;<br>        [<span class="hljs-keyword">self</span> safeSetCachedTarget:target key:targetClassString];<br>    &#125;<br>    <span class="hljs-comment">//是否响应sel</span><br>    <span class="hljs-keyword">if</span> ([target respondsToSelector:action]) &#123;<br>        <span class="hljs-comment">//动态调用方法</span><br>        <span class="hljs-keyword">return</span> [<span class="hljs-keyword">self</span> safePerformAction:action target:target params:params];<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 这里是处理无响应请求的地方，如果无响应，则尝试调用对应target的notFound方法统一处理</span><br>        SEL action = <span class="hljs-built_in">NSSelectorFromString</span>(<span class="hljs-string">@&quot;notFound:&quot;</span>);<br>        <span class="hljs-keyword">if</span> ([target respondsToSelector:action]) &#123;<br>            <span class="hljs-keyword">return</span> [<span class="hljs-keyword">self</span> safePerformAction:action target:target params:params];<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 这里也是处理无响应请求的地方，在notFound都没有的时候，这个demo是直接return了。实际开发过程中，可以用前面提到的固定的target顶上的。</span><br>            [<span class="hljs-keyword">self</span> NoTargetActionResponseWithTargetString:targetClassString selectorString:actionString originParams:params];<br>            <span class="hljs-keyword">@synchronized</span> (<span class="hljs-keyword">self</span>) &#123;<br>                [<span class="hljs-keyword">self</span>.cachedTarget removeObjectForKey:targetClassString];<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>进入<code>safePerformAction:target:params:</code>实现，主要是通过<code>invocation</code>进行<code>参数传递+消息转发</code></li></ul><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs objectivec">- (<span class="hljs-keyword">id</span>)safePerformAction:(SEL)action target:(<span class="hljs-built_in">NSObject</span> *)target params:(<span class="hljs-built_in">NSDictionary</span> *)params<br>&#123;<br>    <span class="hljs-comment">//获取方法签名</span><br>    <span class="hljs-built_in">NSMethodSignature</span>* methodSig = [target methodSignatureForSelector:action];<br>    <span class="hljs-keyword">if</span>(methodSig == <span class="hljs-literal">nil</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>;<br>    &#125;<br>    <span class="hljs-comment">//获取方法签名中的返回类型，然后根据返回值完成参数传递</span><br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* retType = [methodSig methodReturnType];<br>    <span class="hljs-comment">//void类型</span><br>    <span class="hljs-keyword">if</span> (strcmp(retType, <span class="hljs-keyword">@encode</span>(<span class="hljs-keyword">void</span>)) == <span class="hljs-number">0</span>) &#123;<br>        ...<br>    &#125;<br>    <span class="hljs-comment">//...省略其他类型的判断</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="protocol-class"><a href="#protocol-class" class="headerlink" title="protocol class"></a>protocol class</h3><p>protocol匹配的<code>实现思路</code>是：</p><ul><li>1、将<code>protocol</code>和对应的<code>类</code>进行<code>字典匹配</code></li><li>2、通过用<code>protocol</code>获取<code>class</code>，在<code>动态创建实例</code></li></ul><p>protocol比较典型的三方框架就是<a href="https://links.jianshu.com/go?to=https://github.com/alibaba/BeeHive">阿里的BeeHive</a>。<code>BeeHive</code>借鉴了Spring Service、Apache DSO的架构理念，<code>采用AOP+扩展App生命周期API</code>形式，将<code>业务功能</code>、<code>基础功能</code>模块以模块方式以解决大型应用中的复杂问题，并让<code>模块之间以Service形式调用</code>，将复杂问题切分，以AOP方式模块化服务。</p><p>**<br>**</p><h4 id="BeeHive-核心思想"><a href="#BeeHive-核心思想" class="headerlink" title="BeeHive 核心思想"></a>BeeHive 核心思想</h4><ul><li>1、各个模块间调用从直接调用对应模块，变成调用<code>Service</code>的形式，避免了直接依赖。</li><li>2、App生命周期的分发，将耦合在<code>AppDelegate</code>中逻辑拆分，每个模块以微应用的形式独立存在。</li></ul><p>示例如下（本想用swift写的，但是有点问题，暂时用OC写）：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">//******** 1、注册</span><br>[[BeeHive shareInstance] registerService:<span class="hljs-meta">@protocol(HomeServiceProtocol)</span> service:[BHViewController <span class="hljs-class"><span class="hljs-keyword">class</span>]];</span><br><br><span class="hljs-comment">//******** 2、使用</span><br>#<span class="hljs-keyword">import</span> <span class="hljs-string">&quot;BHService.h&quot;</span><br><br>id&lt; HomeServiceProtocol &gt; homeVc = [[BeeHive shareInstance] createService:<span class="hljs-meta">@protocol(HomeServiceProtocol)</span>];<br></code></pre></td></tr></table></figure><p><strong>优点</strong></p><p>**<br>**</p><ul><li>1、利用接口调用，实现了参数传递时的类型安全</li><li>2、直接使用模块的protocol接口，无需再重复封装</li></ul><p><strong>缺点</strong></p><p>**<br>**</p><ul><li>1、用框架来创建所有对象，创建方式不同，即不支持外部传入参数</li><li>2、用<code>OC runtime</code>创建对象，不支持swift</li><li>3、只做了<code>protocol</code> 和 <code>class</code> 的匹配，不支持更复杂的创建方式 和依赖注入</li><li>4、无法保证所使用的protocol 一定存在对应的模块，也无法直接判断某个protocol是否能用于获取模块</li></ul><p>除了<code>BeeHive</code>，还有<a href="https://links.jianshu.com/go?to=https://github.com/Swinject/Swinject">Swinject</a></p><h3 id="BeeHive-模块注册"><a href="#BeeHive-模块注册" class="headerlink" title="BeeHive 模块注册"></a>BeeHive 模块注册</h3><p>在<code>BeeHive</code>主要是通过<code>BHModuleManager</code>来管理各个模块的。<code>BHModuleManager</code>中只会管理已经被注册过的模块。</p><p>BeeHive提供了三种不同的调用形式，<code>静态plist</code>，<code>动态注册</code>，<code>annotation</code>。Module、Service之间没有关联，每个业务模块可以单独实现Module或者Service的功能。</p><h4 id="1、-Annotation方式注册"><a href="#1、-Annotation方式注册" class="headerlink" title="1、 Annotation方式注册"></a>1、 Annotation方式注册</h4><p>这种方式主要是通过<code>BeeHiveMod</code>宏进行<code>Annotation</code>标记</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">//***** 使用</span><br><span class="hljs-constructor">BeeHiveMod(ShopModule)</span><br><br><span class="hljs-comment">//***** BeeHiveMod的宏定义</span><br>#define <span class="hljs-constructor">BeeHiveMod(<span class="hljs-params">name</span>)</span> \<br><span class="hljs-keyword">class</span> BeeHive; <span class="hljs-built_in">char</span><span class="hljs-operator"> * </span>k##name##_mod <span class="hljs-constructor">BeeHiveDATA(BeehiveMods)</span> = <span class="hljs-string">&quot;&quot;</span>#name<span class="hljs-string">&quot;&quot;</span>;<br><br><span class="hljs-comment">//***** BeeHiveDATA的宏定义 </span><br>#define <span class="hljs-constructor">BeeHiveDATA(<span class="hljs-params">sectname</span>)</span> <span class="hljs-constructor">__attribute((<span class="hljs-params">used</span>, <span class="hljs-params">section</span>(<span class="hljs-string">&quot;__DATA,&quot;</span>#<span class="hljs-params">sectname</span><span class="hljs-string">&quot; &quot;</span>)</span>))<br><br><span class="hljs-comment">//*****  全部转换出来后为下面的格式</span><br><span class="hljs-built_in">char</span><span class="hljs-operator"> * </span>kShopModule_mod <span class="hljs-constructor">__attribute((<span class="hljs-params">used</span>, <span class="hljs-params">section</span>(<span class="hljs-string">&quot;__DATA,&quot;</span><span class="hljs-string">&quot;BeehiveMods&quot;</span><span class="hljs-string">&quot; &quot;</span>)</span>)) = <span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;ShopModule&quot;</span><span class="hljs-string">&quot;&quot;</span>;<br></code></pre></td></tr></table></figure><p>这里针对<code>__attribute</code>需要说明以下几点</p><ul><li>第一个参数<code>used</code>：用来修饰函数，被used修饰以后，意味着即使函数没有被引用，在Release下也不会被优化。如果不加这个修饰，那么Release环境链接器下会去掉没有被引用的段。</li><li>通过使用<code>__attribute__((section(&quot;name&quot;)))</code>来指明哪个段。数据则用<code>__attribute__((used))</code>来标记，防止链接器会优化删除未被使用的段，然后将模块注入到<code>__DATA</code>中</li></ul><p>此时Module已经被存储到Mach-O文件的特殊段中，那么如何取呢？</p><ul><li>进入<code>BHReadConfiguration</code>方法，主要是通过<code>Mach-O</code>找到存储的数据段，取出放入数组中</li></ul><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function">NSArray&lt;NSString *&gt;* <span class="hljs-title">BHReadConfiguration</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *sectionName,<span class="hljs-keyword">const</span> struct mach_header *mhp)</span></span><br><span class="hljs-function"></span>&#123;<br>    <br>    NSMutableArray *configs = [NSMutableArray <span class="hljs-built_in">array</span>];<br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-built_in">size</span> = <span class="hljs-number">0</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span> __LP64__</span><br>    <span class="hljs-comment">// 找到之前存储的数据段(Module找BeehiveMods段 和 Service找BeehiveServices段)的一片内存</span><br>    <span class="hljs-keyword">uintptr_t</span> *memory = (<span class="hljs-keyword">uintptr_t</span>*)getsectiondata(mhp, SEG_DATA, sectionName, &amp;<span class="hljs-built_in">size</span>);<br><span class="hljs-meta">#<span class="hljs-meta-keyword">else</span></span><br>    <span class="hljs-keyword">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mach_header_64</span> *<span class="hljs-title">mhp64</span> = (<span class="hljs-title">const</span> <span class="hljs-title">struct</span> <span class="hljs-title">mach_header_64</span> *)<span class="hljs-title">mhp</span>;</span><br>    <span class="hljs-keyword">uintptr_t</span> *memory = (<span class="hljs-keyword">uintptr_t</span>*)getsectiondata(mhp64, SEG_DATA, sectionName, &amp;<span class="hljs-built_in">size</span>);<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br>    <br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> counter = <span class="hljs-built_in">size</span>/<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">void</span>*);<br>    <span class="hljs-comment">// 把特殊段里面的数据都转换成字符串存入数组中</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> idx = <span class="hljs-number">0</span>; idx &lt; counter; ++idx)&#123;<br>        <span class="hljs-keyword">char</span> *<span class="hljs-built_in">string</span> = (<span class="hljs-keyword">char</span>*)memory[idx];<br>        NSString *str = [NSString stringWithUTF8String:<span class="hljs-built_in">string</span>];<br>        <span class="hljs-keyword">if</span>(!str)<span class="hljs-keyword">continue</span>;<br>        <br>        BHLog(@<span class="hljs-string">&quot;config = %@&quot;</span>, str);<br>        <span class="hljs-keyword">if</span>(str) [configs addObject:str];<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> configs; <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2、读取本地Pilst文件"><a href="#2、读取本地Pilst文件" class="headerlink" title="2、读取本地Pilst文件"></a>2、读取本地Pilst文件</h4><ul><li>首先，需要设置好路径</li></ul><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">[<span class="hljs-keyword">BHContext </span><span class="hljs-keyword">shareInstance].moduleConfigName </span>= @<span class="hljs-string">&quot;BeeHive.bundle/BeeHive&quot;</span><span class="hljs-comment">;//可选，默认为BeeHive.bundle/BeeHive.plist</span><br></code></pre></td></tr></table></figure><p>创建plist文件，<code>Plist</code>文件的格式也是数组中包含多个字典。字典里面有两个Key，一个是<code>@&quot;moduleLevel&quot;</code>，另一个是<code>@&quot;moduleClass&quot;</code>。注意<code>根</code>的数组的名字叫<code>@“moduleClasses”</code>。</p><img src="/2022/03/22/iOS%E7%BB%84%E4%BB%B6%E5%8C%96%E6%96%B9%E6%A1%88-Part2/00203bd5fb6f4b58ae880570cd684117.png" class="" title="image.png"><ul><li>进入<code>loadLocalModules</code>方法，主要是从<code>Plist</code>里面取出数组，然后把数组加入到<code>BHModuleInfos</code>数组里面。</li></ul><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs objectivec"><span class="hljs-comment">//初始化context时，加载Modules和Services</span><br>-(<span class="hljs-keyword">void</span>)setContext:(BHContext *)context<br>&#123;<br>    _context = context;<br>    <br>    <span class="hljs-keyword">static</span> <span class="hljs-built_in">dispatch_once_t</span> onceToken;<br>    <span class="hljs-built_in">dispatch_once</span>(&amp;onceToken, ^&#123;<br>        [<span class="hljs-keyword">self</span> loadStaticServices];<br>        [<span class="hljs-keyword">self</span> loadStaticModules];<br>    &#125;);<br>&#125;<br>👇<br><span class="hljs-comment">//加载modules</span><br>- (<span class="hljs-keyword">void</span>)loadStaticModules<br>&#123;<br>    <span class="hljs-comment">// 读取本地plist文件里面的Module，并注册到BHModuleManager的BHModuleInfos数组中</span><br>    [[BHModuleManager sharedManager] loadLocalModules];<br>    <span class="hljs-comment">//注册所有modules，在内部根据优先级进行排序</span><br>    [[BHModuleManager sharedManager] registedAllModules];<br>    <br>&#125;<br>👇<br>- (<span class="hljs-keyword">void</span>)loadLocalModules<br>&#123;<br>    <span class="hljs-comment">//plist文件路径</span><br>    <span class="hljs-built_in">NSString</span> *plistPath = [[<span class="hljs-built_in">NSBundle</span> mainBundle] pathForResource:[BHContext shareInstance].moduleConfigName ofType:<span class="hljs-string">@&quot;plist&quot;</span>];<br>    <span class="hljs-comment">//判断文件是否存在</span><br>    <span class="hljs-keyword">if</span> (![[<span class="hljs-built_in">NSFileManager</span> defaultManager] fileExistsAtPath:plistPath]) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-comment">//读取整个文件[@&quot;moduleClasses&quot; : 数组]</span><br>    <span class="hljs-built_in">NSDictionary</span> *moduleList = [[<span class="hljs-built_in">NSDictionary</span> alloc] initWithContentsOfFile:plistPath];<br>    <span class="hljs-comment">//通过moduleClasses key读取 数组 [[@&quot;moduleClass&quot;:&quot;aaa&quot;, @&quot;moduleLevel&quot;: @&quot;bbb&quot;], [...]]</span><br>    <span class="hljs-built_in">NSArray</span>&lt;<span class="hljs-built_in">NSDictionary</span> *&gt; *modulesArray = [moduleList objectForKey:kModuleArrayKey];<br>    <span class="hljs-built_in">NSMutableDictionary</span>&lt;<span class="hljs-built_in">NSString</span> *, <span class="hljs-built_in">NSNumber</span> *&gt; *moduleInfoByClass = @&#123;&#125;.mutableCopy;<br>    <span class="hljs-comment">//遍历数组</span><br>    [<span class="hljs-keyword">self</span>.BHModuleInfos enumerateObjectsUsingBlock:^(<span class="hljs-built_in">NSDictionary</span> * _Nonnull obj, <span class="hljs-built_in">NSUInteger</span> idx, <span class="hljs-built_in">BOOL</span> * _Nonnull stop) &#123;<br>        [moduleInfoByClass setObject:@<span class="hljs-number">1</span> forKey:[obj objectForKey:kModuleInfoNameKey]];<br>    &#125;];<br>    [modulesArray enumerateObjectsUsingBlock:^(<span class="hljs-built_in">NSDictionary</span> * _Nonnull obj, <span class="hljs-built_in">NSUInteger</span> idx, <span class="hljs-built_in">BOOL</span> * _Nonnull stop) &#123;<br>        <span class="hljs-keyword">if</span> (!moduleInfoByClass[[obj objectForKey:kModuleInfoNameKey]]) &#123;<br>            <span class="hljs-comment">//存储到 BHModuleInfos 中</span><br>            [<span class="hljs-keyword">self</span>.BHModuleInfos addObject:obj];<br>        &#125;<br>    &#125;];<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3、load方法注册"><a href="#3、load方法注册" class="headerlink" title="3、load方法注册"></a>3、load方法注册</h4><p>该方法<code>注册Module</code>就是在<code>Load</code>方法里面注册Module的类</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp">+ (<span class="hljs-keyword">void</span>)load<br>&#123;<br>    [BeeHive registerDynamicModule:[self <span class="hljs-class"><span class="hljs-keyword">class</span>]];</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>进入<code>registerDynamicModule</code>实现</li></ul><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs groovy">+ (<span class="hljs-keyword">void</span>)<span class="hljs-attr">registerDynamicModule:</span>(Class)moduleClass<br>&#123;<br>    [[BHModuleManager sharedManager] <span class="hljs-attr">registerDynamicModule:</span>moduleClass];<br>&#125;<br>👇<br>- (<span class="hljs-keyword">void</span>)<span class="hljs-attr">registerDynamicModule:</span>(Class)moduleClass<br>&#123;<br>    [self <span class="hljs-attr">registerDynamicModule:</span>moduleClass <span class="hljs-attr">shouldTriggerInitEvent:</span>NO];<br>&#125;<br>👇<br>- (<span class="hljs-keyword">void</span>)<span class="hljs-attr">registerDynamicModule:</span>(Class)moduleClass<br>       <span class="hljs-symbol">shouldTriggerInitEvent:</span>(BOOL)shouldTriggerInitEvent<br>&#123;<br>    [self <span class="hljs-attr">addModuleFromObject:</span>moduleClass <span class="hljs-attr">shouldTriggerInitEvent:</span>shouldTriggerInitEvent];<br>&#125;<br></code></pre></td></tr></table></figure><p>其底层还是同第一种方式一样，最终会走到<code>addModuleFromObject:shouldTriggerInitEvent:</code>方法中</p><ul><li>load方法，还可以使用<code>BH_EXPORT_MODULE</code>宏代替</li></ul><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-meta">#define BH_EXPORT_MODULE(isAsync) \</span><br>+ (<span class="hljs-keyword">void</span>)load &#123; [BeeHive registerDynamicModule:[self <span class="hljs-class"><span class="hljs-keyword">class</span>]]; &#125; \</span><br><span class="hljs-class">-(<span class="hljs-title">BOOL</span>)<span class="hljs-title">async</span> </span>&#123; <span class="hljs-keyword">return</span> [[NSString stringWithUTF8String:<span class="hljs-meta">#isAsync] boolValue];&#125;</span><br></code></pre></td></tr></table></figure><p><code>BH_EXPORT_MODULE</code>宏里面可以传入一个参数，代表<code>是否异步加载Module模块</code>，如果是<code>YES</code>就是<code>异步加载</code>，如果是<code>NO</code>就是<code>同步加载</code>。</p><h3 id="2、BeeHive-模块事件"><a href="#2、BeeHive-模块事件" class="headerlink" title="2、BeeHive 模块事件"></a>2、BeeHive 模块事件</h3><p>BeeHive会给每个模块提供生命周期事件，用于与BeeHive宿主环境进行必要信息交互，感知模块生命周期的变化。</p><p>BeeHive各个模块会收到一些事件。在<code>BHModuleManager</code>中，所有的事件被定义成了<code>BHModuleEventType</code>枚举。如下所示，其中有2个事件很特殊，一个是<code>BHMInitEvent</code>，一个是<code>BHMTearDownEvent</code></p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">typedef NS_ENUM(NSInteger, BHModuleEventType)<br>&#123;<br>    //设置Module模块<br>    BHMSetupEvent = <span class="hljs-number">0</span>,<br>    //用于初始化Module模块，例如环境判断，根据不同环境进行不同初始化<br><span class="hljs-built_in">    BHMInitEvent,</span><br>    //用于拆除Module模块<br><span class="hljs-built_in">    BHMTearDownEvent,</span><br><span class="hljs-built_in">    BHMSplashEvent,</span><br><span class="hljs-built_in">    BHMQuickActionEvent,</span><br><span class="hljs-built_in">    BHMWillResignActiveEvent,</span><br><span class="hljs-built_in">    BHMDidEnterBackgroundEvent,</span><br><span class="hljs-built_in">    BHMWillEnterForegroundEvent,</span><br><span class="hljs-built_in">    BHMDidBecomeActiveEvent,</span><br><span class="hljs-built_in">    BHMWillTerminateEvent,</span><br><span class="hljs-built_in">    BHMUnmountEvent,</span><br><span class="hljs-built_in">    BHMOpenURLEvent,</span><br><span class="hljs-built_in">    BHMDidReceiveMemoryWarningEvent,</span><br><span class="hljs-built_in">    BHMDidFailToRegisterForRemoteNotificationsEvent,</span><br><span class="hljs-built_in">    BHMDidRegisterForRemoteNotificationsEvent,</span><br><span class="hljs-built_in">    BHMDidReceiveRemoteNotificationEvent,</span><br><span class="hljs-built_in">    BHMDidReceiveLocalNotificationEvent,</span><br><span class="hljs-built_in">    BHMWillPresentNotificationEvent,</span><br><span class="hljs-built_in">    BHMDidReceiveNotificationResponseEvent,</span><br><span class="hljs-built_in">    BHMWillContinueUserActivityEvent,</span><br><span class="hljs-built_in">    BHMContinueUserActivityEvent,</span><br><span class="hljs-built_in">    BHMDidFailToContinueUserActivityEvent,</span><br><span class="hljs-built_in">    BHMDidUpdateUserActivityEvent,</span><br><span class="hljs-built_in">    BHMHandleWatchKitExtensionRequestEvent,</span><br>    BHMDidCustomEvent = <span class="hljs-number">1000</span><br>    <br>&#125;<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>主要分为三种</p><ul><li>1、<code>系统事件</code>：主要是指<code>Application生命周期事件</code>!<img src="/2022/03/22/iOS%E7%BB%84%E4%BB%B6%E5%8C%96%E6%96%B9%E6%A1%88-Part2/457cc2e7bd1345e58e5ee7aa63e94df5.png" class="" title="image.png"></li></ul><p>一般的做法是<code>AppDelegate</code>改为<code>继承自BHAppDelegate</code></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">@<span class="hljs-keyword">interface</span> <span class="hljs-symbol">TestAppDelegate</span> : <span class="hljs-symbol">BHAppDelegate</span> &lt;<span class="hljs-symbol">UIApplicationDelegate</span>&gt;<br></code></pre></td></tr></table></figure><p>2、<code>应用事件</code>：官方给出的流程图，其中<code>modSetup</code>、<code>modInit</code>等，可以用于编码实现各插件模块的设置与初始化。</p><img src="/2022/03/22/iOS%E7%BB%84%E4%BB%B6%E5%8C%96%E6%96%B9%E6%A1%88-Part2/4dff469e37654d99b9c051fd7aafbad4.png" class="" title="image.png"><ul><li>3、<code>自定义事件</code></li></ul><p>以上所有的事件都可以通过调用<code>BHModuleManager</code>的<code>triggerEvent:</code>来处理。</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs objectivec">- (<span class="hljs-keyword">void</span>)triggerEvent:(<span class="hljs-built_in">NSInteger</span>)eventType<br>&#123;<br>    [<span class="hljs-keyword">self</span> triggerEvent:eventType withCustomParam:<span class="hljs-literal">nil</span>];<br>    <br>&#125;<br>👇<br>- (<span class="hljs-keyword">void</span>)triggerEvent:(<span class="hljs-built_in">NSInteger</span>)eventType<br>     withCustomParam:(<span class="hljs-built_in">NSDictionary</span> *)customParam &#123;<br>    [<span class="hljs-keyword">self</span> handleModuleEvent:eventType forTarget:<span class="hljs-literal">nil</span> withCustomParam:customParam];<br>&#125;<br>👇<br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> mark - module protocol</span><br>- (<span class="hljs-keyword">void</span>)handleModuleEvent:(<span class="hljs-built_in">NSInteger</span>)eventType<br>                forTarget:(<span class="hljs-keyword">id</span>&lt;BHModuleProtocol&gt;)target<br>          withCustomParam:(<span class="hljs-built_in">NSDictionary</span> *)customParam<br>&#123;<br>    <span class="hljs-keyword">switch</span> (eventType) &#123;<br>            <span class="hljs-comment">//初始化事件</span><br>        <span class="hljs-keyword">case</span> BHMInitEvent:<br>            <span class="hljs-comment">//special</span><br>            [<span class="hljs-keyword">self</span> handleModulesInitEventForTarget:<span class="hljs-literal">nil</span> withCustomParam :customParam];<br>            <span class="hljs-keyword">break</span>;<br>            <span class="hljs-comment">//析构事件</span><br>        <span class="hljs-keyword">case</span> BHMTearDownEvent:<br>            <span class="hljs-comment">//special</span><br>            [<span class="hljs-keyword">self</span> handleModulesTearDownEventForTarget:<span class="hljs-literal">nil</span> withCustomParam:customParam];<br>            <span class="hljs-keyword">break</span>;<br>            <span class="hljs-comment">//其他3类事件</span><br>        <span class="hljs-keyword">default</span>: &#123;<br>            <span class="hljs-built_in">NSString</span> *selectorStr = [<span class="hljs-keyword">self</span>.BHSelectorByEvent objectForKey:@(eventType)];<br>            [<span class="hljs-keyword">self</span> handleModuleEvent:eventType forTarget:<span class="hljs-literal">nil</span> withSeletorStr:selectorStr andCustomParam:customParam];<br>        &#125;<br>            <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>从上面的代码中可以发现，除去<code>BHMInitEvent</code>初始化事件和<code>BHMTearDownEvent</code>拆除Module事件这两个特殊事件以外，所有的事件都是调用的<code>handleModuleEvent:forTarget:withSeletorStr:andCustomParam:</code>方法，其内部实现主要是遍历 <code>moduleInstances</code> 实例数组，调用<code>performSelector:withObject:</code>方法实现对应方法调用</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs objectivec">- (<span class="hljs-keyword">void</span>)handleModuleEvent:(<span class="hljs-built_in">NSInteger</span>)eventType<br>                forTarget:(<span class="hljs-keyword">id</span>&lt;BHModuleProtocol&gt;)target<br>           withSeletorStr:(<span class="hljs-built_in">NSString</span> *)selectorStr<br>           andCustomParam:(<span class="hljs-built_in">NSDictionary</span> *)customParam<br>&#123;<br>    BHContext *context = [BHContext shareInstance].copy;<br>    context.customParam = customParam;<br>    context.customEvent = eventType;<br>    <span class="hljs-keyword">if</span> (!selectorStr.length) &#123;<br>        selectorStr = [<span class="hljs-keyword">self</span>.BHSelectorByEvent objectForKey:@(eventType)];<br>    &#125;<br>    SEL seletor = <span class="hljs-built_in">NSSelectorFromString</span>(selectorStr);<br>    <span class="hljs-keyword">if</span> (!seletor) &#123;<br>        selectorStr = [<span class="hljs-keyword">self</span>.BHSelectorByEvent objectForKey:@(eventType)];<br>        seletor = <span class="hljs-built_in">NSSelectorFromString</span>(selectorStr);<br>    &#125;<br>    <span class="hljs-built_in">NSArray</span>&lt;<span class="hljs-keyword">id</span>&lt;BHModuleProtocol&gt;&gt; *moduleInstances;<br>    <span class="hljs-keyword">if</span> (target) &#123;<br>        moduleInstances = @[target];<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        moduleInstances = [<span class="hljs-keyword">self</span>.BHModulesByEvent objectForKey:@(eventType)];<br>    &#125;<br>    <span class="hljs-comment">//遍历 moduleInstances 实例数组，调用performSelector:withObject:方法实现对应方法调用</span><br>    [moduleInstances enumerateObjectsUsingBlock:^(<span class="hljs-keyword">id</span>&lt;BHModuleProtocol&gt; moduleInstance, <span class="hljs-built_in">NSUInteger</span> idx, <span class="hljs-built_in">BOOL</span> * _Nonnull stop) &#123;<br>        <span class="hljs-keyword">if</span> ([moduleInstance respondsToSelector:seletor]) &#123;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> clang diagnostic push</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> clang diagnostic ignored <span class="hljs-meta-string">&quot;-Warc-performSelector-leaks&quot;</span></span><br>            <span class="hljs-comment">//进行方法调用</span><br>            [moduleInstance performSelector:seletor withObject:context];<br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> clang diagnostic pop</span><br>            <br>            [[BHTimeProfiler sharedTimeProfiler] recordEventTime:[<span class="hljs-built_in">NSString</span> stringWithFormat:<span class="hljs-string">@&quot;%@ --- %@&quot;</span>, [moduleInstance <span class="hljs-keyword">class</span>], <span class="hljs-built_in">NSStringFromSelector</span>(seletor)]];<br>            <br>        &#125;<br>    &#125;];<br>&#125;<br></code></pre></td></tr></table></figure><p>注意:这里所有的<code>Module</code>必须是遵循<code>BHModuleProtocol</code>的，否则无法接收到这些事件的消息。</p><h3 id="3、BeeHive模块调用"><a href="#3、BeeHive模块调用" class="headerlink" title="3、BeeHive模块调用"></a>3、BeeHive模块调用</h3><p>在BeeHive中是通过<code>BHServiceManager</code>来管理各个<code>Protocol</code>的。<code>BHServiceManager</code>中只会管理已经<code>被注册过的Protocol</code>。</p><p>注册<code>Protocol</code>的方式总共有三种，和注册<code>Module</code>是一样一一对应的</p><p>**<br>**</p><p><strong>1、Annotation方式注册</strong></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">//****** 1、通过BeeHiveService宏进行Annotation标记</span><br><span class="hljs-constructor">BeeHiveService(HomeServiceProtocol,BHViewController)</span><br><br><span class="hljs-comment">//****** 2、宏定义</span><br>#define <span class="hljs-constructor">BeeHiveService(<span class="hljs-params">servicename</span>,<span class="hljs-params">impl</span>)</span> \<br><span class="hljs-keyword">class</span> BeeHive; <span class="hljs-built_in">char</span><span class="hljs-operator"> * </span>k##servicename##_service <span class="hljs-constructor">BeeHiveDATA(BeehiveServices)</span> = <span class="hljs-string">&quot;&#123; \&quot;&quot;</span>#servicename<span class="hljs-string">&quot;\&quot; : \&quot;&quot;</span>#impl<span class="hljs-string">&quot;\&quot;&#125;&quot;</span>;<br><br><span class="hljs-comment">//****** 3、转换后的格式，也是将其存储到特殊的段</span><br><span class="hljs-built_in">char</span><span class="hljs-operator"> * </span>kHomeServiceProtocol_service <span class="hljs-constructor">__attribute((<span class="hljs-params">used</span>, <span class="hljs-params">section</span>(<span class="hljs-string">&quot;__DATA,&quot;</span><span class="hljs-string">&quot;BeehiveServices&quot;</span><span class="hljs-string">&quot; &quot;</span>)</span>)) = <span class="hljs-string">&quot;&#123; \&quot;&quot;</span><span class="hljs-string">&quot;HomeServiceProtocol&quot;</span><span class="hljs-string">&quot;\&quot; : \&quot;&quot;</span><span class="hljs-string">&quot;BHViewController&quot;</span><span class="hljs-string">&quot;\&quot;&#125;&quot;</span>;<br></code></pre></td></tr></table></figure><p><strong>2、读取本地plist文件</strong></p><p>**<br>**</p><ul><li>首先同Module一样，需要先设置好路径</li></ul><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">[<span class="hljs-keyword">BHContext </span><span class="hljs-keyword">shareInstance].serviceConfigName </span>= @<span class="hljs-string">&quot;BeeHive.bundle/BHService&quot;</span>;<br></code></pre></td></tr></table></figure><p>设置plist文件</p><img src="/2022/03/22/iOS%E7%BB%84%E4%BB%B6%E5%8C%96%E6%96%B9%E6%A1%88-Part2/4df6cb91860d497cbd80e60c033dae9c.png" class="" title="image.png"><ul><li>同样也是在<code>setContext</code>时注册<code>services</code></li></ul><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs objectivec"><span class="hljs-comment">//加载services</span><br>-(<span class="hljs-keyword">void</span>)loadStaticServices<br>&#123;<br>    [BHServiceManager sharedManager].enableException = <span class="hljs-keyword">self</span>.enableException;<br>    <br>    [[BHServiceManager sharedManager] registerLocalServices];<br>    <br>&#125;<br>👇<br>- (<span class="hljs-keyword">void</span>)registerLocalServices<br>&#123;<br>    <span class="hljs-built_in">NSString</span> *serviceConfigName = [BHContext shareInstance].serviceConfigName;<br>    <span class="hljs-comment">//获取plist文件路径</span><br>    <span class="hljs-built_in">NSString</span> *plistPath = [[<span class="hljs-built_in">NSBundle</span> mainBundle] pathForResource:serviceConfigName ofType:<span class="hljs-string">@&quot;plist&quot;</span>];<br>    <span class="hljs-keyword">if</span> (!plistPath) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <br>    <span class="hljs-built_in">NSArray</span> *serviceList = [[<span class="hljs-built_in">NSArray</span> alloc] initWithContentsOfFile:plistPath];<br>    <br>    [<span class="hljs-keyword">self</span>.lock lock];<br>    <span class="hljs-comment">//遍历并存储到allServicesDict中</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">NSDictionary</span> *dict <span class="hljs-keyword">in</span> serviceList) &#123;<br>        <span class="hljs-built_in">NSString</span> *protocolKey = [dict objectForKey:<span class="hljs-string">@&quot;service&quot;</span>];<br>        <span class="hljs-built_in">NSString</span> *protocolImplClass = [dict objectForKey:<span class="hljs-string">@&quot;impl&quot;</span>];<br>        <span class="hljs-keyword">if</span> (protocolKey.length &gt; <span class="hljs-number">0</span> &amp;&amp; protocolImplClass.length &gt; <span class="hljs-number">0</span>) &#123;<br>            [<span class="hljs-keyword">self</span>.allServicesDict addEntriesFromDictionary:@&#123;protocolKey:protocolImplClass&#125;];<br>        &#125;<br>    &#125;<br>    [<span class="hljs-keyword">self</span>.lock unlock];<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>3、load方法注册</strong></p><p>**<br>**</p><p>在Load方法里面注册<code>Protocol</code>协议，主要是调用<code>BeeHive</code>里面的<code>registerService:service:</code>完成<code>protocol</code>的注册</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs lua">+ (void)<span class="hljs-built_in">load</span><br>&#123;<br>   <span class="hljs-string">[[BeeHive shareInstance] registerService:@protocol(UserTrackServiceProtocol) service:[BHUserTrackViewController class]]</span>;<br>&#125;<br>👇<br>- (void)registerService:(Protocol *)proto service:(Class) serviceClass<br>&#123;<br>    <span class="hljs-string">[[BHServiceManager sharedManager] registerService:proto implClass:serviceClass];</span><br><span class="hljs-string">&#125;</span><br></code></pre></td></tr></table></figure><p>到此，三种方式就创建完成了</p><p><strong>Protocol的获取</strong></p><p>**<br>**</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs objectivec">Protocol`与`Module`的区别在于，`Protocol`比`Module`多了一个方法，可以`返回Protocol实例对象<br>- (<span class="hljs-keyword">id</span>)createService:(Protocol *)proto;<br>&#123;<br>    <span class="hljs-keyword">return</span> [[BHServiceManager sharedManager] createService:proto];<br>&#125;<br>👇<br>- (<span class="hljs-keyword">id</span>)createService:(Protocol *)service<br>&#123;<br>    <span class="hljs-keyword">return</span> [<span class="hljs-keyword">self</span> createService:service withServiceName:<span class="hljs-literal">nil</span>];<br>&#125;<br>👇<br>- (<span class="hljs-keyword">id</span>)createService:(Protocol *)service withServiceName:(<span class="hljs-built_in">NSString</span> *)serviceName &#123;<br>    <span class="hljs-keyword">return</span> [<span class="hljs-keyword">self</span> createService:service withServiceName:serviceName shouldCache:<span class="hljs-literal">YES</span>];<br>&#125;<br>👇<br>- (<span class="hljs-keyword">id</span>)createService:(Protocol *)service withServiceName:(<span class="hljs-built_in">NSString</span> *)serviceName shouldCache:(<span class="hljs-built_in">BOOL</span>)shouldCache &#123;<br>    <span class="hljs-keyword">if</span> (!serviceName.length) &#123;<br>        serviceName = <span class="hljs-built_in">NSStringFromProtocol</span>(service);<br>    &#125;<br>    <span class="hljs-keyword">id</span> implInstance = <span class="hljs-literal">nil</span>;<br>    <span class="hljs-comment">//判断protocol是否已经注册过</span><br>    <span class="hljs-keyword">if</span> (![<span class="hljs-keyword">self</span> checkValidService:service]) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">self</span>.enableException) &#123;<br>            <span class="hljs-keyword">@throw</span> [<span class="hljs-built_in">NSException</span> exceptionWithName:<span class="hljs-built_in">NSInternalInconsistencyException</span> reason:[<span class="hljs-built_in">NSString</span> stringWithFormat:<span class="hljs-string">@&quot;%@ protocol does not been registed&quot;</span>, <span class="hljs-built_in">NSStringFromProtocol</span>(service)] userInfo:<span class="hljs-literal">nil</span>];<br>        &#125;<br>        <br>    &#125;<br>    <br>    <span class="hljs-built_in">NSString</span> *serviceStr = serviceName;<br>    <span class="hljs-comment">//如果有缓存，则直接从缓存中获取</span><br>    <span class="hljs-keyword">if</span> (shouldCache) &#123;<br>        <span class="hljs-keyword">id</span> protocolImpl = [[BHContext shareInstance] getServiceInstanceFromServiceName:serviceStr];<br>        <span class="hljs-keyword">if</span> (protocolImpl) &#123;<br>            <span class="hljs-keyword">return</span> protocolImpl;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//获取类后，然后响应下层的方法</span><br>    Class implClass = [<span class="hljs-keyword">self</span> serviceImplClass:service];<br>    <span class="hljs-keyword">if</span> ([[implClass <span class="hljs-keyword">class</span>] respondsToSelector:<span class="hljs-keyword">@selector</span>(singleton)]) &#123;<br>        <span class="hljs-keyword">if</span> ([[implClass <span class="hljs-keyword">class</span>] singleton]) &#123;<br>            <span class="hljs-keyword">if</span> ([[implClass <span class="hljs-keyword">class</span>] respondsToSelector:<span class="hljs-keyword">@selector</span>(shareInstance)])<br>                <span class="hljs-comment">//创建单例对象</span><br>                implInstance = [[implClass <span class="hljs-keyword">class</span>] shareInstance];<br>            <span class="hljs-keyword">else</span><br>                <span class="hljs-comment">//创建实例对象</span><br>                implInstance = [[implClass alloc] init];<br>            <span class="hljs-keyword">if</span> (shouldCache) &#123;<br>                <span class="hljs-comment">//缓存</span><br>                [[BHContext shareInstance] addServiceWithImplInstance:implInstance serviceName:serviceStr];<br>                <span class="hljs-keyword">return</span> implInstance;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">return</span> implInstance;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> [[implClass alloc] init];<br>&#125;<br></code></pre></td></tr></table></figure><p><code>createService</code>会先检查Protocol协议是否是注册过的。然后接着取出字典里面对应的Class，如果实现了<code>shareInstance</code>方法，那么就创建一个<code>单例对象</code>，如果没有，那么就创建一个<code>实例对象</code>。如果还实现了singleton，就能进一步的把<code>implInstance</code>和<code>serviceStr</code>对应的加到<code>BHContext</code>的<code>servicesByName</code>字典里面<code>缓存</code>起来。这样就可以随着上下文传递了</p><ul><li>进入<code>serviceImplClass</code>实现，从这里可以看出 protocol和类是通过<code>字典</code>绑定的，<code>protocol</code>作为<code>key</code>，<code>serviceImp</code>（类的名字）作为<code>value</code></li></ul><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs objectivec">- (Class)serviceImplClass:(Protocol *)service<br>&#123;<br>    <span class="hljs-comment">//通过字典将 协议 和 类 绑定，其中协议作为key，serviceImp（类的名字）作为value</span><br>    <span class="hljs-built_in">NSString</span> *serviceImpl = [[<span class="hljs-keyword">self</span> servicesDict] objectForKey:<span class="hljs-built_in">NSStringFromProtocol</span>(service)];<br>    <span class="hljs-keyword">if</span> (serviceImpl.length &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">NSClassFromString</span>(serviceImpl);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Module-amp-Protocol"><a href="#Module-amp-Protocol" class="headerlink" title="Module &amp; Protocol"></a>Module &amp; Protocol</h3><p>这里简单总结下：</p><ul><li>对于<code>Module</code>：数组存储</li><li>对于<code>Protocol</code>：通过字典将<code>protocol</code>与类进行绑定，<code>key</code>为<code>protocol</code>，<code>value</code>为 <code>serviceImp</code>即类名</li></ul><h3 id="辅助类"><a href="#辅助类" class="headerlink" title="辅助类"></a>辅助类</h3><ul><li><code>BHConfig</code>类：是一个单例，其内部有一个<code>NSMutableDictionary</code>类型的<code>config</code>属性，该属性维护了一些动态的环境变量，作为<code>BHContext</code>的补充存在</li><li><code>BHContext</code>类：是一个单例，其内部有两个<code>NSMutableDictionary</code>的属性，分别是<code>modulesByName</code> 和 <code>servicesByName</code>。这个类主要用来保存上下文信息的。例如在<code>application:didFinishLaunchingWithOptions:</code>的时候，就可以初始化大量的上下文信息</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">//保存信息</span><br>[<span class="hljs-meta">BHContext shareInstance</span>].application = application;<br>[<span class="hljs-meta">BHContext shareInstance</span>].launchOptions = launchOptions;<br>[<span class="hljs-meta">BHContext shareInstance</span>].moduleConfigName = <span class="hljs-string">@&quot;BeeHive.bundle/BeeHive&quot;</span>;<span class="hljs-comment">//可选，默认为BeeHive.bundle/BeeHive.plist</span><br>[<span class="hljs-meta">BHContext shareInstance</span>].serviceConfigName = <span class="hljs-string">@&quot;BeeHive.bundle/BHService&quot;</span>;<br></code></pre></td></tr></table></figure><ul><li><code>BHTimeProfiler</code>类：用来进行计算时间性能方面的Profiler</li><li><code>BHWatchDog</code>类：用来开一个线程，监听主线程是否堵塞</li></ul>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
      <category>iOS架构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>iOS</tag>
      
      <tag>架构</tag>
      
      <tag>组件化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>iOS组件化方案(1)</title>
    <link href="/2022/03/22/iOS%E7%BB%84%E4%BB%B6%E5%8C%96%E6%96%B9%E6%A1%88-Part1/"/>
    <url>/2022/03/22/iOS%E7%BB%84%E4%BB%B6%E5%8C%96%E6%96%B9%E6%A1%88-Part1/</url>
    
    <content type="html"><![CDATA[<h3 id="组件化"><a href="#组件化" class="headerlink" title="组件化"></a>组件化</h3><p>组件化其实就是<code>将模块单独抽离、分层</code>，并指定模块间的<code>通讯</code>方式，从而实现<code>解耦</code>的一种方式，主要运用与团队开发</p><h4 id="为什么需要组件化？"><a href="#为什么需要组件化？" class="headerlink" title="为什么需要组件化？"></a>为什么需要组件化？</h4><p>主要有以下四个原因</p><ul><li>1、模块间解耦</li><li>2、模块重用</li><li>3、提高团队协作开发效率</li><li>4、单元测试</li></ul><p>当项目因为各种需求，越来越来时，如果此时的各个模块之间是互相调用，即<code>你中有我，我中有你</code>这种情况时，会造成<code>高耦合</code>的情况。一旦我们需要对某一块代码进行<code>修改</code>时，就会<code>牵一发而动全身</code>，导致项目难以维护</p><p>其问题主要体现在以下几个方面：</p><ul><li>1、修改某个功能时，同时需要修改其他模块的代码，因为在其他模块中有该模块的引用。可以理解为<code>高耦合导致代码修改困难</code></li><li>2、模块对外接口不明确，甚至暴露了本不该暴露的私有接口，修改时费时费力。可以理解为<code>接口不固定导致的接口混乱</code></li><li>3、高耦合代码产生的后果就是会影响团队其他成员的开发，产生<code>代码冲突</code></li><li>4、当模块需要重用到其他项目时，<code>难以单独抽离</code></li><li>5、模块间耦合的忌口导致接口和依赖关系混乱，<code>无法进行单元测试</code></li></ul><p>所以为了解决以上问题，我们需要采用更规范的方式来<code>降低模块</code>间的<code>耦合度</code>，这就是<code>组件化</code>，也可以理解为<code>模块化</code></p><p>但是，这里还需要说明一点，因为组件化也是需要一定成本的，需要花费时间设计接口、分离代码等，所以并不是所有的项目都需要组件化。如果你的项目有以下这些特征就<code>不需要组件化</code>：</p><ul><li>1、项目较小，模块间交互简单，耦合少</li><li>2、项目没有被多个外部模块引用，只是一个单独的小模块</li><li>3、模块不需要重用，代码也很少被修改</li><li>4、团队规模很小</li><li>5、不需要编写单元测试</li></ul><p>如果你的有以下特性，说明你就必须要<code>考虑进行组件化</code>了：</p><ul><li>1、模块逻辑复杂，多个模块之间频繁互相引用</li><li>2、项目规模逐渐变大，修改代码变的越来越困难（这里可以理解为：修改一处代码，需要同时修改其他多个地方）</li><li>3、团队人数变多，提交的代码经常和其他成员冲突</li><li>4、项目编译耗时较大</li><li>5、模块的单元测试经常由于其他模块的修改而失败</li></ul><h3 id="组件化方案"><a href="#组件化方案" class="headerlink" title="组件化方案"></a>组件化方案</h3><h4 id="组件化方案的8条指标"><a href="#组件化方案的8条指标" class="headerlink" title="组件化方案的8条指标"></a>组件化方案的8条指标</h4><p>一个项目经过组件化后如何来评判，主要有以下几个<code>标准</code>：</p><ul><li>1、模块之间没有耦合，模块内部的修改不会应该其他模块</li><li>2、模块可以单独编译</li><li>3、模块间数据传递明确</li><li>4、模块可以随时被另一个提供了相同功能的模块替换</li><li>5、模块对外接口清晰且易维护</li><li>6、当模块接口改变时，此模块的外部代码能够被高效重构</li><li>7、尽量用最少的修改和代码，让现有的项目实现模块化</li><li>8、支持OC和Swift，以及混编</li></ul><p>前4条主要用于<code>衡量一个模块是否真正解耦</code>，后4条主要用于衡量在项目中<code>实践中的易用程度</code></p><h4 id="组件化原则"><a href="#组件化原则" class="headerlink" title="组件化原则"></a>组件化原则</h4><p>一个项目主要分为3层：<code>业务层</code>、<code>通用层</code>以及<code>基础层</code>，在进行组件化时，有以下几点说明</p><img src="/2022/03/22/iOS%E7%BB%84%E4%BB%B6%E5%8C%96%E6%96%B9%E6%A1%88-Part1/d45435499bcd48d69596779b778e2b39.png" class="" title="image.png"><ul><li>只能上层对依赖，不能下层对上层的依赖，因为下层是对上层的抽象</li><li>项目公共代码资源下沉</li><li>横向的依赖尽量少有，最好下层至通用模块，或者基础模块</li></ul><p>**<br>**</p><h4 id="组件化方案-1"><a href="#组件化方案-1" class="headerlink" title="组件化方案"></a>组件化方案</h4><p>常用的组件化方案主要有两种：</p><ul><li><code>本地组件化</code>：主要是通过在<code>工程中创建library</code>，利用<code>cocoapods</code>的<code>workspec</code>进行本地管理，不需要将项目上传git，而是直接在本项目中以framework的方法进行调用</li><li><code>cocoapods组件化</code>：主要是利用cocoapods来进行模块的远程管理，需要将项目上传git（需要注意：这里的组件化模块分为<code>公有库</code>和<code>私有库</code>，对公司而言，一般是私有库）</li></ul><h3 id="本地组件化"><a href="#本地组件化" class="headerlink" title="本地组件化"></a>本地组件化</h3><h4 id="1、创建主工程"><a href="#1、创建主工程" class="headerlink" title="1、创建主工程"></a>1、创建主工程</h4><ul><li>首先创建一个工程</li></ul><img src="/2022/03/22/iOS%E7%BB%84%E4%BB%B6%E5%8C%96%E6%96%B9%E6%A1%88-Part1/d411eb30e54b48faa116bde3c19dd158.png" class="" title="image.png"><ul><li>集成cocopods，进行本地管理：</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> <span class="hljs-built_in">cd</span> 项目目录<br><span class="hljs-variable">$</span> pod init<br><span class="hljs-variable">$</span> pod init<br></code></pre></td></tr></table></figure><ul><li>编辑podfile，并执行<code>pod install</code></li></ul><h4 id="2、创建组件"><a href="#2、创建组件" class="headerlink" title="2、创建组件"></a>2、创建组件</h4><p>假设有以下几个模块：</p><ul><li><code>主工程</code>：承载主要的表层业务代码</li><li><code>Core</code>：独立存在，应用加密、接口请求等敏感代码</li><li><code>Base</code>：基类封装，拓展，基本的数据处理</li><li><code>Service</code>：服务层，封装业务工具类，例如网络层服务、持久化服务等</li><li><code>Pods</code>：三方依赖</li></ul><p>其中，各个模块间的关系如下所示</p><img src="/2022/03/22/iOS%E7%BB%84%E4%BB%B6%E5%8C%96%E6%96%B9%E6%A1%88-Part1/abbca02925474c55ac37f24181eb711b.png" class="" title="image.png"><p>下面，我们来进行模块的创建，以<code>Core</code>模块为例：</p><ul><li>选择<code>new -&gt; project -&gt; iOS -&gt; Framework</code>，新建一个模块<img src="/2022/03/22/iOS%E7%BB%84%E4%BB%B6%E5%8C%96%E6%96%B9%E6%A1%88-Part1/6e8b46b343d14fc4966346a3eb3734b1.png" class="" title="image.png">选择正确的`Group` 和 `WorkSpace`（这里需要注意一点：创建的`library`最好放在`主工程根目录`下，否则后续`podfile`执行`pod install`时会报错）</li></ul><img src="/2022/03/22/iOS%E7%BB%84%E4%BB%B6%E5%8C%96%E6%96%B9%E6%A1%88-Part1/57123daa0cf14b7d9c4878ed22645786.png" class="" title="image.png"><p>将创建的<code>library</code>的<code>Build Settings -&gt; Mach-O Type</code>修改为静态库 <code>Static Library</code></p><img src="/2022/03/22/iOS%E7%BB%84%E4%BB%B6%E5%8C%96%E6%96%B9%E6%A1%88-Part1/cd442535e97c43e880a4a8e743df2f92.png" class="" title="image.png"><h4 id="3、主工程调用library"><a href="#3、主工程调用library" class="headerlink" title="3、主工程调用library"></a>3、主工程调用library</h4><ul><li>在CJLCore中新建一个文件，并添加如下代码</li></ul><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-comment">//类需要声明为public</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-symbol">CJLCoreSetting: <span class="hljs-symbol">NSObject</span></span> &#123;<br>    <span class="hljs-comment">//属性需要声明为public</span><br>    <span class="hljs-keyword">public</span> static let SCRET_KEY = <span class="hljs-string">&quot;SCRET_KEY&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>在<code>Build Phases -&gt; Headers -&gt; Public</code>中将新建的文件添加为public，这样主工程才能访问该文件</p><img src="/2022/03/22/iOS%E7%BB%84%E4%BB%B6%E5%8C%96%E6%96%B9%E6%A1%88-Part1/dc187aeebe7e457bbd5440e924d005b4.png" class="" title="image.png"><p>在主工程中，选择<code>target -&gt; Linked Frameworks Library</code>中添加<code>CJLCore</code>，只需要build主工程，library能够自动联编</p><img src="/2022/03/22/iOS%E7%BB%84%E4%BB%B6%E5%8C%96%E6%96%B9%E6%A1%88-Part1/36ce602f6cd04273831cd6ddafae8874.png" class="" title="image.png"><h4 id="4、使用"><a href="#4、使用" class="headerlink" title="4、使用"></a>4、使用</h4><p>首先<code>import CJLCore</code>，然后使用</p><img src="/2022/03/22/iOS%E7%BB%84%E4%BB%B6%E5%8C%96%E6%96%B9%E6%A1%88-Part1/ddb88b2f9adb401abe5f6e259cf8bf0d.png" class="" title="image.png"><p>这里需要注意的是，子library之间的互相调用，与主工程调用library类似，主需要添加依赖、暴露header即可</p><h4 id="5、使用cocoapods管理三方依赖"><a href="#5、使用cocoapods管理三方依赖" class="headerlink" title="5、使用cocoapods管理三方依赖"></a>5、使用cocoapods管理三方依赖</h4><p>假设我们需要在<code>CJLCore</code>中封装网络层代码，需要用到三方库<code>Alamofire</code>，在podfile中</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs clean">platform :ios, <span class="hljs-string">&#x27;9.0&#x27;</span><br>inhibit_all_warnings!<br>use_frameworks!<br><br>#配置workspace路径<br>workspace <span class="hljs-string">&#x27;Modularization.xcworkspace&#x27;</span><br><br>################# 三方依赖<br># 公有<br>def workspace_pods<br>  pod <span class="hljs-string">&#x27;SwiftyJSON&#x27;</span><br>end<br><br># 主工程<br>def project_only_pods<br>  pod <span class="hljs-string">&#x27;SnapKit&#x27;</span><br>end<br><br>#网络<br>def network_layer_pods<br>  pod <span class="hljs-string">&#x27;Alamofire&#x27;</span><br>end<br><br>################# 模块<br>target <span class="hljs-string">&#x27;CJLCore&#x27;</span> do<br>  #配置libray路径<br>  project <span class="hljs-string">&#x27;CJLCore/CJLCore.xcodeproj&#x27;</span><br>  <br>  workspace_pods<br>  network_layer_pods<br><br>end<br><br>################# 主工程<br>target <span class="hljs-string">&#x27;Modularization&#x27;</span> do<br>  <br>  workspace_pods<br>  project_only_pods<br>  network_layer_pods<br><br>  target <span class="hljs-string">&#x27;ModularizationTests&#x27;</span> do<br>    inherit! :search_paths<br><br>  end<br><br>  target <span class="hljs-string">&#x27;ModularizationUITests&#x27;</span> do<br><br>  end<br><br>end<br></code></pre></td></tr></table></figure><p>到此，一个本地组件化的模块就配置完成了</p><h3 id="cocoapods组件化"><a href="#cocoapods组件化" class="headerlink" title="cocoapods组件化"></a>cocoapods组件化</h3><p>除了本地组件化，还可以使用<code>cocoapods</code>，其原理如下图所示</p><img src="/2022/03/22/iOS%E7%BB%84%E4%BB%B6%E5%8C%96%E6%96%B9%E6%A1%88-Part1/a9afd9886f6b49919a262e3f893e6fc8.png" class="" title="image.png">这里还是以本地组件化中的结构为例<h4 id="1、创建私有仓库"><a href="#1、创建私有仓库" class="headerlink" title="1、创建私有仓库"></a>1、创建私有仓库</h4><ul><li>在github上创建一个MySpecs仓库<br>具体步骤：登录github–&gt;点击右上角“+”–&gt;选择 new repository–&gt;输入Repository name为MySpecs，选择仓库类型为 private，点击Create repository。</li><li>将私有仓库添加至本地<code>~/.cocoapods/repos</code>目录</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">pod repo add mySpecs https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/xxx/</span>MySpecs.git<br></code></pre></td></tr></table></figure><h4 id="2、创建pods-工程，即组件化工程"><a href="#2、创建pods-工程，即组件化工程" class="headerlink" title="2、创建pods 工程，即组件化工程"></a>2、创建pods 工程，即组件化工程</h4><ul><li>使用终端创建<code>CJLServices</code>模块</li></ul><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal">pod <span class="hljs-class"><span class="hljs-keyword">lib</span> <span class="hljs-title">create</span> <span class="hljs-title">CJLServices</span></span><br></code></pre></td></tr></table></figure><p>根据提示依次输入：ios、swift、yes、none、no、CJL</p><img src="/2022/03/22/iOS%E7%BB%84%E4%BB%B6%E5%8C%96%E6%96%B9%E6%A1%88-Part1/5565cf790f424ae58611554ee82710a0.png" class="" title="image.png"><p>进入模块的目录，将文件拷贝至<code>CJLServices -&gt; Classes</code>中</p><img src="/2022/03/22/iOS%E7%BB%84%E4%BB%B6%E5%8C%96%E6%96%B9%E6%A1%88-Part1/444cac4f432a471d87197d9ff4be77a5.png" class="" title="image.png"><p>执行<code>pod install</code>,会将Classes更新至pods中</p><img src="/2022/03/22/iOS%E7%BB%84%E4%BB%B6%E5%8C%96%E6%96%B9%E6%A1%88-Part1/c66728c4363547cf87afd5817637a90b.png" class="" title="image.png"><p>执行结果</p><h4 id="3、配置pods工程"><a href="#3、配置pods工程" class="headerlink" title="3、配置pods工程"></a>3、配置pods工程</h4><p>修改模块的配置文件，即<code>CJLServices.podspec</code></p><ul><li>如果需要依赖三方库，需要配置<code>s.dependency</code></li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">s<span class="hljs-selector-class">.dependency</span> <span class="hljs-string">&#x27;AFNetworking&#x27;</span><br></code></pre></td></tr></table></figure><ul><li>如果模块间需要相互引用，同样需要配置<code>s.dependency</code>，以<code>CJLBase</code>为例，需要引用<code>CJLService</code></li></ul><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">//********1、修改 podspec 文件</span><br>s.dependency <span class="hljs-string">&#x27;CJLServices&#x27;</span><br><br><span class="hljs-comment">//********2、修改 podfile 文件</span><br>pod <span class="hljs-string">&#x27;CJLServices&#x27;</span>, :<span class="hljs-function"><span class="hljs-params">path</span> =&gt;</span> <span class="hljs-string">&#x27;../../CJLServices&#x27;</span><br></code></pre></td></tr></table></figure><ul><li>如果需要加载资源，例如图片、json、bundle文件等</li></ul><ul><li><ul><li>1、在模块的<code>Assets</code>文件夹 中添加资源文件</li><li>2、在<code>specs</code>里配置资源路径（必须配置！！否则无法读取资源）</li><li>3、访问时需要指定资源文件路径</li></ul></li></ul><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">//*****1、修改 podspec 文件</span><br>s.resource_bundles = &#123;<br>     &#x27;CJLBase&#x27; =&gt; <span class="hljs-literal">[&#x27;CJLB<span class="hljs-identifier">ase</span><span class="hljs-operator">/</span>A<span class="hljs-identifier">ssets</span><span class="hljs-operator">/</span><span class="hljs-operator">*</span>&#x27;]</span><br>   &#125;<br>   <br><span class="hljs-comment">//*****2、使用</span><br><span class="hljs-keyword">let</span> bundlePath: String = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Bundle</span>.</span></span>init(<span class="hljs-keyword">for</span>: dynamicClass.self).resourcePath! + <span class="hljs-string">&quot;/CJLBase.bundle&quot;</span><br><span class="hljs-keyword">let</span> bundle = <span class="hljs-constructor">Bundle(<span class="hljs-params">path</span>: <span class="hljs-params">bundlePath</span>)</span><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> path = bundle?.path(forResource: <span class="hljs-string">&quot;mouse&quot;</span>, ofType: <span class="hljs-string">&quot;jpg&quot;</span>)&#123;<br>    self.imgView.image = <span class="hljs-constructor">UIImage(<span class="hljs-params">contentsOfFile</span>: <span class="hljs-params">path</span>)</span><br>&#125;           <br></code></pre></td></tr></table></figure><p>同理，模块中的xib，json文件的获取方式也是一样的</p><h4 id="4、提交至git"><a href="#4、提交至git" class="headerlink" title="4、提交至git"></a>4、提交至git</h4><p>这里提交至git的模块是pods工程才可以，以<code>CJLBase</code>为例</p><ul><li>需要在github上创建一个私有repository，命名为<code>CJLBase</code></li><li>执行以下终端命令</li></ul><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-meta"><span class="hljs-meta-keyword">$git</span> init</span><br><span class="hljs-meta"><span class="hljs-meta-keyword">$git</span> add .</span><br><span class="hljs-symbol">$</span> git commit -am <span class="hljs-string">&quot;第一次提交&quot;</span> <br><span class="hljs-comment">//即第一个步骤中创建的仓库地址</span><br><span class="hljs-symbol">$</span> git remote add origin https:<span class="hljs-comment">//github.com/xxx/CJLBase.git</span><br> <br><span class="hljs-symbol">$</span> git push origin master <br><span class="hljs-comment">//一定要有标签，不然会有下面的警告</span><br><span class="hljs-comment">//podspec文件中获取Git版本控制的项目需要tag号，</span><br><span class="hljs-symbol">$</span> git tag -m <span class="hljs-string">&quot;first release&quot;</span> <span class="hljs-string">&quot;0.1.0&quot;</span> <br><span class="hljs-symbol">$</span> git push --tags <br></code></pre></td></tr></table></figure><h4 id="5、验证podspec文件"><a href="#5、验证podspec文件" class="headerlink" title="5、验证podspec文件"></a>5、验证podspec文件</h4><p>执行终端命令 <code>pod spec lint</code></p><blockquote><p>注意：<code>pod spec</code>相对于<code>pod lib</code>会更为精确，</p><ul><li><code>pod lib</code>相当于只验证一个本地仓库，</li><li><code>pod spec</code>会同时验证本地仓库和远程仓库。</li></ul></blockquote><p>**<br>**</p><h4 id="6、提交到私有仓库"><a href="#6、提交到私有仓库" class="headerlink" title="6、提交到私有仓库"></a>6、提交到私有仓库</h4><p>执行以下命令</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown">pod repo push [<span class="hljs-string">本地Spec Repo名称</span>][<span class="hljs-symbol">podspec文件路径</span>]<br> <br>//<span class="hljs-strong">****</span><span class="hljs-strong">**举例</span><br><span class="hljs-strong">$ pod repo push MySpecs CJLBase.podspec</span><br></code></pre></td></tr></table></figure><p>提交成功后，可在本地仓库中看到提交路径<code>MySpecs -&gt; CJLBase</code></p><h4 id="7、使用"><a href="#7、使用" class="headerlink" title="7、使用"></a>7、使用</h4><ul><li>新建一个工程，在项目的podfile里添加</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#私有spec仓库的地址，而不是某个pod仓库的地址</span><br><span class="hljs-built_in">source</span> <span class="hljs-string">&#x27;https://github.com/xxx/MySpecs&#x27;</span><br>pod <span class="hljs-string">&#x27;CJLBase&#x27;</span><br></code></pre></td></tr></table></figure><ul><li>执行<code>pod install</code>即可</li></ul>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
      <category>iOS架构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>iOS</tag>
      
      <tag>架构</tag>
      
      <tag>组件化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Block深入解析-底层原理</title>
    <link href="/2022/01/08/Block%E6%B7%B1%E5%85%A5%E8%A7%A3%E6%9E%90-Part1/"/>
    <url>/2022/01/08/Block%E6%B7%B1%E5%85%A5%E8%A7%A3%E6%9E%90-Part1/</url>
    
    <content type="html"><![CDATA[<h1 id="1-Block本质"><a href="#1-Block本质" class="headerlink" title="1. Block本质"></a>1. <code>Block</code>本质</h1><h2 id="1-1-定义一个Block"><a href="#1-1-定义一个Block" class="headerlink" title="1.1 定义一个Block"></a>1.1 定义一个Block</h2><ul><li>定义一个block.c文件，写入以下代码:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs objective-c">#include &lt;stdio.h&gt;<br><br>int main() &#123;<br>    void(^block)(void) &#x3D; ^&#123;<br>        printf(&quot;hello&quot;);<br>    &#125;;<br>    block();<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>通过xcrun -sdk iphonesimulator clang -arch x86_64 -rewrite-objc block.c命令，将block.c编译成block.cpp，其中block在底层被编译成以下的方式:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs objective-c">static void __main_block_func_0(struct __main_block_impl_0 *__cself) &#123;<br><br>        printf(&quot;hello&quot;);<br>    &#125;<br><br>static struct __main_block_desc_0 &#123;<br>  size_t reserved;<br>  size_t Block_size;<br>&#125; __main_block_desc_0_DATA &#x3D; &#123; 0, sizeof(struct __main_block_impl_0)&#125;;<br>int main() &#123;<br>  &#x2F;&#x2F; 构造函数<br>    void(*block)(void) &#x3D; ((void (*)())&amp;__main_block_impl_0((void *)__main_block_func_0, &amp;__main_block_desc_0_DATA));<br>  &#x2F;&#x2F; block执行<br>    ((void (*)(__block_impl *))((__block_impl *)block)-&gt;FuncPtr)((__block_impl *)block);<br>    return 0;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>可以看出，block等于<code>__main_block_impl_0</code>，是一个函数，<code>__main_block_impl_0</code>也是一个结构体，同时可以说明block是一个<code>__main_block_impl_0</code>结构体类型的对象, 如下:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs objective-c">struct __main_block_impl_0 &#123;<br>  struct __block_impl impl;<br>  struct __main_block_desc_0* Desc;<br>  __main_block_impl_0(void *fp, struct __main_block_desc_0 *desc, int flags&#x3D;0) &#123;<br>    impl.isa &#x3D; &amp;_NSConcreteStackBlock;<br>    impl.Flags &#x3D; flags;<br>    impl.FuncPtr &#x3D; fp;<br>    Desc &#x3D; desc;<br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><ul><li><p>其中的<code>__block_impl</code>结构体如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs objective-c">struct __block_impl &#123;<br>  void *isa;<br>  int Flags;<br>  int Reserved;<br>  void *FuncPtr;<br>&#125;;<br></code></pre></td></tr></table></figure></li><li><p>block 本质上也是一个OC对象，内部有一个<code>isa</code>指针。block是封装了函数调用以及函数调用环境的OC对象。</p></li><li><p><code>block</code>通过<code>clang</code>编译后的源码间的关系如下，以<code>__block</code>修饰的变量为例:</p></li></ul><img src="/2022/01/08/Block%E6%B7%B1%E5%85%A5%E8%A7%A3%E6%9E%90-Part1/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0ZvcmV2ZXJfd2o=,size_16,color_FFFFFF,t_70.png" class="" title="在这里插入图片描述"><h2 id="1-2-block为什么需要调用？"><a href="#1-2-block为什么需要调用？" class="headerlink" title="1.2 block为什么需要调用？"></a>1.2 block为什么需要调用？</h2><ul><li>在底层<code>block</code>的类型<code>__main_block_impl_0</code>结构体，通过同名构造函数创建，第一个传入的<code>block</code>的内部实现代码块，即<code>__main_block_func_0</code>,用<code>fp</code>表示，然后赋值给<code>imp</code>的<code>FuncPtr</code>属性，在<code>main</code>中进行调用，这也是<code>block</code>为什么需要调用的原因。</li><li>如果不调用，<code>block</code>内部实现的代码块将无法执行，即：<ol><li>函数声明： 即<code>block</code>内部实现声明成了一个函数<code>__main_blcok_func_0</code>;</li><li>执行具体函数的实现：通过调用<code>block</code>的<code>FuncPtr</code>指针，调用<code>block</code>执行。</li></ol></li></ul><h2 id="1-3-block是如何获取外界变量的？"><a href="#1-3-block是如何获取外界变量的？" class="headerlink" title="1.3 block是如何获取外界变量的？"></a>1.3 block是如何获取外界变量的？</h2><ul><li><p>定义一个变量，并在block中调用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs objective-c">int main() &#123;<br>    int a &#x3D; 6;<br>    void(^block)(void) &#x3D; ^&#123;<br>        printf(&quot;hello: %d&quot;, a);<br>    &#125;;<br>    block();<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>底层编译输出如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs objective-c">struct __main_block_impl_0 &#123;<br>  struct __block_impl impl;<br>  struct __main_block_desc_0* Desc;<br>  int a; &#x2F;&#x2F; 编译时就自动生产了相应的变量(结构体的成员变量)<br>  __main_block_impl_0(void *fp, struct __main_block_desc_0 *desc, int _a, int flags&#x3D;0) : a(_a) &#123;<br>    impl.isa &#x3D; &amp;_NSConcreteStackBlock; &#x2F;&#x2F; block的isa，默认是stackBlock;<br>    impl.Flags &#x3D; flags;<br>    impl.FuncPtr &#x3D; fp;<br>    Desc &#x3D; desc;<br>  &#125;<br>&#125;;<br>static void __main_block_func_0(struct __main_block_impl_0 *__cself) &#123;<br>  int a &#x3D; __cself-&gt;a; &#x2F;&#x2F; bound by copy 值拷贝，此时的a与传入的__cself的a不为同一个，值相同，指针指向的内存地址不同<br><br>        printf(&quot;hello: %d&quot;, a);<br>    &#125;<br><br>static struct __main_block_desc_0 &#123;<br>  size_t reserved;<br>  size_t Block_size;<br>&#125; __main_block_desc_0_DATA &#x3D; &#123; 0, sizeof(struct __main_block_impl_0)&#125;;<br>int main() &#123;<br>    int a &#x3D; 6;<br>    void(*block)(void) &#x3D; ((void (*)())&amp;__main_block_impl_0((void *)__main_block_func_0, &amp;__main_block_desc_0_DATA, a));<br>  &#x2F;&#x2F; block调用<br>    ((void (*)(__block_impl *))((__block_impl *)block)-&gt;FuncPtr)((__block_impl *)block);<br>    return 0;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><code>__main_block_func_0</code>中的a是值拷贝，如果此时在blcok内部实现a++操作，会造成编译器的代码歧义，即此时的a是只读的。<br>即：block捕获外部变量时，在内部会自动生成同一个属性来保存。</p></li></ul><h2 id="1-4-block的原理"><a href="#1-4-block的原理" class="headerlink" title="1.4 __block的原理"></a>1.4 <code>__block</code>的原理</h2><ul><li><p>对a加一个<code>__block</code>修饰，然后再<code>block</code>中进行a++操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs objective-c">int main() &#123;<br>    __block int a &#x3D; 6;<br>    void(^block)(void) &#x3D; ^&#123;<br>        a++;<br>        printf(&quot;hello: %d&quot;, a);<br>    &#125;;<br>    block();<br>    return 0;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>同样编译成c++代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs objective-c">struct __Block_byref_a_0 &#123; &#x2F;&#x2F; __block修饰的外界变量的结构体<br>  void *__isa;<br>__Block_byref_a_0 *__forwarding;<br> int __flags;<br> int __size;<br> int a;<br>&#125;;<br><br>struct __main_block_impl_0 &#123; &#x2F;&#x2F; __block的结构体类型<br>  struct __block_impl impl;<br>  struct __main_block_desc_0* Desc;<br>  __Block_byref_a_0 *a; &#x2F;&#x2F; by ref<br>  __main_block_impl_0(void *fp, struct __main_block_desc_0 *desc, __Block_byref_a_0 *_a, int flags&#x3D;0) : a(_a-&gt;__forwarding) &#123;<br>    impl.isa &#x3D; &amp;_NSConcreteStackBlock;<br>    impl.Flags &#x3D; flags;<br>    impl.FuncPtr &#x3D; fp;<br>    Desc &#x3D; desc;<br>  &#125;<br>&#125;;<br>static void __main_block_func_0(struct __main_block_impl_0 *__cself) &#123; &#x2F;&#x2F; block内部实现<br>  &#x2F;&#x2F; 指针拷贝，此时的对象a与__cself对象的a指向同一片地址空间<br>  __Block_byref_a_0 *a &#x3D; __cself-&gt;a; &#x2F;&#x2F; bound by ref<br>                &#x2F;&#x2F; 等同于 外界的a++<br>        (a-&gt;__forwarding-&gt;a)++;<br>        printf(&quot;hello: %d&quot;, (a-&gt;__forwarding-&gt;a));<br>    &#125;<br>static void __main_block_copy_0(struct __main_block_impl_0*dst, struct __main_block_impl_0*src) &#123;_Block_object_assign((void*)&amp;dst-&gt;a, (void*)src-&gt;a, 8&#x2F;*BLOCK_FIELD_IS_BYREF*&#x2F;);&#125;<br><br>static void __main_block_dispose_0(struct __main_block_impl_0*src) &#123;_Block_object_dispose((void*)src-&gt;a, 8&#x2F;*BLOCK_FIELD_IS_BYREF*&#x2F;);&#125;<br><br>int main() &#123;<br>  &#x2F;&#x2F; __Block_byref_a_0 是结构体，a 等于 结构体的赋值， 即将外界变量 a 封装成结构体对象<br>  &#x2F;&#x2F; &amp;a 是外界变量 a 的地址<br>    __attribute__((__blocks__(byref))) __Block_byref_a_0 a &#x3D; &#123;(void*)0,(__Block_byref_a_0 *)&amp;a, 0, sizeof(__Block_byref_a_0), 6&#125;;<br>  &#x2F;&#x2F; __main_block_impl_0 中的第三个参数&amp;a, 是封装的对象a的地址<br>    void(*block)(void) &#x3D; ((void (*)())&amp;__main_block_impl_0((void *)__main_block_func_0, &amp;__main_block_desc_0_DATA, (__Block_byref_a_0 *)&amp;a, 570425344));<br>    ((void (*)(__block_impl *))((__block_impl *)block)-&gt;FuncPtr)((__block_impl *)block);<br>    return 0;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>分析结果：</p><ol><li><code>__main_block_impl_0</code>中，将对象a的地址&amp;a给构造函数；</li><li>在<code>__main_block_func_0</code>内部对a的处理时指针拷贝，此时创建的对象a与传入对象的a指向同一内存空间。</li></ol></li><li><p>总结：</p><ol><li>用<code>__block</code>修饰的外界变量会生成<code>__Block_byref_a_0</code>的结构体；</li><li>结构体用来保存原始变量的指针和值；</li><li>将变量生成的结构体对象的指针地址传递给<code>block</code>，然后再<code>block</code>内部就可以对外界变量进行操作。</li></ol></li><li><p>Tips：深拷贝与浅拷贝</p><ol><li>值拷贝 - 深拷贝，只是拷贝数值，且拷贝的值不可更改，指向不同的内存空间；</li><li>指针拷贝 - 浅拷贝，生成的对象指向同一片内存空间，案例中经过<code>__block</code>修饰的变量a就是指针拷贝;</li></ol></li></ul><h1 id="2-Block底层源码分析"><a href="#2-Block底层源码分析" class="headerlink" title="2. Block底层源码分析"></a>2. <code>Block</code>底层源码分析</h1>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
      <category>iOS进阶</category>
      
    </categories>
    
    
    <tags>
      
      <tag>iOS</tag>
      
      <tag>Block</tag>
      
      <tag>底层原理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RunLoop的应用</title>
    <link href="/2021/12/02/RunLoop-Part2/"/>
    <url>/2021/12/02/RunLoop-Part2/</url>
    
    <content type="html"><![CDATA[<h1 id="一、RunLoop与线程"><a href="#一、RunLoop与线程" class="headerlink" title="一、RunLoop与线程"></a>一、RunLoop与线程</h1><h2 id="1-RunLoop与线程的关系"><a href="#1-RunLoop与线程的关系" class="headerlink" title="1. RunLoop与线程的关系"></a>1. RunLoop与线程的关系</h2><p>苹果官方文档中，<code>RunLoop</code>的相关介绍写在线程编程指南中，可见<code>RunLoop</code>和线程的关系不一般。<a href="https://link.juejin.cn/?target=https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/RunLoopManagement/RunLoopManagement.html%23//apple_ref/doc/uid/10000057i-CH16-SW23">Threading Programming Guide（苹果官方文档）</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs objective-c">&#x2F;&#x2F;&#x2F; 全局的Dictionary，key 是 pthread_t， value 是 CFRunLoopRef<br>static CFMutableDictionaryRef loopsDic;<br>&#x2F;&#x2F;&#x2F; 访问 loopsDic 时的锁<br>static CFSpinLock_t loopsLock;<br> <br>&#x2F;&#x2F;&#x2F; 获取一个 pthread 对应的 RunLoop。<br>CFRunLoopRef _CFRunLoopGet(pthread_t thread) &#123;<br>    OSSpinLockLock(&amp;loopsLock);<br>    <br>    if (!loopsDic) &#123;<br>        &#x2F;&#x2F; 第一次进入时，初始化全局Dic，并先为主线程创建一个 RunLoop。<br>        loopsDic &#x3D; CFDictionaryCreateMutable();<br>        CFRunLoopRef mainLoop &#x3D; _CFRunLoopCreate();<br>        CFDictionarySetValue(loopsDic, pthread_main_thread_np(), mainLoop);<br>    &#125;<br>    <br>    &#x2F;&#x2F;&#x2F; 直接从 Dictionary 里获取。<br>    CFRunLoopRef loop &#x3D; CFDictionaryGetValue(loopsDic, thread));<br>    <br>    if (!loop) &#123;<br>        &#x2F;&#x2F;&#x2F; 取不到时，创建一个<br>        loop &#x3D; _CFRunLoopCreate();<br>        CFDictionarySetValue(loopsDic, thread, loop);<br>        &#x2F;&#x2F;&#x2F; 注册一个回调，当线程销毁时，顺便也销毁其对应的 RunLoop。<br>        _CFSetTSD(..., thread, loop, __CFFinalizeRunLoop);<br>    &#125;<br>    <br>    OSSpinLockUnLock(&amp;loopsLock);<br>    return loop;<br>&#125;<br> <br>CFRunLoopRef CFRunLoopGetMain() &#123;<br>    return _CFRunLoopGet(pthread_main_thread_np());<br>&#125;<br> <br>CFRunLoopRef CFRunLoopGetCurrent() &#123;<br>    return _CFRunLoopGet(pthread_self());<br>&#125;<br></code></pre></td></tr></table></figure><a id="more"></a><p>从上面的代码可以得出：</p><ul><li><code>RunLoop</code>对象和线程是一一对应的关系</li><li><code>RunLoop</code>保存在一个全局的<code>Dictionary</code>里，线程作为<code>key</code>，<code>RunLoop</code>作为<code>Value</code>;</li><li>如果没有<code>RunLoop</code>，线程执行完任务就会退出；如果没有<code>RunLoop</code>，主线程执行完<code>Main()</code>函数就会退出，程序就不能处于运行状态；</li><li><code>RunLoop</code>创建时机：线程刚创建并没有<code>RunLoop</code>对象，如果你不主动获取，那它一直都不会有。<code>RunLoop</code>会在第一次获取它时创建；</li><li><code>RunLoop</code>销毁机制：<code>RunLoop</code>会在线程结束时销毁；</li><li>主线程的<code>RunLoop</code>已经自动获取（创建），子线程默认没有开启<code>RunLoop</code>；</li><li>主线程的<code>RunLoop</code>对象是在<code>UIApplicationMain</code>中通过<code>[NSRunLoop currentRunLoop]</code>获取，一旦发现它不存在，就会创建<code>RunLoop</code>对象。</li></ul><h2 id="2-开启子线程的RunLoop的过程"><a href="#2-开启子线程的RunLoop的过程" class="headerlink" title="2. 开启子线程的RunLoop的过程"></a>2. 开启子线程的RunLoop的过程</h2><h3 id="获取RunLoop对象"><a href="#获取RunLoop对象" class="headerlink" title="获取RunLoop对象"></a>获取RunLoop对象</h3><p>可以通过以下代码来获取<code>RunLoop</code>对象：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs objective-c">&#x2F;&#x2F; Foundation<br>[NSRunLoop mainRunLoop];     &#x2F;&#x2F; 获取主线程的 RunLoop 对象<br>[NSRunLoop currentRunLoop];  &#x2F;&#x2F; 获取当前线程的 RunLoop 对象<br>&#x2F;&#x2F; Core Foundation<br>CFRunLoopGetMain();     &#x2F;&#x2F; 获取主线程的 RunLoop 对象<br>CFRunLoopGetCurrent();  &#x2F;&#x2F; 获取当前线程的 RunLoop 对象<br><br></code></pre></td></tr></table></figure><h3 id="启动子线程的RunLoop"><a href="#启动子线程的RunLoop" class="headerlink" title="启动子线程的RunLoop"></a>启动子线程的RunLoop</h3><p>可以通过以下代码来启动子线程的<code>RunLoop</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs objective-c">&#x2F;&#x2F; Foundation<br>[[NSRunLoop currentRunLoop] run];<br>[[NSRunLoop currentRunLoop] runMode:NSDefaultRunLoopMode beforeDate:[NSDate distantFuture]];<br>&#x2F;&#x2F; Core Foundation<br>CFRunLoopRun();<br>&#x2F;&#x2F; 第3个参数：设置为 true，代表执行完 Source&#x2F;Port 后就会退出当前 loop<br>CFRunLoopRunInMode(kCFRunLoopDefaultMode, 1.0e10, false);  <br><br></code></pre></td></tr></table></figure><h2 id="3-如何实现一个常驻线程"><a href="#3-如何实现一个常驻线程" class="headerlink" title="3. 如何实现一个常驻线程"></a>3. 如何实现一个常驻线程</h2><ul><li>好处：经常用到子线程的时候，不用一直创建销毁，提高性能；</li><li>条件：该任务需是串行，而非并发；</li><li>步骤：<ol><li>获取/创建当前线程的RunLoop；</li><li>向该<code>RunLoop</code>中添加一个<code>Source/port</code>等来维持<code>RunLoop</code>的事件循环（如果Mode里没有任何<code>Source0/Source1/Timer/Observer，RunLoop</code>会立马退出）；</li><li>启动该RunLoop</li></ol></li></ul><p>以下是示例代码：</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs objectivec"><span class="hljs-comment">// ViewController.m</span><br><span class="hljs-meta">#import <span class="hljs-meta-string">&quot;ViewController.h&quot;</span></span><br><span class="hljs-meta">#import <span class="hljs-meta-string">&quot;HTThread.h&quot;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">@interface</span> <span class="hljs-title">ViewController</span> ()</span><br><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">strong</span>) HTThread *thread;<br><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">assign</span>, <span class="hljs-keyword">getter</span>=isStoped) <span class="hljs-built_in">BOOL</span> stopped;<br><span class="hljs-keyword">@end</span><br><br><span class="hljs-class"><span class="hljs-keyword">@implementation</span> <span class="hljs-title">ViewController</span></span><br><br>- (<span class="hljs-keyword">void</span>)viewDidLoad &#123;<br>    [<span class="hljs-keyword">super</span> viewDidLoad];<br>    <br>    __<span class="hljs-keyword">weak</span> <span class="hljs-keyword">typeof</span>(<span class="hljs-keyword">self</span>) weakSelf = <span class="hljs-keyword">self</span>;<br>    <br>    <span class="hljs-keyword">self</span>.stopped = <span class="hljs-literal">NO</span>;<br>    <span class="hljs-keyword">self</span>.thread = [[HTThread alloc] initWithBlock:^&#123;<br>        <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;begin-----%@&quot;</span>, [<span class="hljs-built_in">NSThread</span> currentThread]);<br>        <br>        <span class="hljs-comment">// ① 获取/创建当前线程的 RunLoop </span><br>        <span class="hljs-comment">// ② 向该 RunLoop 中添加一个 Source/Port 等来维持 RunLoop 的事件循环</span><br>        [[<span class="hljs-built_in">NSRunLoop</span> currentRunLoop] addPort:[[<span class="hljs-built_in">NSPort</span> alloc] init] forMode:<span class="hljs-built_in">NSDefaultRunLoopMode</span>];<br>    <br>        <span class="hljs-keyword">while</span> (weakSelf &amp;&amp; !weakSelf.isStoped) &#123;<br>            <span class="hljs-comment">// ③ 启动该 RunLoop</span><br>            <span class="hljs-comment">/* </span><br><span class="hljs-comment">              [[NSRunLoop currentRunLoop] run]</span><br><span class="hljs-comment">              如果调用 RunLoop 的 run 方法，则会开启一个永不销毁的线程</span><br><span class="hljs-comment">              因为 run 方法会通过反复调用 runMode:beforeDate: 方法，以运行在 NSDefaultRunLoopMode 模式下</span><br><span class="hljs-comment">              换句话说，该方法有效地开启了一个无限的循环，处理来自 RunLoop 的输入源 Sources 和 Timers 的数据</span><br><span class="hljs-comment">            */</span> <br>            [[<span class="hljs-built_in">NSRunLoop</span> currentRunLoop] runMode:<span class="hljs-built_in">NSDefaultRunLoopMode</span> beforeDate:[<span class="hljs-built_in">NSDate</span> distantFuture]];<br>        &#125;<br>        <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;end-----%@&quot;</span>, [<span class="hljs-built_in">NSThread</span> currentThread]);    <br>    &#125;];<br>    [<span class="hljs-keyword">self</span>.thread start];<br>&#125;<br><br>- (<span class="hljs-keyword">void</span>)touchesBegan:(<span class="hljs-built_in">NSSet</span>&lt;<span class="hljs-built_in">UITouch</span> *&gt; *)touches withEvent:(<span class="hljs-built_in">UIEvent</span> *)event<br>&#123;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">self</span>.thread) <span class="hljs-keyword">return</span>;<br>    [<span class="hljs-keyword">self</span> performSelector:<span class="hljs-keyword">@selector</span>(test) onThread:<span class="hljs-keyword">self</span>.thread withObject:<span class="hljs-literal">nil</span> waitUntilDone:<span class="hljs-literal">NO</span>];<br>&#125;<br><br><span class="hljs-comment">// 子线程需要执行的任务</span><br>- (<span class="hljs-keyword">void</span>)test<br>&#123;<br>    <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;%s-----%@&quot;</span>, __func__, [<span class="hljs-built_in">NSThread</span> currentThread]);<br>&#125;<br><br><span class="hljs-comment">// 停止子线程的 RunLoop</span><br>- (<span class="hljs-keyword">void</span>)stopThread<br>&#123;<br>    <span class="hljs-comment">// 设置标记为 YES</span><br>    <span class="hljs-keyword">self</span>.stopped = <span class="hljs-literal">YES</span>;   <br>    <span class="hljs-comment">// 停止 RunLoop</span><br>    <span class="hljs-built_in">CFRunLoopStop</span>(<span class="hljs-built_in">CFRunLoopGetCurrent</span>());    <br>    <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;%s-----%@&quot;</span>, __func__, [<span class="hljs-built_in">NSThread</span> currentThread]);<br>    <span class="hljs-comment">// 清空线程</span><br>    <span class="hljs-keyword">self</span>.thread = <span class="hljs-literal">nil</span>;<br>&#125;<br><br>- (<span class="hljs-keyword">void</span>)dealloc<br>&#123;<br>    <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;%s&quot;</span>, __func__);<br>    <br>    <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">self</span>.thread) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-comment">// 在子线程调用（waitUntilDone设置为YES，代表子线程的代码执行完毕后，当前方法才会继续往下执行）</span><br>    [<span class="hljs-keyword">self</span> performSelector:<span class="hljs-keyword">@selector</span>(stopThread) onThread:<span class="hljs-keyword">self</span>.thread withObject:<span class="hljs-literal">nil</span> waitUntilDone:<span class="hljs-literal">YES</span>];<br>&#125;<br><br><span class="hljs-keyword">@end</span><br><br><br><span class="hljs-comment">// HTThread.h</span><br><span class="hljs-meta">#import <span class="hljs-meta-string">&lt;Foundation/Foundation.h&gt;</span></span><br><span class="hljs-class"><span class="hljs-keyword">@interface</span> <span class="hljs-title">HTThread</span> : <span class="hljs-title">NSThread</span></span><br><span class="hljs-keyword">@end</span><br><br><span class="hljs-comment">// HTThread.m</span><br><span class="hljs-meta">#import <span class="hljs-meta-string">&quot;HTThread.h&quot;</span></span><br><span class="hljs-class"><span class="hljs-keyword">@implementation</span> <span class="hljs-title">HTThread</span></span><br>- (<span class="hljs-keyword">void</span>)dealloc<br>&#123;<br>    <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;%s&quot;</span>, __func__);<br>&#125;<br><span class="hljs-keyword">@end</span><br><br></code></pre></td></tr></table></figure><p>点击 view，接着退出当前 ViewController。输出如下：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">begin-----&lt;HTThread: <span class="hljs-number">0x600002b71240</span>&gt;&#123;number = <span class="hljs-number">6</span>, name = (<span class="hljs-literal">null</span>)&#125;<br>-[ViewController test]-----&lt;HTThread: <span class="hljs-number">0x600002b71240</span>&gt;&#123;number = <span class="hljs-number">6</span>, name = (<span class="hljs-literal">null</span>)&#125;<br>-[ViewController dealloc]<br>-[ViewController stopThread]-----&lt;HTThread: <span class="hljs-number">0x600002b71240</span>&gt;&#123;number = <span class="hljs-number">6</span>, name = (<span class="hljs-literal">null</span>)&#125;<br>end-----&lt;HTThread: <span class="hljs-number">0x600002b71240</span>&gt;&#123;number = <span class="hljs-number">6</span>, name = (<span class="hljs-literal">null</span>)&#125;<br>-[HTThread dealloc]<br></code></pre></td></tr></table></figure><h1 id="二、RunLoop与NSTimer"><a href="#二、RunLoop与NSTimer" class="headerlink" title="二、RunLoop与NSTimer"></a>二、RunLoop与NSTimer</h1><ul><li>根据RunLoop的原理，我们知道，<code>NSTimer</code>是由<code>RunLoop</code>来管理的，<code>NSTimer</code>其实就是<code>CFRunLoopTimerRef</code>，他们之间是<code>toll-free bridged</code>的，可以相互转换；</li><li>如果我们在子线程上使用<code>NSTimer</code>，就必须开启子线程的<code>RunLoop</code>，否则定时器无法生效</li></ul><h2 id="1-解决TableView滑动时NSTimer失效的问题"><a href="#1-解决TableView滑动时NSTimer失效的问题" class="headerlink" title="1. 解决TableView滑动时NSTimer失效的问题"></a>1. 解决TableView滑动时NSTimer失效的问题</h2><ul><li>问题：<code>RunLoop</code>同一时间只能运行在一种模式下，当我们滑动<code>tableview/scrollview</code>的时候<code>RunLoop</code>会切换到<code>UITrackingRunLoopMode</code>界面追踪模式下。如果我们的<code>NSTimer</code>是添加到<code>RunLoop</code>的<code>KCFRunLoopDefaultMode/NSDefaultRunLoopMode</code>默认模式下的话，此时<code>NStimer</code>是会失效的。</li><li>解决：我们可以将<code>NSTimer</code>添加到<code>RunLoop</code>的<code>KCFRunLoopCommonModes/NSRunLoopCommonModes</code>通用模式下，来保证无论是在默认模式下还是界面追踪模式下<code>NSTimer</code>都可以执行的。</li></ul><h3 id="NSTimer的创建方式"><a href="#NSTimer的创建方式" class="headerlink" title="NSTimer的创建方式"></a>NSTimer的创建方式</h3><p>如果我们是通过以下方法创建的<code>NSTimer</code>，是自动添加到<code>RunLoop</code>的默认模式下的</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs objc">[<span class="hljs-built_in">NSTimer</span> scheduledTimerWithTimeInterval:<span class="hljs-number">1.0</span> repeats:<span class="hljs-literal">YES</span> block:^(<span class="hljs-built_in">NSTimer</span> * _Nonnull timer) &#123;<br>    <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;123&quot;</span>);<br>&#125;];<br></code></pre></td></tr></table></figure><p>我们可以通过以下方法创建<code>NSTimer</code>，来自定义添加到<code>RunLoop</code>的某种模式下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs objective-c">NSTimer *timer &#x3D; [NSTimer timerWithTimeInterval:1.0 repeats:YES block:^(NSTimer * _Nonnull timer) &#123;<br>    NSLog(@&quot;123&quot;);<br>&#125;];<br>[[NSRunLoop currentRunLoop] addTimer:timer forMode:NSRunLoopCommonModes];<br></code></pre></td></tr></table></figure><p><strong>注意：</strong> 如果是通过<code>timerxxx</code>开头方法创建的<code>NSTimer</code>是不会自动添加到<code>RunLoop</code>中的，所以一定要记得手动添加，否则<code>NSTimer</code>不生效。</p><h2 id="2-NSTimer和CADisplayLink"><a href="#2-NSTimer和CADisplayLink" class="headerlink" title="2. NSTimer和CADisplayLink"></a>2. NSTimer和CADisplayLink</h2><ul><li>不准时：<code>NSTimer</code>和<code>CADisplayLink</code>底层都是基于<code>Runloop</code>的<code>CFRunLoopTimerRef</code>实现的，也就是说它们依赖于<code>Runloop</code>。如果<code>Runloop</code>的任务过于繁重，会导致它们不准时。</li><li>循环引用</li></ul><p>比如<code>NSTimer</code>每1.0秒就会执行一次任务，<code>Runloop</code>每进行一次循环，就会看一下<code>NSTimer</code>的时间是否达到1.0秒，是的话就执行任务。但是由于<code>Runloop</code>每一次循环的任务不一样，所花费的时间就不固定。假设第一次循环所花时间为 0.2s，第二次 0.3s，第三次 0.3s，则再过 0.2s 就会执行<code>NSTimer</code>的任务，这时候可能<code>Runloop</code>的任务过于繁重，第四次花了0.5s，那加起来时间就是 1.3s，导致<code>NSTimer</code>不准时。</p><p>解决方法：使用 GCD 的定时器。GCD 的定时器是直接跟系统内核挂钩的，而且它不依赖于<code>RunLoop</code>，所以它非常的准时。示例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs objective-c">dispatch_queue_t queue &#x3D; dispatch_queue_create(&quot;myqueue&quot;, DISPATCH_QUEUE_SERIAL);        &#x2F;&#x2F;创建定时器 <br>dispatch_source_t timer &#x3D; dispatch_source_create(DISPATCH_SOURCE_TYPE_TIMER, 0, 0, queue);    &#x2F;&#x2F;设置时间<br>（start:几s后开始执行； interval:时间间隔）    uint64_t start &#x3D; 2.0;    &#x2F;&#x2F;2s后开始执行    <br>uint64_t interval &#x3D; 1.0; &#x2F;&#x2F;每隔1s执行    <br>dispatch_source_set_timer(timer, dispatch_time(DISPATCH_TIME_NOW, start * NSEC_PER_SEC), interval * NSEC_PER_SEC, 0);    &#x2F;&#x2F;设置回调    <br>dispatch_source_set_event_handler(timer, ^&#123;       NSLog(@&quot;%@&quot;,[NSThread currentThread]);    &#125;);   <br>&#x2F;&#x2F;启动定时器    <br>dispatch_resume(timer);    <br>NSLog(@&quot;%@&quot;,[NSThread currentThread]);        <br>self.timer &#x3D; timer;<br>&#x2F;* 2020-02-01 21:34:23.036474+0800 多线程[7309:1327653] &lt;NSThread: 0x600001a5cfc0&gt;&#123;number &#x3D; 1, name &#x3D; main&#125; 2020-02-01 21:34:25.036832+0800 多线程[7309:1327705] &lt;NSThread: 0x600001acb600&gt;&#123;number &#x3D; 7, name &#x3D; (null)&#125; 2020-02-01 21:34:26.036977+0800 多线程[7309:1327705] &lt;NSThread: 0x600001acb600&gt;&#123;number &#x3D; 7, name &#x3D; (null)&#125; 2020-02-01 21:34:27.036609+0800 多线程[7309:1327707] &lt;NSThread: 0x600001a1e5c0&gt;&#123;number &#x3D; 4, name &#x3D; (null)&#125; *&#x2F;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
      <category>iOS进阶</category>
      
    </categories>
    
    
    <tags>
      
      <tag>iOS</tag>
      
      <tag>RunLoop</tag>
      
      <tag>线程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RunLoop的原理</title>
    <link href="/2021/11/22/RunLoop-Part1/"/>
    <url>/2021/11/22/RunLoop-Part1/</url>
    
    <content type="html"><![CDATA[<h1 id="一、RunLoop概念"><a href="#一、RunLoop概念" class="headerlink" title="一、RunLoop概念"></a>一、RunLoop概念</h1><p>RunLoop，顾名思义其实就是一个循环，而通过这个循环能帮助我们理解以及解决什么问题就是我们值得思考的事情了。</p><h3 id="事件循环"><a href="#事件循环" class="headerlink" title="事件循环"></a>事件循环</h3><ul><li>没有消息需要处理时，休眠线程以避免资源占用。从用户态切换到内核态，等待消息；</li><li>有消息需要处理时，立刻唤醒线程，回到用户态处理消息；</li><li>通过调用mach_msg()函数来转移当前线程的控制权给内核态/用户态</li></ul><h3 id="RunLoop作用"><a href="#RunLoop作用" class="headerlink" title="RunLoop作用"></a>RunLoop作用</h3><ul><li><p>保持程序的持续运行：</p><p>如果没有RunLoop，main()函数一执行完，程序就会立刻退出。而我们的iOS程序能保持持续运行的原因就是在main()函数中调用了UIApplicationMain函数，这个函数内部会启动主线程的RunLoop;</p></li><li><p>处理App中的各种事件（比如触摸事件、定时器事件等）；</p></li><li><p>节省CPU资源，提高程序性能; </p></li></ul><a id="more"></a><h1 id="二、RunLoop结构"><a href="#二、RunLoop结构" class="headerlink" title="二、RunLoop结构"></a>二、RunLoop结构</h1><p>在iOS系统中，提供了两个对象：NSRunLoop 和 CFRunLoopRef。<br>CFRunLoopRef 是在 CoreFoundation 框架内的，它提供了纯C函数的API，所以这些API都是线程安全的。<br>NSRunLoop 是基于 CFRunLoopRef 的封装，它提供了面向对象的API，但是这些API不是线程安全的。<br>CFRunLoopRef 的代码是开源的，你可以在这里 <a href="http://opensource.apple.com/tarballs/CF/">http://opensource.apple.com/tarballs/CF/</a> 下载到整个 CoreFoundation 的源码来查看。</p><p>下面介绍几种获取RunLoop对象的方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs objective-c">&#x2F;&#x2F; Foundation<br>[NSRunLoop mainRunLoop];     &#x2F;&#x2F; 获取主线程的 RunLoop 对象<br>[NSRunLoop currentRunLoop];  &#x2F;&#x2F; 获取当前线程的 RunLoop 对象<br>&#x2F;&#x2F; Core Foundation<br>CFRunLoopGetMain();     &#x2F;&#x2F; 获取主线程的 RunLoop 对象<br>CFRunLoopGetCurrent();  &#x2F;&#x2F; 获取当前线程的 RunLoop 对象<br></code></pre></td></tr></table></figure><h2 id="RunLoop的构成"><a href="#RunLoop的构成" class="headerlink" title="RunLoop的构成"></a>RunLoop的构成</h2><p>RunLoop的结构体定义如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs objective-c">&#x2F;&#x2F; CFRunLoop.h<br>typedef struct __CFRunLoop * CFRunLoopRef;<br>&#x2F;&#x2F; CFRunLoop.c<br>struct __CFRunLoop &#123;<br>      ...<br>    pthread_t _pthread; &#x2F;&#x2F; RunLoop与线程是一一对应的关系<br>    CFMutableSetRef _commonModes; &#x2F;&#x2F; 存储着NSString对象的集合（Mode的名称）<br>    CFMutableSetRef _commonModeItems; &#x2F;&#x2F; 存储着被标记为通用模式的的 Source0、Source1、Timer、Observer<br>    CFRunLoopModeRef _currentMode; &#x2F;&#x2F; RunLoop当前的运行模式<br>    CFMutableSetRef _modes; &#x2F;&#x2F; 存储着RunLoop所有的Mode（CFRunLoopModeRef）模式<br>      ...<br>&#125;;<br></code></pre></td></tr></table></figure><p>RunLoop结构图示：</p><img src="RunLoop-Part1/RunLoop1.png" alt="RunLoop1" style="zoom:50%;" align="left" /><p>RunLoop结构对应关系：</p><img src="RunLoop-Part1/RunLoop2.jpeg" alt="RunLoop2" style="zoom: 67%;" align="left" /><h2 id="CFRunLoopModeRef"><a href="#CFRunLoopModeRef" class="headerlink" title="CFRunLoopModeRef"></a>CFRunLoopModeRef</h2><ul><li>CFRunLoopModeRef 代表RunLoop的运行模式；</li><li>一个RunLoop包含若干个Mode，每个Mode又包含若干个Source0/Source1/Timer/Observer；</li><li>RunLoop启动时只能选择其中一个Mode，作为CurrentMode;</li><li>如果需要切换Mode，只能退出当前Mode，再重新选择一个Mode进入，切换模式不会导致程序退出；</li><li>不同Mode中的Source0/Source1/Timer/Observer能分割开来，互不影响；</li><li>如果Mode里没有任何Source0/Source1/Timer/Observer，RunLoop会立马退出；</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs objective-c">typedef struct __CFRunLoopMode *CFRunLoopModeRef;<br><br>struct __CFRunLoopMode &#123;<br>      ...<br>    CFStringRef _name;<br>    Boolean _stopped;<br>    CFMutableSetRef _sources0;<br>    CFMutableSetRef _sources1;<br>    CFMutableArrayRef _observers;<br>    CFMutableArrayRef _timers;<br>      ...<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="RunLoop常见的模式"><a href="#RunLoop常见的模式" class="headerlink" title="RunLoop常见的模式"></a>RunLoop常见的模式</h3><table><thead><tr><th>ModeName</th><th>描述</th></tr></thead><tbody><tr><td>NSDefaultRunLoopMode / KCFRunLoopDefaultMode</td><td>默认模式</td></tr><tr><td>UITrackingRunLoopMode</td><td>界面追踪模式，用于 ScrollView 追踪触摸滑动，保证界面滑动时不受其他 Mode 影响；</td></tr><tr><td>NSRunLoopCommonModes / KCFRunLoopCommonModes</td><td>通用模式（默认包含 KCFRunLoopDefaultMode 和 UITrackingRunLoopMode）  该模式不是实际存在的一种模式，它只是一个特殊的标记，是同步<code>Source0</code>/<code>Source1</code>/<code>Timer</code>/<code>Observer</code>到多个 Mode 中的技术方案。被标记为通用模式的<code>Source0</code>/<code>Source1</code>/<code>Timer</code>/<code>Observer</code>都会存放到 _commonModeItems 集合中，会同步这些<code>Source0</code>/<code>Source1</code>/<code>Timer</code>/<code>Observer</code>到多个 Mode 中。</td></tr></tbody></table><h3 id="CFRunLoopModeRef这样设计有什么好处？"><a href="#CFRunLoopModeRef这样设计有什么好处？" class="headerlink" title="CFRunLoopModeRef这样设计有什么好处？"></a>CFRunLoopModeRef这样设计有什么好处？</h3><p>一个 RunLoopMode 又可以持有多个 RunLoopModeItem（Source/Timer/Observer），这样设计的目的主要是为了分隔开不同的 item，让它们能够在各自的“模式”下互不干扰地进行工作。Mode 做到了屏蔽的效果，当<code>RunLoop</code>运行在 Mode1 下面的时候，是处理不了 Mode2 的事件的；</p><h3 id="RunLoop为什么会有多个Mode？"><a href="#RunLoop为什么会有多个Mode？" class="headerlink" title="RunLoop为什么会有多个Mode？"></a>RunLoop为什么会有多个Mode？</h3><p>比如<code>NSDefaultRunLoopMode</code>默认模式和<code>UITrackingRunLoopMode</code>滚动模式，滚动屏幕的时候就会切换到滚动模式，就不用去处理默认模式下的事件了，保证了 UITableView 等的滚动顺畅。</p><h3 id="应用场景举例："><a href="#应用场景举例：" class="headerlink" title="应用场景举例："></a>应用场景举例：</h3><p>主线程的 RunLoop 里有两个预置的 Mode：kCFRunLoopDefaultMode 和 UITrackingRunLoopMode。这两个 Mode 都已经被标记为”Common”属性。DefaultMode 是 App 平时所处的状态，TrackingRunLoopMode 是追踪 ScrollView 滑动时的状态。当你创建一个 Timer 并加到 DefaultMode 时，Timer 会得到重复回调，但此时滑动一个TableView时，RunLoop 会将 mode 切换为 TrackingRunLoopMode，这时 Timer 就不会被回调，并且也不会影响到滑动操作。</p><p>有时你需要一个 Timer，在两个 Mode 中都能得到回调，一种办法就是将这个 Timer 分别加入这两个 Mode。还有一种方式，就是将 Timer 加入到顶层的 RunLoop 的 “commonModeItems” 中。”commonModeItems” 被 RunLoop 自动更新到所有具有”Common”属性的 Mode 里去。</p><h2 id="CFRunLoopSourceRef"><a href="#CFRunLoopSourceRef" class="headerlink" title="CFRunLoopSourceRef"></a>CFRunLoopSourceRef</h2><p>在RunLoop中有两个很重要的概念，一个是上面提交的模式，还有一个就是事件源。事件源分为输入源（<code>Input Sources</code>）和定时器源（<code>Timer Sources</code>）两种；<br>输入源（<code>Input Sources</code>）又分为<code>Source0</code>和<code>Source1</code>两种，一下__CFRunLoopSource中的共用体<code>union</code>中的<code>version0</code>和<code>version1</code>就分别对应<code>Source0</code>和<code>Source1</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs objective-c">struct __CFRunLoopSource &#123;<br>    CFRuntimeBase _base;<br>    uint32_t _bits;<br>    pthread_mutex_t _lock;<br>    CFIndex _order;            &#x2F;* immutable *&#x2F;<br>    CFMutableBagRef _runLoops;<br>    union &#123;<br>          CFRunLoopSourceContext version0;    &#x2F;* immutable, except invalidation *&#x2F;<br>        CFRunLoopSourceContext1 version1;    &#x2F;* immutable, except invalidation *&#x2F;<br>    &#125; _context;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="Source0和Source1的区别"><a href="#Source0和Source1的区别" class="headerlink" title="Source0和Source1的区别:"></a>Source0和Source1的区别:</h3><table><thead><tr><th>Input Sources</th><th>区别</th></tr></thead><tbody><tr><td>Source0</td><td>需要手动唤醒线程：添加<code>Source0</code>到<code>RunLoop</code>并不会主动唤醒线程，需要手动唤醒） ① 触摸事件处理 ② <code>performSelector:onThread:</code></td></tr><tr><td>Source1</td><td>具备唤醒线程的能力 ① 基于 Port 的线程间通信 ② 系统事件捕捉：系统事件捕捉是由<code>Source1</code>来处理，然后再交给<code>Source0</code>处理</td></tr></tbody></table><p>把事件进行分类，大家会分成几类？分类的方式有很多，但一定会有下面这种：</p><p>系统层事件、应用层事件、特殊事件。（这只是为了大家理解source1和source0举得一个不严谨的例子，大家不要在意细节）</p><p>如果上面对事件分类的方式你理解，那就好办了，特殊事件我们不管，那么，source1基本就是系统事件，source0基本就是应用层事件。</p><p>• Source1 :基于mach_Port的,来自系统内核或者其他进程或线程的事件，可以主动唤醒休眠中的RunLoop（iOS里进程间通信开发过程中我们一般不主动使用）。mach_port大家就理解成进程间相互发送消息的一种机制就好, 比如屏幕点击, 网络数据的传输都会触发sourse1。<br>• Source0 ：非基于Port的 处理事件，什么叫非基于Port的呢？就是说你这个消息不是其他进程或者内核直接发送给你的。一般是APP内部的事件, 比如hitTest:withEvent的处理, performSelectors的事件.</p><p>简单举个例子：一个APP在前台静止着，此时，用户用手指点击了一下APP界面，那么过程就是下面这样的：</p><p>我们触摸屏幕,先摸到硬件(屏幕)，屏幕表面的事件会被IOKit先包装成Event,通过mach_Port传给正在活跃的APP , Event先告诉source1（mach_port）,source1唤醒RunLoop, 然后将事件Event分发给source0,然后由source0来处理。<br>如果没有事件,也没有timer,则runloop就会睡眠, 如果有,则runloop就会被唤醒,然后跑一圈。</p><h2 id="CFRunLoopTimerRef"><a href="#CFRunLoopTimerRef" class="headerlink" title="CFRunLoopTimerRef"></a>CFRunLoopTimerRef</h2><p>是基于时间的触发器，它和 NSTimer 是toll-free bridged 的，可以混用。其包含一个时间长度和一个回调（函数指针）。当其加入到 RunLoop 时，RunLoop会注册对应的时间点，当时间点到时，RunLoop会被唤醒以执行那个回调。</p><ul><li>当调用 NSObject 的 performSelecter:afterDelay: 后，实际上其内部会创建一个 Timer 并添加到当前线程的 RunLoop 中。所以如果当前线程没有 RunLoop，则这个方法会失效。</li><li>当调用 performSelector:onThread: 时，实际上其会创建一个 Timer 加到对应的线程去，同样的，如果对应线程没有 RunLoop 该方法也会失效。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs objective-c">&#x2F;&#x2F; CFRunLoop.h<br>typedef struct CF_BRIDGED_MUTABLE_TYPE(NSTimer) __CFRunLoopTimer * CFRunLoopTimerRef;<br>&#x2F;&#x2F; CFRunLoop.c<br>struct __CFRunLoopTimer &#123;<br>    CFRuntimeBase _base;<br>    uint16_t _bits;<br>    pthread_mutex_t _lock;<br>    CFRunLoopRef _runLoop;           &#x2F;&#x2F; 添加该 timer 的 RunLoop<br>    CFMutableSetRef _rlModes;        &#x2F;&#x2F; 所有包含该 timer 的 modeName<br>    CFAbsoluteTime _nextFireDate;<br>    CFTimeInterval _interval;        &#x2F;* immutable 理想时间间隔 *&#x2F;    <br>    CFTimeInterval _tolerance;       &#x2F;* mutable 时间偏差 *&#x2F;  <br>    uint64_t _fireTSR;                 &#x2F;* TSR units *&#x2F;<br>    CFIndex _order;                  &#x2F;* immutable *&#x2F;<br>    CFRunLoopTimerCallBack _callout; &#x2F;* immutable 回调入口 *&#x2F;<br>    CFRunLoopTimerContext _context;  &#x2F;* immutable, except invalidation *&#x2F;<br>&#125;;<br></code></pre></td></tr></table></figure><p>一个 NSTimer 注册到 RunLoop 后，RunLoop 会为其重复的时间点注册好事件。例如 10:00, 10:10, 10:20 这几个时间点。RunLoop为了节省资源，并不会在非常准确的时间点回调这个Timer。Timer 有个属性叫做 Tolerance (宽容度)，标示了当时间点到后，容许有多少最大误差。<br>如果某个时间点被错过了，例如执行了一个很长的任务，则那个时间点的回调也会跳过去，不会延后执行。就比如等公交，如果 10:10 时我忙着玩手机错过了那个点的公交，那我只能等 10:20 这一趟了。</p><h2 id="CFRunLoopObserverRef"><a href="#CFRunLoopObserverRef" class="headerlink" title="CFRunLoopObserverRef"></a>CFRunLoopObserverRef</h2><p><code>CFRunLoopObserverRef</code>是观察者，每个Observer都包含一个回调（函数指针），当RunLoop的状态发生变化时，观察者就能通过回调接受到这个变化。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs objective-c">struct __CFRunLoopObserver &#123;<br>      ...<br>    pthread_mutex_t _lock;<br>    CFRunLoopRef _runLoop;<br>    CFOptionFlags _activities; &#x2F;&#x2F; 生命周期    &#x2F;* immutable *&#x2F;<br>    CFIndex _order; &#x2F;&#x2F; 优先级                            &#x2F;* immutable *&#x2F;<br>    CFRunLoopObserverCallBack _callout;        &#x2F;* immutable *&#x2F;<br>      ...<br>&#125;;<br></code></pre></td></tr></table></figure><p>其中 CFOptionFlags 定义了 RunLoop 的生命周期活动：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs objective-c">&#x2F;* Run Loop Observer Activities *&#x2F;<br>typedef CF_OPTIONS(CFOptionFlags, CFRunLoopActivity) &#123;<br>    kCFRunLoopEntry         &#x3D; (1UL &lt;&lt; 0), &#x2F;&#x2F; 即将进入 RunLoop<br>    kCFRunLoopBeforeTimers  &#x3D; (1UL &lt;&lt; 1), &#x2F;&#x2F; 即将处理 Timer<br>    kCFRunLoopBeforeSources &#x3D; (1UL &lt;&lt; 2), &#x2F;&#x2F; 即将处理 Source<br>    kCFRunLoopBeforeWaiting &#x3D; (1UL &lt;&lt; 5), &#x2F;&#x2F; 即将进入休眠<br>    kCFRunLoopAfterWaiting  &#x3D; (1UL &lt;&lt; 6), &#x2F;&#x2F; 刚从休眠被唤醒<br>    kCFRunLoopExit          &#x3D; (1UL &lt;&lt; 7), &#x2F;&#x2F; 即将退出 RunLoop<br>    kCFRunLoopAllActivities &#x3D; 0x0FFFFFFFU &#x2F;&#x2F; 任意上述活动<br>&#125;;<br></code></pre></td></tr></table></figure><p><code>CFRunLoopObserverRef</code>中的<code>_activities</code>用来保存<code>RunLoop</code>的活动状态。当<code>RunLoop</code>的状态发生改变时，通过回调<code>_callout</code>通知所有监听这个状态的<code>Observer</code>。</p><h1 id="三、RunLoop-内部逻辑"><a href="#三、RunLoop-内部逻辑" class="headerlink" title="三、RunLoop 内部逻辑"></a>三、RunLoop 内部逻辑</h1><p>根据苹果在<a href="https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/Multithreading/RunLoopManagement/RunLoopManagement.html#//apple_ref/doc/uid/10000057i-CH16-SW23">文档</a>里的说明，RunLoop 内部的逻辑大致如下:</p><img src="RunLoop-Part1/RunLoop3.png" alt="RunLoop3" style="zoom: 50%;" align="left" /><h2 id="CFRunLoopRun-函数实现：事件循环的实现机制"><a href="#CFRunLoopRun-函数实现：事件循环的实现机制" class="headerlink" title="__CFRunLoopRun 函数实现：事件循环的实现机制"></a>__CFRunLoopRun 函数实现：事件循环的实现机制</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><code class="hljs objective-c">&#x2F;&#x2F;&#x2F; 用DefaultMode启动<br>void CFRunLoopRun(void) &#123;<br>    CFRunLoopRunSpecific(CFRunLoopGetCurrent(), kCFRunLoopDefaultMode, 1.0e10, false);<br>&#125;<br> <br>&#x2F;&#x2F;&#x2F; 用指定的Mode启动，允许设置RunLoop超时时间<br>int CFRunLoopRunInMode(CFStringRef modeName, CFTimeInterval seconds, Boolean stopAfterHandle) &#123;<br>    return CFRunLoopRunSpecific(CFRunLoopGetCurrent(), modeName, seconds, returnAfterSourceHandled);<br>&#125;<br> <br>&#x2F;&#x2F;&#x2F; RunLoop的实现<br>int CFRunLoopRunSpecific(runloop, modeName, seconds, stopAfterHandle) &#123;<br>    <br>    &#x2F;&#x2F;&#x2F; 首先根据modeName找到对应mode<br>    CFRunLoopModeRef currentMode &#x3D; __CFRunLoopFindMode(runloop, modeName, false);<br>    &#x2F;&#x2F;&#x2F; 如果mode里没有source&#x2F;timer&#x2F;observer, 直接返回。<br>    if (__CFRunLoopModeIsEmpty(currentMode)) return;<br>    <br>    &#x2F;&#x2F;&#x2F; 1. 通知 Observers: RunLoop 即将进入 loop。<br>    __CFRunLoopDoObservers(runloop, currentMode, kCFRunLoopEntry);<br>    <br>    &#x2F;&#x2F;&#x2F; 内部函数，进入loop<br>    __CFRunLoopRun(runloop, currentMode, seconds, returnAfterSourceHandled) &#123;<br>        <br>        Boolean sourceHandledThisLoop &#x3D; NO;<br>        int retVal &#x3D; 0;<br>        do &#123;<br> <br>            &#x2F;&#x2F;&#x2F; 2. 通知 Observers: RunLoop 即将触发 Timer 回调。<br>            __CFRunLoopDoObservers(runloop, currentMode, kCFRunLoopBeforeTimers);<br>            &#x2F;&#x2F;&#x2F; 3. 通知 Observers: RunLoop 即将触发 Source0 (非port) 回调。<br>            __CFRunLoopDoObservers(runloop, currentMode, kCFRunLoopBeforeSources);<br>            &#x2F;&#x2F;&#x2F; 执行被加入的block<br>            __CFRunLoopDoBlocks(runloop, currentMode);<br>            <br>            &#x2F;&#x2F;&#x2F; 4. RunLoop 触发 Source0 (非port) 回调。<br>            sourceHandledThisLoop &#x3D; __CFRunLoopDoSources0(runloop, currentMode, stopAfterHandle);<br>            &#x2F;&#x2F;&#x2F; 执行被加入的block<br>            __CFRunLoopDoBlocks(runloop, currentMode);<br> <br>            &#x2F;&#x2F;&#x2F; 5. 如果有 Source1 (基于port) 处于 ready 状态，直接处理这个 Source1 然后跳转去处理消息。<br>            if (__Source0DidDispatchPortLastTime) &#123;<br>                Boolean hasMsg &#x3D; __CFRunLoopServiceMachPort(dispatchPort, &amp;msg)<br>                if (hasMsg) goto handle_msg;<br>            &#125;<br>            <br>            &#x2F;&#x2F;&#x2F; 通知 Observers: RunLoop 的线程即将进入休眠(sleep)。<br>            if (!sourceHandledThisLoop) &#123;<br>                __CFRunLoopDoObservers(runloop, currentMode, kCFRunLoopBeforeWaiting);<br>            &#125;<br>            <br>            &#x2F;&#x2F;&#x2F; 7. 调用 mach_msg 等待接受 mach_port 的消息。线程将进入休眠, 直到被下面某一个事件唤醒。<br>            &#x2F;&#x2F;&#x2F; • 一个基于 port 的Source 的事件。<br>            &#x2F;&#x2F;&#x2F; • 一个 Timer 到时间了<br>            &#x2F;&#x2F;&#x2F; • RunLoop 自身的超时时间到了<br>            &#x2F;&#x2F;&#x2F; • 被其他什么调用者手动唤醒<br>            __CFRunLoopServiceMachPort(waitSet, &amp;msg, sizeof(msg_buffer), &amp;livePort) &#123;<br>                mach_msg(msg, MACH_RCV_MSG, port); &#x2F;&#x2F; thread wait for receive msg<br>            &#125;<br> <br>            &#x2F;&#x2F;&#x2F; 8. 通知 Observers: RunLoop 的线程刚刚被唤醒了。<br>            __CFRunLoopDoObservers(runloop, currentMode, kCFRunLoopAfterWaiting);<br>            <br>            &#x2F;&#x2F;&#x2F; 收到消息，处理消息。<br>            handle_msg:<br> <br>            &#x2F;&#x2F;&#x2F; 9.1 如果一个 Timer 到时间了，触发这个Timer的回调。<br>            if (msg_is_timer) &#123;<br>                __CFRunLoopDoTimers(runloop, currentMode, mach_absolute_time())<br>            &#125; <br> <br>            &#x2F;&#x2F;&#x2F; 9.2 如果有dispatch到main_queue的block，执行block。<br>            else if (msg_is_dispatch) &#123;<br>                __CFRUNLOOP_IS_SERVICING_THE_MAIN_DISPATCH_QUEUE__(msg);<br>            &#125; <br> <br>            &#x2F;&#x2F;&#x2F; 9.3 如果一个 Source1 (基于port) 发出事件了，处理这个事件<br>            else &#123;<br>                CFRunLoopSourceRef source1 &#x3D; __CFRunLoopModeFindSourceForMachPort(runloop, currentMode, livePort);<br>                sourceHandledThisLoop &#x3D; __CFRunLoopDoSource1(runloop, currentMode, source1, msg);<br>                if (sourceHandledThisLoop) &#123;<br>                    mach_msg(reply, MACH_SEND_MSG, reply);<br>                &#125;<br>            &#125;<br>            <br>            &#x2F;&#x2F;&#x2F; 执行加入到Loop的block<br>            __CFRunLoopDoBlocks(runloop, currentMode);<br>            <br> <br>            if (sourceHandledThisLoop &amp;&amp; stopAfterHandle) &#123;<br>                &#x2F;&#x2F;&#x2F; 进入loop时参数说处理完事件就返回。<br>                retVal &#x3D; kCFRunLoopRunHandledSource;<br>            &#125; else if (timeout) &#123;<br>                &#x2F;&#x2F;&#x2F; 超出传入参数标记的超时时间了<br>                retVal &#x3D; kCFRunLoopRunTimedOut;<br>            &#125; else if (__CFRunLoopIsStopped(runloop)) &#123;<br>                &#x2F;&#x2F;&#x2F; 被外部调用者强制停止了<br>                retVal &#x3D; kCFRunLoopRunStopped;<br>            &#125; else if (__CFRunLoopModeIsEmpty(runloop, currentMode)) &#123;<br>                &#x2F;&#x2F;&#x2F; source&#x2F;timer&#x2F;observer一个都没有了<br>                retVal &#x3D; kCFRunLoopRunFinished;<br>            &#125;<br>            <br>            &#x2F;&#x2F;&#x2F; 如果没超时，mode里没空，loop也没被停止，那继续loop。<br>        &#125; while (retVal &#x3D;&#x3D; 0);<br>    &#125;<br>    <br>    &#x2F;&#x2F;&#x2F; 10. 通知 Observers: RunLoop 即将退出。<br>    __CFRunLoopDoObservers(rl, currentMode, kCFRunLoopExit);<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到，实际上 RunLoop 就是这样一个函数，其内部是一个 do-while 循环。当你调用 CFRunLoopRun() 时，线程就会一直停留在这个循环里；直到超时或被手动停止，该函数才会返回。<br>从该函数实现中可以得知<code>RunLoop</code>主要就做一下几件事情：</p><ul><li>__CFRunLoopDoObservers：通知<code>Observers</code>接下来要做什么</li><li>__CFRunLoopDoBlocks：处理<code>Blocks</code></li><li>__CFRunLoopDoSources0：处理<code>Sources0</code></li><li>__CFRunLoopDoSources1：处理<code>Sources1</code></li><li>__CFRunLoopDoTimers：处理<code>Timers</code></li><li>处理 GCD 相关：<code>dispatch_async(dispatch_get_main_queue(), ^&#123; &#125;);</code></li><li>__CFRunLoopSetSleeping / _CFRunLoopUnsetSleeping：休眠等待/结束休眠</li><li>__CFRunLoopServiceMachPort -&gt; mach-msg()：转移当前线程的控制权</li></ul><h2 id="CFRunLoopServiceMachPort-函数实现：RunLoop-休眠的实现原理"><a href="#CFRunLoopServiceMachPort-函数实现：RunLoop-休眠的实现原理" class="headerlink" title="__CFRunLoopServiceMachPort 函数实现：RunLoop 休眠的实现原理"></a>__CFRunLoopServiceMachPort 函数实现：RunLoop 休眠的实现原理</h2><p>在<code>__CFRunLoopRun</code>函数中，会调用<code>__CFRunLoopServiceMachPort</code>函数，该函数中调用了<code>mach_msg()</code>函数来转移当前线程的控制权给内核态/用户态。</p><ul><li>没有消息需要处理时，休眠线程以避免资源占用。调用<code>mach_msg()</code>从用户态切换到内核态，等待消息；</li><li>有消息需要处理时，立即唤醒线程，调用<code>mach_msg()</code>回到用户态处理消息。</li></ul><p>这就是<code>RunLoop</code>休眠的实现原理，也是<code>RunLoop</code>与简单的<code>do...while</code>循环的区别：</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
      <category>iOS进阶</category>
      
    </categories>
    
    
    <tags>
      
      <tag>iOS</tag>
      
      <tag>RunLoop</tag>
      
      <tag>原理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Runtime - 进阶篇</title>
    <link href="/2021/11/02/Runtime-Part2/"/>
    <url>/2021/11/02/Runtime-Part2/</url>
    
    <content type="html"><![CDATA[<h1 id="1-动态方法交换：Method-Swizzling"><a href="#1-动态方法交换：Method-Swizzling" class="headerlink" title="1. 动态方法交换：Method Swizzling"></a>1. 动态方法交换：Method Swizzling</h1><p>实现动态方法交换(Method Swizzling )是Runtime中最具盛名的应用场景，其原理是：通过Runtime获取到方法实现的地址，进而动态交换两个方法的功能。使用到关键方法如下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-comment">//获取类方法的Mthod</span><br><span class="hljs-type">Method</span> _Nullable class_getClassMethod(<span class="hljs-type">Class</span> _Nullable cls, <span class="hljs-type">SEL</span> _Nonnull name)<br><span class="hljs-comment">//获取实例对象方法的Mthod</span><br><span class="hljs-type">Method</span> _Nullable class_getInstanceMethod(<span class="hljs-type">Class</span> _Nullable cls, <span class="hljs-type">SEL</span> _Nonnull name)<br><span class="hljs-comment">//交换两个方法的实现</span><br>void method_exchangeImplementations(<span class="hljs-type">Method</span> _Nonnull m1, <span class="hljs-type">Method</span> _Nonnull m2)<br></code></pre></td></tr></table></figure><h2 id="1-1-动态方法交换示例"><a href="#1-1-动态方法交换示例" class="headerlink" title="1.1 动态方法交换示例"></a>1.1 动态方法交换示例</h2><p>现在演示一个代码示例：在视图控制中，定义两个实例方法printA与printB，然后执行交换</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs swift">- (void)printA&#123;<br>    <span class="hljs-type">NSLog</span>(@<span class="hljs-string">&quot;打印A......&quot;</span>);<br>&#125;<br><br>- (void)printB&#123;<br>    <span class="hljs-type">NSLog</span>(@<span class="hljs-string">&quot;打印B......&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">//交换方法的实现，并测试打印</span><br><span class="hljs-type">Method</span> methodA = class_getInstanceMethod([<span class="hljs-keyword">self</span> <span class="hljs-class"><span class="hljs-keyword">class</span>], @<span class="hljs-title">selector</span>(<span class="hljs-title">printA</span>));</span><br><span class="hljs-class"><span class="hljs-title">Method</span> <span class="hljs-title">methodB</span> = <span class="hljs-title">class_getInstanceMethod</span>([<span class="hljs-title">self</span> <span class="hljs-title">class</span>], @<span class="hljs-title">selector</span>(<span class="hljs-title">printB</span>));</span><br><span class="hljs-class"><span class="hljs-title">method_exchangeImplementations</span>(<span class="hljs-title">methodA</span>, <span class="hljs-title">methodB</span>);</span><br><span class="hljs-class"></span><br><span class="hljs-class">[<span class="hljs-title">self</span> <span class="hljs-title">printA</span>];  //打印<span class="hljs-title">B</span>......</span><br><span class="hljs-class">[<span class="hljs-title">self</span> <span class="hljs-title">printB</span>];  //打印<span class="hljs-title">A</span>......</span><br></code></pre></td></tr></table></figure><a id="more"></a><h2 id="1-2-拦截并替换系统方法"><a href="#1-2-拦截并替换系统方法" class="headerlink" title="1.2 拦截并替换系统方法"></a>1.2 拦截并替换系统方法</h2><p>Runtime动态方法交换更多的是应用于系统类库和第三方框架的方法替换。在不可见源码的情况下，我们可以借助Rutime交换方法实现，为原有方法添加额外功能，这在实际开发中具有十分重要的意义。</p><p>下面将展示一个拦截并替换系统方法的示例：为了实现不同机型上的字体都按照比例适配，我们可以拦截系统UIFont的systemFontOfSize方法，具体操作如下：</p><h3 id="步骤1：在当前工程中添加UIFont的分类：UIFont-Adapt-并在其中添用以替换的方法。"><a href="#步骤1：在当前工程中添加UIFont的分类：UIFont-Adapt-并在其中添用以替换的方法。" class="headerlink" title="步骤1：在当前工程中添加UIFont的分类：UIFont +Adapt,并在其中添用以替换的方法。"></a>步骤1：在当前工程中添加UIFont的分类：UIFont +Adapt,并在其中添用以替换的方法。</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs objectivec">+ (<span class="hljs-built_in">UIFont</span> *)zs_systemFontOfSize:(<span class="hljs-built_in">CGFloat</span>)fontSize&#123;<br>    <span class="hljs-comment">//获取设备屏幕宽度，并计算出比例scale</span><br>    <span class="hljs-built_in">CGFloat</span> width = [[<span class="hljs-built_in">UIScreen</span> mainScreen] bounds].size.width;<br>    <span class="hljs-built_in">CGFloat</span> scale  = width/<span class="hljs-number">375.0</span>;<br>    <span class="hljs-comment">//注意：由于方法交换，系统的方法名已变成了自定义的方法名，所以这里使用了</span><br>    <span class="hljs-comment">//自定义的方法名来获取UIFont</span><br>    <span class="hljs-keyword">return</span> [<span class="hljs-built_in">UIFont</span> zs_systemFontOfSize:fontSize * scale];<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="步骤2：在UIFont的分类中拦截系统方法，将其替换为我们自定义的方法，代码如下："><a href="#步骤2：在UIFont的分类中拦截系统方法，将其替换为我们自定义的方法，代码如下：" class="headerlink" title="步骤2：在UIFont的分类中拦截系统方法，将其替换为我们自定义的方法，代码如下："></a>步骤2：在UIFont的分类中拦截系统方法，将其替换为我们自定义的方法，代码如下：</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-comment">//load方法不需要手动调用，iOS会在应用程序启动的时候自动调起load方法，而且执行时间较早，所以在此方法中执行交换操作比较合适。</span><br>+ (void)load&#123;<br>    <span class="hljs-comment">//获取系统方法地址</span><br>    <span class="hljs-type">Method</span> sytemMethod = class_getClassMethod([<span class="hljs-type">UIFont</span> <span class="hljs-class"><span class="hljs-keyword">class</span>], @<span class="hljs-title">selector</span>(<span class="hljs-title">systemFontOfSize</span>:));</span><br><span class="hljs-class">    //获取自定义方法地址</span><br><span class="hljs-class">    <span class="hljs-title">Method</span> <span class="hljs-title">customMethod</span> = <span class="hljs-title">class_getClassMethod</span>([<span class="hljs-title">UIFont</span> <span class="hljs-title">class</span>], @<span class="hljs-title">selector</span>(<span class="hljs-title">zs_systemFontOfSize</span>:));</span><br><span class="hljs-class">    //交换两个方法的实现</span><br><span class="hljs-class">    <span class="hljs-title">method_exchangeImplementations</span>(<span class="hljs-title">sytemMethod</span>, <span class="hljs-title">customMethod</span>);</span><br><span class="hljs-class">&#125;</span><br></code></pre></td></tr></table></figure><p>添加一段测试代码，切换不同的模拟器，观察在不同机型上文字的大小：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-type">UILabel</span> *label = [[<span class="hljs-type">UILabel</span> alloc] initWithFrame:<span class="hljs-type">CGRectMake</span>(<span class="hljs-number">0</span>, <span class="hljs-number">100</span>, <span class="hljs-number">300</span>, <span class="hljs-number">50</span>)];<br>label.text = @<span class="hljs-string">&quot;测试Runtime拦截方法&quot;</span>;<br>label.font = [<span class="hljs-type">UIFont</span> systemFontOfSize:<span class="hljs-number">20</span>];<br>[<span class="hljs-keyword">self</span>.view addSubview:label];<br></code></pre></td></tr></table></figure><h1 id="2-实现分类添加新属性"><a href="#2-实现分类添加新属性" class="headerlink" title="2. 实现分类添加新属性"></a>2. 实现分类添加新属性</h1><p>我们在开发中常常使用类目Category为一些已有的类扩展功能。虽然继承也能够为已有类增加新的方法，而且相比类目更是具有增加属性的优势，但是继承毕竟是一个重量级的操作，添加不必要的继承关系无疑增加了代码的复杂度。</p><p>遗憾的是，OC的类目并不支持直接添加属性，如果我们直接在分类的声明中写入Property属性，那么只能为其生成set与get方法声明，却不能生成成员变量，直接调用这些属性还会造成崩溃。</p><p>所以为了实现给分类添加属性，我们还需借助Runtime的**关联对象(Associated Objects)**特性，它能够帮助我们在运行阶段将任意的属性关联到一个对象上，下面是相关的三个方法：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> 1.给对象设置关联属性</span><br><span class="hljs-comment"> @param object 需要设置关联属性的对象，即给哪个对象关联属性</span><br><span class="hljs-comment"> @param key 关联属性对应的key，可通过key获取这个属性，</span><br><span class="hljs-comment"> @param value 给关联属性设置的值</span><br><span class="hljs-comment"> @param policy 关联属性的存储策略(对应Property属性中的assign,copy，retain等)</span><br><span class="hljs-comment"> OBJC_ASSOCIATION_ASSIGN             @property(assign)。</span><br><span class="hljs-comment"> OBJC_ASSOCIATION_RETAIN_NONATOMIC   @property(strong, nonatomic)。</span><br><span class="hljs-comment"> OBJC_ASSOCIATION_COPY_NONATOMIC     @property(copy, nonatomic)。</span><br><span class="hljs-comment"> OBJC_ASSOCIATION_RETAIN             @property(strong,atomic)。</span><br><span class="hljs-comment"> OBJC_ASSOCIATION_COPY               @property(copy, atomic)。</span><br><span class="hljs-comment"> */</span><br>void objc_setAssociatedObject(id _Nonnull object,<br>                              const void * _Nonnull key,<br>                              id _Nullable value,<br>                              objc_AssociationPolicy policy)<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> 2.通过key获取关联的属性</span><br><span class="hljs-comment"> @param object 从哪个对象中获取关联属性</span><br><span class="hljs-comment"> @param key 关联属性对应的key</span><br><span class="hljs-comment"> @return 返回关联属性的值</span><br><span class="hljs-comment"> */</span><br>id _Nullable objc_getAssociatedObject(id _Nonnull object,<br>                                      const void * _Nonnull key)<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> 3.移除对象所关联的属性</span><br><span class="hljs-comment"> @param object 移除某个对象的所有关联属性</span><br><span class="hljs-comment"> */</span><br>void objc_removeAssociatedObjects(id _Nonnull object)<br></code></pre></td></tr></table></figure><p>注意：key与关联属性一一对应，我们必须确保其全局唯一性，常用我们使用@selector(methodName)作为key。</p><p>现在演示一个代码示例：为UIImage增加一个分类：UIImage+Tools，并为其设置关联属性urlString(图片网络链接属性），相关代码如下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-comment">//UIImage+Tools.h文件中</span><br><span class="hljs-type">UIImage</span>+<span class="hljs-type">Tools</span>.m<br>@interface <span class="hljs-type">UIImage</span> (<span class="hljs-type">Tools</span>)<br><span class="hljs-comment">//添加一个新属性：图片网络链接</span><br>@property(nonatomic,copy)<span class="hljs-type">NSString</span> *urlString;<br>@end<br></code></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-comment">//UIImage+Tools.m文件中</span><br>#<span class="hljs-keyword">import</span> &quot;UIImage+Tools.h&quot;<br>#<span class="hljs-keyword">import</span> &lt;objc/runtime.h&gt;<br>@implementation <span class="hljs-type">UIImage</span> (<span class="hljs-type">Tools</span>)<br><span class="hljs-comment">//set方法</span><br>- (void)setUrlString:(<span class="hljs-type">NSString</span> *)urlString&#123;<br>    objc_setAssociatedObject(<span class="hljs-keyword">self</span>,<br>                             @selector(urlString),<br>                             urlString,<br>                             <span class="hljs-type">OBJC_ASSOCIATION_RETAIN_NONATOMIC</span>);<br>&#125;<br><span class="hljs-comment">//get方法</span><br>- (<span class="hljs-type">NSString</span> *)urlString&#123;<br>    <span class="hljs-keyword">return</span> objc_getAssociatedObject(<span class="hljs-keyword">self</span>,<br>                                    @selector(urlString));<br>&#125;<br><span class="hljs-comment">//添加一个自定义方法，用于清除所有关联属性</span><br>- (void)clearAssociatedObjcet&#123;<br>    objc_removeAssociatedObjects(<span class="hljs-keyword">self</span>);<br>&#125;<br>@end<br></code></pre></td></tr></table></figure><p>测试文件中:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-type">UIImage</span> *image = [[<span class="hljs-type">UIImage</span> alloc] <span class="hljs-keyword">init</span>];<br>image.urlString = @<span class="hljs-string">&quot;http://www.image.png&quot;</span>;<br><span class="hljs-type">NSLog</span>(@<span class="hljs-string">&quot;获取关联属性：%@&quot;</span>,image.urlString);<br>    <br>[image clearAssociatedObjcet];<br><span class="hljs-type">NSLog</span>(@<span class="hljs-string">&quot;获取关联属性：%@&quot;</span>,image.urlString);<br><span class="hljs-comment">//打印：</span><br><span class="hljs-comment">//获取关联属性：http://www.image.png</span><br><span class="hljs-comment">// 获取关联属性：(null)</span><br></code></pre></td></tr></table></figure><h1 id="3-获取类的详细信息"><a href="#3-获取类的详细信息" class="headerlink" title="3. 获取类的详细信息"></a>3. 获取类的详细信息</h1><h2 id="3-1-获取属性列表"><a href="#3-1-获取属性列表" class="headerlink" title="3.1 获取属性列表"></a>3.1 获取属性列表</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs swift">unsigned int <span class="hljs-built_in">count</span>;<br>objc_property_t *propertyList = class_copyPropertyList([<span class="hljs-keyword">self</span> <span class="hljs-class"><span class="hljs-keyword">class</span>], &amp;<span class="hljs-title">count</span>);</span><br><span class="hljs-class"><span class="hljs-title">for</span> (<span class="hljs-title">unsigned</span> <span class="hljs-title">int</span> <span class="hljs-title">i</span> = 0; <span class="hljs-title">i</span>&lt;<span class="hljs-title">count</span>; <span class="hljs-title">i</span>++) </span>&#123;<br>    const char *propertyName = property_getName(propertyList[i]);<br>    <span class="hljs-type">NSLog</span>(@<span class="hljs-string">&quot;PropertyName(%d): %@&quot;</span>,i,[<span class="hljs-type">NSString</span> stringWithUTF8String:propertyName]);<br>&#125;<br>free(propertyList);<br></code></pre></td></tr></table></figure><h2 id="3-2-获取所有成员变量"><a href="#3-2-获取所有成员变量" class="headerlink" title="3.2 获取所有成员变量"></a>3.2 获取所有成员变量</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-type">Ivar</span> *ivarList = class_copyIvarList([<span class="hljs-keyword">self</span> <span class="hljs-class"><span class="hljs-keyword">class</span>], &amp;<span class="hljs-title">count</span>);</span><br><span class="hljs-class"><span class="hljs-title">for</span> (<span class="hljs-title">int</span> <span class="hljs-title">i</span>= 0; <span class="hljs-title">i</span>&lt;<span class="hljs-title">count</span>; <span class="hljs-title">i</span>++) </span>&#123;<br>    <span class="hljs-type">Ivar</span> ivar = ivarList[i];<br>    const char *ivarName = ivar_getName(ivar);<br>    <span class="hljs-type">NSLog</span>(@<span class="hljs-string">&quot;Ivar(%d): %@&quot;</span>, i, [<span class="hljs-type">NSString</span> stringWithUTF8String:ivarName]);<br>&#125;<br>free(ivarList);<br></code></pre></td></tr></table></figure><h2 id="3-3-获取所有方法"><a href="#3-3-获取所有方法" class="headerlink" title="3.3 获取所有方法"></a>3.3 获取所有方法</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-type">Method</span> *methodList = class_copyMethodList([<span class="hljs-keyword">self</span> <span class="hljs-class"><span class="hljs-keyword">class</span>], &amp;<span class="hljs-title">count</span>);</span><br><span class="hljs-class"><span class="hljs-title">for</span> (<span class="hljs-title">unsigned</span> <span class="hljs-title">int</span> <span class="hljs-title">i</span> = 0; <span class="hljs-title">i</span>&lt;<span class="hljs-title">count</span>; <span class="hljs-title">i</span>++) </span>&#123;<br>    <span class="hljs-type">Method</span> method = methodList[i];<br>    <span class="hljs-type">SEL</span> mthodName = method_getName(method);<br>    <span class="hljs-type">NSLog</span>(@<span class="hljs-string">&quot;MethodName(%d): %@&quot;</span>,i,<span class="hljs-type">NSStringFromSelector</span>(mthodName));<br>&#125;<br>free(methodList);<br></code></pre></td></tr></table></figure><h2 id="3-4-获取当前遵循的所有协议"><a href="#3-4-获取当前遵循的所有协议" class="headerlink" title="3.4 获取当前遵循的所有协议"></a>3.4 获取当前遵循的所有协议</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs swift">__unsafe_unretained <span class="hljs-type">Protocol</span> **protocolList = class_copyProtocolList([<span class="hljs-keyword">self</span> <span class="hljs-class"><span class="hljs-keyword">class</span>], &amp;<span class="hljs-title">count</span>);</span><br><span class="hljs-class"><span class="hljs-title">for</span> (<span class="hljs-title">int</span> <span class="hljs-title">i</span>=0; <span class="hljs-title">i</span>&lt;<span class="hljs-title">count</span>; <span class="hljs-title">i</span>++) </span>&#123;<br>    <span class="hljs-type">Protocol</span> *protocal = protocolList[i];<br>    const char *protocolName = protocol_getName(protocal);<br>    <span class="hljs-type">NSLog</span>(@<span class="hljs-string">&quot;protocol(%d): %@&quot;</span>,i, [<span class="hljs-type">NSString</span> stringWithUTF8String:protocolName]);<br>&#125;<br>free(propertyList);<br></code></pre></td></tr></table></figure><p><strong>注意：C语言中使用Copy操作的方法，要注意释放指针，防止内存泄漏</strong></p><h1 id="4-解决同一方法高频率调用的效率问题"><a href="#4-解决同一方法高频率调用的效率问题" class="headerlink" title="4. 解决同一方法高频率调用的效率问题"></a>4. 解决同一方法高频率调用的效率问题</h1><p>Runtime源码中的IMP作为函数指针，指向方法的实现。通过它，我们可以绕开发送消息的过程来提高函数调用的效率。当我们需要持续大量重复调用某个方法的时候，会十分有用，具体代码示例如下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs swift">void (*setter)(id, <span class="hljs-type">SEL</span>, <span class="hljs-type">BOOL</span>);<br>int i;<br><br>setter = (void (*)(id, <span class="hljs-type">SEL</span>, <span class="hljs-type">BOOL</span>))[target methodForSelector:@selector(setFilled:)];<br><span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span> ; i &lt; <span class="hljs-number">1000</span> ; i++ )<br>    setter(targetList[i], @selector(setFilled:), <span class="hljs-type">YES</span>);<br></code></pre></td></tr></table></figure><h1 id="5-方法动态解析与消息转发"><a href="#5-方法动态解析与消息转发" class="headerlink" title="5. 方法动态解析与消息转发"></a>5. 方法动态解析与消息转发</h1><p>其实该部分可以参考基础篇中内容，这里不再重复赘述，只是大概做出一些总结。</p><h2 id="5-1-动态方法解析：动态添加方法"><a href="#5-1-动态方法解析：动态添加方法" class="headerlink" title="5.1 动态方法解析：动态添加方法"></a>5.1 动态方法解析：动态添加方法</h2><p>Runtime足够强大，能够让我们在运行时动态添加一个未实现的方法，这个功能主要有两个应用场景：<br> <strong>场景1</strong>：动态添加未实现方法，解决代码中因为方法未找到而报错的问题；<br> <strong>场景2</strong>：利用懒加载思路，若一个类有很多个方法，同时加载到内存中会耗费资源，可以使用动态解析添加方法。方法动态解析主要用到的方法如下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-comment">//OC方法：</span><br><span class="hljs-comment">//类方法未找到时调起，可于此添加类方法实现</span><br>+ (<span class="hljs-type">BOOL</span>)resolveClassMethod:(<span class="hljs-type">SEL</span>)sel<br><br><span class="hljs-comment">//实例方法未找到时调起，可于此添加实例方法实现</span><br>+ (<span class="hljs-type">BOOL</span>)resolveInstanceMethod:(<span class="hljs-type">SEL</span>)sel<br><br><span class="hljs-comment">//Runtime方法：</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> 运行时方法：向指定类中添加特定方法实现的操作</span><br><span class="hljs-comment"> @param cls 被添加方法的类</span><br><span class="hljs-comment"> @param name selector方法名</span><br><span class="hljs-comment"> @param imp 指向实现方法的函数指针</span><br><span class="hljs-comment"> @param types imp函数实现的返回值与参数类型</span><br><span class="hljs-comment"> @return 添加方法是否成功</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">BOOL</span> class_addMethod(<span class="hljs-type">Class</span> _Nullable cls,<br>                     <span class="hljs-type">SEL</span> _Nonnull name,<br>                     <span class="hljs-type">IMP</span> _Nonnull imp,<br>                     const char * _Nullable types)<br></code></pre></td></tr></table></figure><h2 id="5-2-解决方法无响应崩溃问题"><a href="#5-2-解决方法无响应崩溃问题" class="headerlink" title="5.2 解决方法无响应崩溃问题"></a>5.2 解决方法无响应崩溃问题</h2><p>执行OC方法其实就是一个发送消息的过程，若方法未实现，我们可以利用方法动态解析与消息转发来避免程序崩溃，这主要涉及下面一个处理未实现消息的过程：</p><img src="/2021/11/02/Runtime-Part2/lct.png" class="" title="消息转发流程图"><p>除了上述的方法动态解析，还使用到的相关方法如下：<br> 消息接收者重定向</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-comment">//重定向类方法的消息接收者，返回一个类</span><br>- (id)forwardingTargetForSelector:(<span class="hljs-type">SEL</span>)aSelector<br><br><span class="hljs-comment">//重定向实例方法的消息接受者，返回一个实例对象</span><br>- (id)forwardingTargetForSelector:(<span class="hljs-type">SEL</span>)aSelector<br></code></pre></td></tr></table></figure><p>消息重定向</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs swift">- (void)forwardInvocation:(<span class="hljs-type">NSInvocation</span> *)anInvocation；<br><br>- (<span class="hljs-type">NSMethodSignature</span>*)methodSignatureForSelector:(<span class="hljs-type">SEL</span>)aSelector;<br></code></pre></td></tr></table></figure><h1 id="6-动态操作属性"><a href="#6-动态操作属性" class="headerlink" title="6. 动态操作属性"></a>6. 动态操作属性</h1><h2 id="6-1-动态修改属性变量"><a href="#6-1-动态修改属性变量" class="headerlink" title="6.1 动态修改属性变量"></a>6.1 动态修改属性变量</h2><p>现在假设这样一个情况：我们使用第三方框架里的Person类，在特殊需求下想要更改其私有属性nickName，这样的操作我们就可以使用Runtime可以动态修改对象属性。</p><p>基本思路：首先使用Runtime获取Peson对象的所有属性，找到nickName，然后使用ivar的方法修改其值。具体的代码示例如下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-type">Person</span> *ps = [[<span class="hljs-type">Person</span> alloc] <span class="hljs-keyword">init</span>];<br><span class="hljs-type">NSLog</span>(@<span class="hljs-string">&quot;ps-nickName: %@&quot;</span>,[ps valueForKey:@<span class="hljs-string">&quot;nickName&quot;</span>]); <span class="hljs-comment">//null</span><br><span class="hljs-comment">//第一步：遍历对象的所有属性</span><br>unsigned int <span class="hljs-built_in">count</span>;<br><span class="hljs-type">Ivar</span> *ivarList = class_copyIvarList([ps <span class="hljs-class"><span class="hljs-keyword">class</span>], &amp;<span class="hljs-title">count</span>);</span><br><span class="hljs-class"><span class="hljs-title">for</span> (<span class="hljs-title">int</span> <span class="hljs-title">i</span>= 0; <span class="hljs-title">i</span>&lt;<span class="hljs-title">count</span>; <span class="hljs-title">i</span>++) </span>&#123;<br>    <span class="hljs-comment">//第二步：获取每个属性名</span><br>    <span class="hljs-type">Ivar</span> ivar = ivarList[i];<br>    const char *ivarName = ivar_getName(ivar);<br>    <span class="hljs-type">NSString</span> *propertyName = [<span class="hljs-type">NSString</span> stringWithUTF8String:ivarName];<br>    <span class="hljs-keyword">if</span> ([propertyName isEqualToString:@<span class="hljs-string">&quot;_nickName&quot;</span>]) &#123;<br>        <span class="hljs-comment">//第三步：匹配到对应的属性，然后修改；注意属性带有下划线</span><br>        object_setIvar(ps, ivar, @<span class="hljs-string">&quot;梧雨北辰&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-type">NSLog</span>(@<span class="hljs-string">&quot;ps-nickName: %@&quot;</span>,[ps valueForKey:@<span class="hljs-string">&quot;nickName&quot;</span>]); <span class="hljs-comment">//梧雨北辰</span><br></code></pre></td></tr></table></figure><p>总结：此过程类似KVC的取值和赋值</p><h2 id="6-2-实现-NSCoding-的自动归档和解档"><a href="#6-2-实现-NSCoding-的自动归档和解档" class="headerlink" title="6.2 实现 NSCoding 的自动归档和解档"></a>6.2 实现 NSCoding 的自动归档和解档</h2><p>归档是一种常用的轻量型文件存储方式，但是它有个弊端：在归档过程中，若一个Model有多个属性，我们不得不对每个属性进行处理，非常繁琐。<br> 归档操作主要涉及两个方法：encodeObject 和 decodeObjectForKey，现在，我们可以利用Runtime来改进它们，关键的代码示例如下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-comment">//原理：使用Runtime动态获取所有属性</span><br><span class="hljs-comment">//解档操作</span><br>- (instancetype)initWithCoder:(<span class="hljs-type">NSCoder</span> *)aDecoder&#123;<br>    <span class="hljs-keyword">self</span> = [<span class="hljs-keyword">super</span> <span class="hljs-keyword">init</span>];<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">self</span>) &#123;<br>        unsigned int <span class="hljs-built_in">count</span> = <span class="hljs-number">0</span>;<br>        <br>        <span class="hljs-type">Ivar</span> *ivarList = class_copyIvarList([<span class="hljs-keyword">self</span> <span class="hljs-class"><span class="hljs-keyword">class</span>], &amp;<span class="hljs-title">count</span>);</span><br><span class="hljs-class">        <span class="hljs-title">for</span> (<span class="hljs-title">int</span> <span class="hljs-title">i</span> = 0; <span class="hljs-title">i</span> &lt; <span class="hljs-title">count</span>; <span class="hljs-title">i</span>++) </span>&#123;<br>            <span class="hljs-type">Ivar</span> ivar = ivarList[i];<br>            const char *ivarName = ivar_getName(ivar);<br>            <span class="hljs-type">NSString</span> *key = [<span class="hljs-type">NSString</span> stringWithUTF8String:ivarName];<br>            id value = [aDecoder decodeObjectForKey:key];<br>            [<span class="hljs-keyword">self</span> setValue:value forKey:key];<br>        &#125;<br>        free(ivarList); <span class="hljs-comment">//释放指针</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">self</span>;<br>&#125;<br><br><span class="hljs-comment">//归档操作</span><br>- (void)encodeWithCoder:(<span class="hljs-type">NSCoder</span> *)aCoder&#123;<br>    unsigned int <span class="hljs-built_in">count</span> = <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-type">Ivar</span> *ivarList = class_copyIvarList([<span class="hljs-keyword">self</span> <span class="hljs-class"><span class="hljs-keyword">class</span>], &amp;<span class="hljs-title">count</span>);</span><br><span class="hljs-class">    <span class="hljs-title">for</span> (<span class="hljs-title">NSInteger</span> <span class="hljs-title">i</span> = 0; <span class="hljs-title">i</span> &lt; <span class="hljs-title">count</span>; <span class="hljs-title">i</span>++) </span>&#123;<br>        <span class="hljs-type">Ivar</span> ivar = ivarList[i];<br>        <span class="hljs-type">NSString</span> *key = [<span class="hljs-type">NSString</span> stringWithUTF8String:ivar_getName(ivar)];<br>        <br>        id value = [<span class="hljs-keyword">self</span> valueForKey:key];<br>        [aCoder encodeObject:value forKey:key];<br>    &#125;<br>    free(ivarList); <span class="hljs-comment">//释放指针</span><br>&#125;<br></code></pre></td></tr></table></figure><p>下面是有关归档的测试代码：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-comment">//--测试归档</span><br><span class="hljs-type">Person</span> *ps = [[<span class="hljs-type">Person</span> alloc] <span class="hljs-keyword">init</span>];<br>ps.name = @<span class="hljs-string">&quot;梧雨北辰&quot;</span>;<br>ps.age  = <span class="hljs-number">18</span>;<br><span class="hljs-type">NSString</span> *temp = <span class="hljs-type">NSTemporaryDirectory</span>();<br><span class="hljs-type">NSString</span> *fileTemp = [temp stringByAppendingString:@<span class="hljs-string">&quot;person.archive&quot;</span>];<br>[<span class="hljs-type">NSKeyedArchiver</span> archiveRootObject:ps toFile:fileTemp];<br><br><span class="hljs-comment">//--测试解档</span><br><span class="hljs-type">NSString</span> *temp = <span class="hljs-type">NSTemporaryDirectory</span>();<br><span class="hljs-type">NSString</span> *fileTemp = [temp stringByAppendingString:@<span class="hljs-string">&quot;person.henry&quot;</span>];<br><span class="hljs-type">Person</span> *person = [<span class="hljs-type">NSKeyedUnarchiver</span> unarchiveObjectWithFile:fileTemp];<br><span class="hljs-type">NSLog</span>(@<span class="hljs-string">&quot;person-name:%@，person-age:%ld&quot;</span>,person.name,person.age); <br><span class="hljs-comment">//person-name:梧雨北辰，person-age:18</span><br></code></pre></td></tr></table></figure><h2 id="6-3-实现字典与模型的转换"><a href="#6-3-实现字典与模型的转换" class="headerlink" title="6.3 实现字典与模型的转换"></a>6.3 实现字典与模型的转换</h2><p>字典数据转模型的操作在项目开发中很常见，通常我们会选择第三方如YYModel；其实我们也可以自己来实现这一功能，主要的思路有两种：KVC、Runtime，总结字典转化模型过程中需要解决的问题如下：</p><img src="/2021/11/02/Runtime-Part2/zdzmx.png" class="" title="字典转模型"><p>现在，我们使用Runtime来实现字典转模型的操作，大致的思路是这样：<br> <strong><em>借助Runtime可以动态获取成员列表的特性，遍历模型中所有属性，然后以获取到的属性名为key，在JSON字典中寻找对应的值value；再将每一个对应Value赋值给模型，就完成了字典转模型的目的\</em></strong>。</p><p>首先准备下面的JSON数据用于测试：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>    <span class="hljs-attr">&quot;id&quot;</span>:<span class="hljs-string">&quot;2462079046&quot;</span>,<br>    <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;梧雨北辰&quot;</span>,<br>    <span class="hljs-attr">&quot;age&quot;</span>:<span class="hljs-string">&quot;18&quot;</span>,<br>    <span class="hljs-attr">&quot;weight&quot;</span>:<span class="hljs-number">140</span>,<br>    <span class="hljs-attr">&quot;address&quot;</span>:&#123;<br>            <span class="hljs-attr">&quot;country&quot;</span>:<span class="hljs-string">&quot;中国&quot;</span>,<br>            <span class="hljs-attr">&quot;province&quot;</span>: <span class="hljs-string">&quot;河南&quot;</span><br>            &#125;,<br>    <span class="hljs-attr">&quot;courses&quot;</span>:[&#123;<br>               <span class="hljs-attr">&quot;name&quot;</span>:<span class="hljs-string">&quot;Chinese&quot;</span>,<br>               <span class="hljs-attr">&quot;desc&quot;</span>:<span class="hljs-string">&quot;语文课&quot;</span><br>    &#125;,&#123;<br>               <span class="hljs-attr">&quot;name&quot;</span>:<span class="hljs-string">&quot;Math&quot;</span>,<br>               <span class="hljs-attr">&quot;desc&quot;</span>:<span class="hljs-string">&quot;数学课&quot;</span><br>    &#125;,&#123;<br>               <span class="hljs-attr">&quot;name&quot;</span>:<span class="hljs-string">&quot;English&quot;</span>,<br>               <span class="hljs-attr">&quot;desc&quot;</span>:<span class="hljs-string">&quot;英语课&quot;</span><br>    &#125;<br>    ]<br>&#125;<br></code></pre></td></tr></table></figure><p>具体的代码实现流程如下：</p><h3 id="步骤1：创建NSObject的类目NSObject-ZSModel，用于实现字典转模型"><a href="#步骤1：创建NSObject的类目NSObject-ZSModel，用于实现字典转模型" class="headerlink" title="步骤1：创建NSObject的类目NSObject+ZSModel，用于实现字典转模型"></a>步骤1：创建NSObject的类目NSObject+ZSModel，用于实现字典转模型</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs swift">@interface <span class="hljs-type">NSObject</span> (<span class="hljs-type">ZSModel</span>)<br>+ (instancetype)zs_modelWithDictionary:(<span class="hljs-type">NSDictionary</span> *)dictionary;<br>@end<br><br><span class="hljs-comment">//ZSModel协议，协议方法可以返回一个字典，表明特殊字段的处理规则</span><br>@<span class="hljs-class"><span class="hljs-keyword">protocol</span> <span class="hljs-title">ZSModel</span>&lt;<span class="hljs-title">NSObject</span>&gt;</span><br><span class="hljs-class">@<span class="hljs-title">optional</span></span><br><span class="hljs-class">+ (<span class="hljs-title">nullable</span> <span class="hljs-title">NSDictionary</span>&lt;<span class="hljs-title">NSString</span> *, <span class="hljs-title">id</span>&gt; *)<span class="hljs-title">modelContainerPropertyGenericClass</span>;</span><br><span class="hljs-class">@<span class="hljs-title">end</span>;</span><br></code></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs swift">#<span class="hljs-keyword">import</span> &quot;NSObject+ZSModel.h&quot;<br>#<span class="hljs-keyword">import</span> &lt;objc/runtime.h&gt;<br>@implementation <span class="hljs-type">NSObject</span> (<span class="hljs-type">ZSModel</span>)<br>+ (instancetype)zs_modelWithDictionary:(<span class="hljs-type">NSDictionary</span> *)dictionary&#123;<br>    <br>    <span class="hljs-comment">//创建当前模型对象</span><br>    id object = [[<span class="hljs-keyword">self</span> alloc] <span class="hljs-keyword">init</span>];<br>    <span class="hljs-comment">//1.获取当前对象的成员变量列表</span><br>    unsigned int <span class="hljs-built_in">count</span> = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">Ivar</span> *ivarList = class_copyIvarList([<span class="hljs-keyword">self</span> <span class="hljs-class"><span class="hljs-keyword">class</span>], &amp;<span class="hljs-title">count</span>);</span><br><span class="hljs-class">    </span><br><span class="hljs-class">    //2.遍历<span class="hljs-title">ivarList</span>中所有成员变量，以其属性名为<span class="hljs-title">key</span>，在字典中查找<span class="hljs-title">Value</span></span><br><span class="hljs-class">    <span class="hljs-title">for</span> (<span class="hljs-title">int</span> <span class="hljs-title">i</span>= 0; <span class="hljs-title">i</span>&lt;<span class="hljs-title">count</span>; <span class="hljs-title">i</span>++) </span>&#123;<br>        <span class="hljs-comment">//2.1获取成员属性</span><br>        <span class="hljs-type">Ivar</span> ivar = ivarList[i];<br>        <span class="hljs-type">NSString</span> *ivarName = [<span class="hljs-type">NSString</span> stringWithUTF8String:ivar_getName(ivar)] ;<br>        <br>        <span class="hljs-comment">//2.2截取成员变量名：去掉成员变量前面的&quot;_&quot;号</span><br>        <span class="hljs-type">NSString</span> *propertyName = [ivarName substringFromIndex:<span class="hljs-number">1</span>];<br>        <br>        <span class="hljs-comment">//2.3以属性名为key，在字典中查找value</span><br>        id value = dictionary[propertyName];<br>        <br>        <span class="hljs-comment">//3.获取成员变量类型, 因为ivar_getTypeEncoding获取的类型是&quot;@\&quot;NSString\&quot;&quot;的形式</span><br>        <span class="hljs-comment">//所以我们要做以下的替换</span><br>        <span class="hljs-type">NSString</span> *ivarType = [<span class="hljs-type">NSString</span> stringWithUTF8String:ivar_getTypeEncoding(ivar)];<span class="hljs-comment">// 替换:</span><br>        <span class="hljs-comment">//3.1去除转义字符：@\&quot;name\&quot; -&gt; @&quot;name&quot;</span><br>        ivarType = [ivarType stringByReplacingOccurrencesOfString:@<span class="hljs-string">&quot;\&quot;&quot;</span> withString:@<span class="hljs-string">&quot;&quot;</span>];<br>        <span class="hljs-comment">//3.2去除@符号</span><br>        ivarType = [ivarType stringByReplacingOccurrencesOfString:@<span class="hljs-string">&quot;@&quot;</span> withString:@<span class="hljs-string">&quot;&quot;</span>];<br>        <br>        <span class="hljs-comment">//4.对特殊成员变量进行处理：</span><br>        <span class="hljs-comment">//判断当前类是否实现了协议方法，获取协议方法中规定的特殊变量的处理方式</span><br>        <span class="hljs-type">NSDictionary</span> *perpertyTypeDic;<br>        <span class="hljs-keyword">if</span>([<span class="hljs-keyword">self</span> respondsToSelector:@selector(modelContainerPropertyGenericClass)])&#123;<br>            perpertyTypeDic = [<span class="hljs-keyword">self</span> performSelector:@selector(modelContainerPropertyGenericClass) withObject:<span class="hljs-literal">nil</span>];<br>        &#125;<br>        <br>        <span class="hljs-comment">//4.1处理：字典的key与模型属性不匹配的问题，如id-&gt;uid</span><br>        id anotherName = perpertyTypeDic[propertyName];<br>        <span class="hljs-keyword">if</span>(anotherName &amp;&amp; [anotherName isKindOfClass:[<span class="hljs-type">NSString</span> <span class="hljs-class"><span class="hljs-keyword">class</span>]])</span>&#123;<br>            value =  dictionary[anotherName];<br>        &#125;<br>        <br>        <span class="hljs-comment">//4.2.处理：模型嵌套模型</span><br>        <span class="hljs-keyword">if</span> ([value isKindOfClass:[<span class="hljs-type">NSDictionary</span> <span class="hljs-class"><span class="hljs-keyword">class</span>]] &amp;&amp; ![<span class="hljs-title">ivarType</span> <span class="hljs-title">hasPrefix</span>:@&quot;<span class="hljs-title">NS</span>&quot;]) </span>&#123;<br>            <span class="hljs-type">Class</span> modelClass = <span class="hljs-type">NSClassFromString</span>(ivarType);<br>            <span class="hljs-keyword">if</span> (modelClass != <span class="hljs-literal">nil</span>) &#123;<br>                <span class="hljs-comment">//将被嵌套字典数据也转化成Model</span><br>                value = [modelClass zs_modelWithDictionary:value];<br>            &#125;<br>        &#125;<br>        <br>        <span class="hljs-comment">//4.3处理：模型嵌套模型数组</span><br>        <span class="hljs-comment">//判断当前Vaue是一个数组，而且存在协议方法返回了perpertyTypeDic</span><br>        <span class="hljs-keyword">if</span> ([value isKindOfClass:[<span class="hljs-type">NSArray</span> <span class="hljs-class"><span class="hljs-keyword">class</span>]] &amp;&amp; <span class="hljs-title">perpertyTypeDic</span>) </span>&#123;<br>            <span class="hljs-type">Class</span> itemModelClass = perpertyTypeDic[propertyName];<br>            <span class="hljs-comment">//封装数组：将每一个子数据转化为Model</span><br>            <span class="hljs-type">NSMutableArray</span> *itemArray = @[].mutableCopy;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">NSDictionary</span> *itemDic  <span class="hljs-keyword">in</span> value) &#123;<br>                id model = [itemModelClass zs_modelWithDictionary:itemDic];<br>                [itemArray addObject:model];<br>            &#125;<br>            value = itemArray;<br>        &#125;<br>        <br>        <span class="hljs-comment">//5.使用KVC方法将Vlue更新到object中</span><br>        <span class="hljs-keyword">if</span> (value != <span class="hljs-literal">nil</span>) &#123;<br>            [object setValue:value forKey:propertyName];<br>        &#125;<br>    &#125;<br>    free(ivarList); <span class="hljs-comment">//释放C指针</span><br>    <span class="hljs-keyword">return</span> object;<br>&#125;<br>@end<br></code></pre></td></tr></table></figure><h3 id="步骤2：分别创建各个数据模型Student、Address、Course"><a href="#步骤2：分别创建各个数据模型Student、Address、Course" class="headerlink" title="步骤2：分别创建各个数据模型Student、Address、Course"></a>步骤2：分别创建各个数据模型Student、Address、Course</h3><p><strong>Student类</strong>：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-comment">//Student.h文件</span><br>#<span class="hljs-keyword">import</span> &quot;NSObject+ZSModel.h&quot;<br>#<span class="hljs-keyword">import</span> &quot;AddressModel.h&quot;<br>#<span class="hljs-keyword">import</span> &quot;CourseModel.h&quot;<br>@interface <span class="hljs-type">StudentModel</span> : <span class="hljs-type">NSObject</span>&lt;<span class="hljs-type">ZSModel</span>&gt; <span class="hljs-comment">//遵循协议</span><br><span class="hljs-comment">//普通属性</span><br>@property (nonatomic, copy) <span class="hljs-type">NSString</span> *uid;<br>@property(nonatomic,copy)<span class="hljs-type">NSString</span> *name;<br>@property (nonatomic, assign) <span class="hljs-type">NSInteger</span> age;<br><span class="hljs-comment">//嵌套模型</span><br>@property (nonatomic, strong) <span class="hljs-type">AddressModel</span> *address;<br><span class="hljs-comment">//嵌套模型数组</span><br>@property (nonatomic, strong) <span class="hljs-type">NSArray</span> *courses;<br>@end<br></code></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs swift">#<span class="hljs-keyword">import</span> &quot;StudentModel.h&quot;<br>@implementation <span class="hljs-type">StudentModel</span><br>+ (<span class="hljs-type">NSDictionary</span> *)modelContainerPropertyGenericClass &#123;<br>    <span class="hljs-comment">//需要特别处理的属性</span><br>    <span class="hljs-keyword">return</span> @&#123;@<span class="hljs-string">&quot;courses&quot;</span> : [<span class="hljs-type">CourseModel</span> <span class="hljs-class"><span class="hljs-keyword">class</span>],@&quot;<span class="hljs-title">uid</span>&quot;:@&quot;<span class="hljs-title">id</span>&quot;&#125;;</span><br><span class="hljs-class">&#125;</span><br><span class="hljs-class">@<span class="hljs-title">end</span></span><br></code></pre></td></tr></table></figure><p><strong>Address类</strong>：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-comment">//AddressModel.h文件</span><br>@interface <span class="hljs-type">AddressModel</span> : <span class="hljs-type">NSObject</span><br>@property (nonatomic, copy) <span class="hljs-type">NSString</span> *country;  <span class="hljs-comment">//国籍</span><br>@property (nonatomic, copy) <span class="hljs-type">NSString</span> *province; <span class="hljs-comment">//省份</span><br>@property (nonatomic, copy) <span class="hljs-type">NSString</span> *city;     <span class="hljs-comment">//城市</span><br>@end<br><br><span class="hljs-comment">//-----------------优美的分割线------------------------</span><br><span class="hljs-comment">//AddressModel.m文件</span><br>#<span class="hljs-keyword">import</span> &quot;AddressModel.h&quot;<br>@implementation <span class="hljs-type">AddressModel</span><br>@end<br></code></pre></td></tr></table></figure><p><strong>Course类</strong>：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs swift">@interface <span class="hljs-type">CourseModel</span> : <span class="hljs-type">NSObject</span><br>@property (nonatomic, copy) <span class="hljs-type">NSString</span> *name; <span class="hljs-comment">//课程名</span><br>@property (nonatomic, copy) <span class="hljs-type">NSString</span> *desc; <span class="hljs-comment">//课程介绍</span><br>@end<br><br><span class="hljs-comment">//-----------------优美的分割线------------------------</span><br> #<span class="hljs-keyword">import</span> &quot;CourseModel.h&quot;<br>@implementation <span class="hljs-type">CourseModel</span><br>@end<br></code></pre></td></tr></table></figure><h3 id="步骤4：测试字典转模型操作"><a href="#步骤4：测试字典转模型操作" class="headerlink" title="步骤4：测试字典转模型操作"></a>步骤4：测试字典转模型操作</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-comment">//读取JSON数据</span><br><span class="hljs-type">NSDictionary</span> *jsonData = [<span class="hljs-type">FileTools</span> getDictionaryFromJsonFile:@<span class="hljs-string">&quot;Student&quot;</span>];<br><span class="hljs-type">NSLog</span>(@<span class="hljs-string">&quot;%@&quot;</span>,jsonData);<br><br><span class="hljs-comment">//字典转模型</span><br><span class="hljs-type">StudentModel</span> *student = [<span class="hljs-type">StudentModel</span> zs_modelWithDictionary:jsonData];<br><span class="hljs-type">CourseModel</span> *courseModel = student.courses[<span class="hljs-number">0</span>];<br><span class="hljs-type">NSLog</span>(@<span class="hljs-string">&quot;%@&quot;</span>,courseModel.name);<br></code></pre></td></tr></table></figure><h1 id="最后总结"><a href="#最后总结" class="headerlink" title="最后总结"></a>最后总结</h1><img src="/2021/11/02/Runtime-Part2/1244124-6037157.png" class="" width="1244124"><p>以上就是我们在实际开发中常用的Runtime的操作了，Runtime的强大作用远不止如此。深入的了解和学习Runtime，不仅仅有助于iOS开发，而且对于理解编程语言的底层原理也十分有用，Keep Learning！~</p><p>参考链接：</p><ol><li><a href="https://links.jianshu.com/go?to=https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Introduction/Introduction.html%23//apple_ref/doc/uid/TP40008048">Objective-C Runtime Programming Guide</a></li><li><a href="https://links.jianshu.com/go?to=%5Bhttp://nshipster.cn/method-swizzling/%5D(http://nshipster.cn/method-swizzling/)">Method Swizzling</a></li><li><a href="https://links.jianshu.com/go?to=https://www.cnblogs.com/wuqh-iOS/p/4846811.html">iOS数据持久化存储:归档</a></li><li><a href="https://links.jianshu.com/go?to=https://github.com/ibireme/YYModel">YYModel源码</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
      <category>iOS进阶</category>
      
    </categories>
    
    
    <tags>
      
      <tag>iOS</tag>
      
      <tag>Runtime</tag>
      
      <tag>基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Runtime - 基础篇</title>
    <link href="/2021/11/01/Runtime-Part1/"/>
    <url>/2021/11/01/Runtime-Part1/</url>
    
    <content type="html"><![CDATA[<h1 id="1-什么是动态语言，什么是Runtime？"><a href="#1-什么是动态语言，什么是Runtime？" class="headerlink" title="1. 什么是动态语言，什么是Runtime？"></a>1. 什么是动态语言，什么是Runtime？</h1><h2 id="静态语言-强类型语言-："><a href="#静态语言-强类型语言-：" class="headerlink" title="静态语言(强类型语言)："></a>静态语言(强类型语言)：</h2><p>静态语言是在编译时就要确定变量的数据类型，也就是变量使用之前必须声明数据类型。如：C、C++、Java、C#等。</p><h2 id="动态语言-弱类型语言"><a href="#动态语言-弱类型语言" class="headerlink" title="动态语言(弱类型语言):"></a>动态语言(弱类型语言):</h2><p>动态语言是在运行时才去做数据类型检查的语言，变量使用之前不需要类型声明，通常变量的类型是被赋值的那个值的类型。如：PHP、Ruby、Shell、Python等一些脚本语言。</p><h2 id="为什么说OC是一门动态语言"><a href="#为什么说OC是一门动态语言" class="headerlink" title="为什么说OC是一门动态语言:"></a>为什么说OC是一门动态语言:</h2><p>静态、动态是相对的，这里动态语言指的是不需要再编译阶段就确定所有变量方法等，还可以在运行时动态的添加。 Objective-C，在C语言的基础上添加了面向对象的特性，并且通过Runtime这个运行时机制，在运行时可以动态的添加变量，方法，类等，所以说Objective-C是一门动态语言。</p><h2 id="OC的动态性"><a href="#OC的动态性" class="headerlink" title="OC的动态性:"></a>OC的动态性:</h2><h3 id="1-1-动态类型"><a href="#1-1-动态类型" class="headerlink" title="1.1 动态类型:"></a>1.1 动态类型:</h3><p>如id类型。实际上静态类型因为其固定性和可预知性而使用的特别广泛。静态类型是强类型，动态类型是弱类型，运行时决定接收者。</p><h3 id="1-2-动态绑定"><a href="#1-2-动态绑定" class="headerlink" title="1.2 动态绑定:"></a>1.2 动态绑定:</h3><p>让代码在运行时判断需要调用什么方法，而不是在编译时。与其他面向对象语言一样，方法调用和代码并没有在编译时连接在一起，而是在消息发送时才进行连接。运行时决定调用哪个方法。</p><h3 id="1-3-动态载入"><a href="#1-3-动态载入" class="headerlink" title="1.3 动态载入:"></a>1.3 动态载入:</h3><p> 让程序在运行时添加代码模块已经其他资源。用户可以根据需要执行一些可执行代码和资源，而不是在启动时就加载所有资源组件。可执行代码中可以含有和程序运行时整合的新类。</p><a id="more"></a><h1 id="2-Runtime中的类和对象"><a href="#2-Runtime中的类和对象" class="headerlink" title="2. Runtime中的类和对象"></a>2. Runtime中的类和对象</h1><p>OC代码被编译器转化为C语言，然后再通过运行时执行，最终实现了动态调用。这其中的OC类、对象和方法等都对应了C中的结构体，而且我们都可以在Rutime源码中找到它们的定义。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#import <span class="hljs-meta-string">&lt;objc/runtime.h&gt;</span></span><br><span class="hljs-meta">#import <span class="hljs-meta-string">&lt;objc/message.h&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="2-1-对象的定义（id—-gt-objc-object）"><a href="#2-1-对象的定义（id—-gt-objc-object）" class="headerlink" title="2.1 对象的定义（id—&gt;objc_object）"></a>2.1 对象的定义（id—&gt;objc_object）</h2><p>在Runtime源码中，我们能很快找到在oc中对象的定义。如下代码：</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs smali">///A pointer to an<span class="hljs-built_in"> instance </span>of a class.<br>typedef struct objc_object *id;<br></code></pre></td></tr></table></figure><p>很明显id是一个指向objc_object结构体的指针，我们点开查看Runtime对objc_object的具体定义：</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs smali">///Represents an<span class="hljs-built_in"> instance </span>of a class.<br>struct objc_object &#123;<br>    Class _Nonnull isa  OBJC_ISA_AVAI<span class="hljs-class">LABILITY;</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>我们都知道id在OC中是表示一个任意类型的类实例，从这里也可以看出，OC中的对象虽然没有明显的使用指针，但是在OC代码被编译转化为C之后，每个OC对象其实都是拥有一个isa的指针的。</p><h2 id="2-2-类的定义-Class-gt-objc-classs"><a href="#2-2-类的定义-Class-gt-objc-classs" class="headerlink" title="2.2 类的定义 (Class - &gt;objc_classs)"></a>2.2 类的定义 (Class - &gt;objc_classs)</h2><p>我们先来看下Runtime中对于类的定义，显然class是一个指向objc_class结构体的指针，如下:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">objc_class</span> *<span class="hljs-title">Class</span>;</span><br></code></pre></td></tr></table></figure><p>下面是Runtime中对objc_clas结构体的具体定义:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//usr/include/objc/runtime.h</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">objc_class</span> &#123;</span><br>    Class _Nonnull isa  OBJC_ISA_AVAILABILITY;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> !OBJC2</span><br><br>    Class Nullable super_class                              OBJC2UNAVAILABLE;<br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> * Nonnull name                               OBJC2UNAVAILABLE;<br>    <span class="hljs-keyword">long</span> version                                             OBJC2_UNAVAILABLE;<br>    <span class="hljs-keyword">long</span> info                                                OBJC2_UNAVAILABLE;<br>    <span class="hljs-keyword">long</span> instance_size                                       OBJC2_UNAVAILABLE;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">objc_ivar_list</span> * <span class="hljs-title">Nullable</span> <span class="hljs-title">ivars</span>                  <span class="hljs-title">OBJC2UNAVAILABLE</span>;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">objc_method_list</span> * <span class="hljs-title">Nullable</span> * _<span class="hljs-title">Nullable</span> <span class="hljs-title">methodLists</span>                    <span class="hljs-title">OBJC2UNAVAILABLE</span>;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">objc_cache</span> * <span class="hljs-title">Nonnull</span> <span class="hljs-title">cache</span>                       <span class="hljs-title">OBJC2UNAVAILABLE</span>;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">objc_protocol_list</span> * <span class="hljs-title">Nullable</span> <span class="hljs-title">protocols</span>          <span class="hljs-title">OBJC2UNAVAILABLE</span>;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br>&#125; OBJC2_UNAVAILABLE;<br></code></pre></td></tr></table></figure><h3 id="isa指针"><a href="#isa指针" class="headerlink" title="isa指针"></a>isa指针</h3><p>是一个Class 类型的指针. 每个实例对象有个isa的指针,他指向对象的类，而Class里也有个isa的指针, 指向meteClass(元类)。元类保存了类方法的列表。当类方法被调用时，先会从本身查找类方法的实现，如果没有，元类会向他父类查找该方法。同时注意的是：<strong>元类（meteClass）也是类，它也是对象。</strong>元类也有isa指针,它的isa指针最终指向的是一个根元类(root meteClass).根元类的isa指针指向本身，这样形成了一个封闭的内循环。</p><img src="/2021/11/01/Runtime-Part1/xht.png" class="" title="xht"><h4 id="super-class指针"><a href="#super-class指针" class="headerlink" title="super_class指针 :"></a>super_class指针 :</h4><p>super_class指针指向objc_class类所继承的父类，但是如果当前类已经是最顶层的类(如NSProxy),则super_class指针为NULL</p><h4 id="cache"><a href="#cache" class="headerlink" title="cache :"></a>cache :</h4><p>为了优化性能，objc_class中的cache结构体用于记录每次使用类或者实例对象调用的方法。这样每次响应消息的时候，Runtime系统会优先在cache中寻找响应方法，相比直接在类的方法列表中遍历查找，效率更高。</p><h4 id="ivars"><a href="#ivars" class="headerlink" title="ivars :"></a>ivars :</h4><p>ivars用于存放所有的成员变量和属性信息，属性的存取方法都存放在methodLists中。</p><h4 id="methodLists"><a href="#methodLists" class="headerlink" title="methodLists :"></a>methodLists :</h4><p>methodLists用于存放对象的所有成员方法。</p><h2 id="2-3-Method"><a href="#2-3-Method" class="headerlink" title="2.3 Method"></a>2.3 Method</h2><p>了解OC中的发送消息机制，我们先来看看Method在Runtime中的定义:</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs oxygene">typedef struct objc_method *<span class="hljs-function"><span class="hljs-keyword">Method</span>;</span><br><br>struct objc_method <span class="hljs-comment">&#123;</span><br><span class="hljs-comment">    SEL method_name;</span><br><span class="hljs-comment">    char * method_types;</span><br><span class="hljs-comment">    IMP method_imp;</span><br><span class="hljs-comment">&#125;</span>;<br></code></pre></td></tr></table></figure><p>Method 定义为一个objc_method结构体指针，理解objc_method定义中的参数： method_name:方法名类型SEL method_types: 一个char指针，指向存储方法的参数类型和返回值类型 method_imp：本质上是一个指针，指向方法的实现 这里其实就是SEL(method_name)与IMP(method_name)形成了一个映射，通过SEL，我们可以很方便的找到方法实现IMP。</p><h3 id="SEL-："><a href="#SEL-：" class="headerlink" title="SEL ："></a>SEL ：</h3><p>先来看下SEL在Runtime中的定义:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/// An opaque type that represents a method selector.</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">objc_selector</span> *<span class="hljs-title">SEL</span>;</span><br></code></pre></td></tr></table></figure><p>SEL是一个指向objc_selector结构体的指针,源码中我们没有找到这个结构体的明确定义。我们通过代码测试发现，SEL其实就是保存了方法名字符串的标识。下面有我们获取SEL的三种方法: 1.OC中，使用@selector(“方法名字符串”) 2.OC中，使用NSSelectorFromString(“方法名字符串”) 3.Runtime方法，使用sel_registerName(“方法名字符串”)</p><h3 id="IMP"><a href="#IMP" class="headerlink" title="IMP"></a>IMP</h3><p>IMP是一个函数指针，它在Runtime中的定义:</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-comment">/// A pointer to the function of a method implementation.</span><br>typedef <span class="hljs-keyword">void</span> (IMP)(<span class="hljs-keyword">void</span> <span class="hljs-regexp">/ id, SEL, ... */</span> );<br></code></pre></td></tr></table></figure><p>IMP函数指针指向了方法实现的首地址，当OC发起消息后，最终执行的代码是由IMP指针决定的。利用这个特性，我们可以对代码进行优化：当需要大量重复调用方法的时候，我们可以绕开消息绑定而直接利用IMP指针调起方法，这样的执行将会更加高效。</p><h1 id="3-Runtime消息发送"><a href="#3-Runtime消息发送" class="headerlink" title="3. Runtime消息发送"></a>3. Runtime消息发送</h1><p>Objective-C中的方法调用，不是简单的方法调用，而是发送消息。也就是说，其实[receiver message] 会被编译器转化为: objc_msgSend(receiver,selector)，在Runtime中它的原形为:</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">OBJC_EXPORT void objc<span class="hljs-constructor">_msgSend(<span class="hljs-params">void</span> <span class="hljs-operator">/</span><span class="hljs-operator">*</span> <span class="hljs-params">id</span> <span class="hljs-params">self</span>, SEL <span class="hljs-params">op</span>, <span class="hljs-operator">...</span> <span class="hljs-operator">*</span><span class="hljs-operator">/</span> )</span><br></code></pre></td></tr></table></figure><p>上面看到objc_msgSend会默认传入id和SEL。这对赢了两个隐含参数，self和_cmd。这意味着我们可以在方法的实现过程中拿到并使用。例如:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs dart">- (<span class="hljs-keyword">void</span>)testCmd:(NSNumber *)<span class="hljs-built_in">num</span> &#123;<br>    <br>    NSLog(@<span class="hljs-string">&quot;%ld&quot;</span>, (long)<span class="hljs-built_in">num</span>.integerValue);<br>    <br>    <span class="hljs-built_in">num</span> = [NSNumber numberWithInteger:<span class="hljs-built_in">num</span>.integerValue<span class="hljs-number">-1</span>];<br>    <br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">num</span>.integerValue &gt; <span class="hljs-number">0</span>) &#123;<br>        [self performSelector:_cmd withObject:<span class="hljs-built_in">num</span>];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>尝试调用:</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scheme">[<span class="hljs-name">self</span> testCmd:@(<span class="hljs-name">5</span>)]<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>上面会按顺序输出 <code>5, 4, 3, 2, 1</code> ，然后结束。即我们可以在方法内部用 <code>_cmd</code> 来调用方法自身。</p><p>编译器会根据情况在 objc_msgSend，objc_msgSend_stret，objc_msgSendSuper，objc_msgSendSuper_stret 或 objc_msgSend_fpret 五个方法中选择一个来调用。如果消息是传递给超类，那么会调用 objc_msgSendSuper 方法，如果消息返回值是数据结构，就会调用 objc_msgSendSuper_stret 方法，如果返回值是浮点数，则调用 objc_msgSend_fpret 方法。</p><p>有一道网上常见的面试题来帮助我们加深理解，如下：</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs objectivec"><span class="hljs-class"><span class="hljs-keyword">@implementation</span> <span class="hljs-title">Son</span> : <span class="hljs-title">Father</span></span><br>- (<span class="hljs-keyword">id</span>)init<br>&#123;<br>    <span class="hljs-keyword">self</span> = [<span class="hljs-keyword">super</span> init];<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">self</span>) &#123;<br>        <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;%@&quot;</span>, <span class="hljs-built_in">NSStringFromClass</span>([<span class="hljs-keyword">self</span> <span class="hljs-keyword">class</span>]));<br>        <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;%@&quot;</span>, <span class="hljs-built_in">NSStringFromClass</span>([<span class="hljs-keyword">super</span> <span class="hljs-keyword">class</span>]));<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">self</span>;<br>&#125;<br><span class="hljs-keyword">@end</span><br></code></pre></td></tr></table></figure><p>这个题目主要是考察关于 Objective-C 中对 self 和 super 的理解。</p><p>我们都知道：self 是类的隐藏参数，指向当前调用方法的这个类的实例。那 super 呢？</p><p>很多人会想当然的认为“ super 和 self 类似，应该是指向父类的指针吧！”。这是很普遍的一个误区。其实 super 是一个 Magic Keyword， 它本质是一个编译器标示符，和 self 是指向的同一个消息接受者！他们两个的不同点在于：super 会告诉编译器，调用 class 这个方法时，要去父类的方法，而不是本类里的。</p><p>上面的例子不管调用<code>[self class]</code>还是<code>[super class]</code>，接受消息的对象都是当前 <code>Son ＊xxx</code> 这个对象。</p><p>当使用 self 调用方法时，会从当前类的方法列表中开始找，如果没有，就从父类中再找；而当使用 super 时，则从父类的方法列表中开始找。然后调用父类的这个方法。</p><p>下面是整个运行时阶段消息发送的详细步骤:</p><ol><li>检测selector 是不是需要忽略的。比如 Mac OS X 开发，有了垃圾回收就不理会retain,release 这些函数了。</li><li>检测target 是不是nil 对象。ObjC 的特性是允许对一个 nil对象执行任何一个方法不会 Crash，因为会被忽略掉。</li><li>如果上面两个都过了，那就开始查找这个类的 IMP，先从 cache 里面找，若可以找得到就跳到对应的函数去执行</li><li>如果在cache里找不到就找一下方法列表methodLists。</li><li>如果methodLists找不到，就到超类的方法列表里寻找，一直找，直到找到NSObject类为止。</li><li>如果还找不到，Runtime就提供了如下三种方法来处理：<strong>动态方法解析</strong>、<strong>消息接受者重定向</strong>、<strong>消息重定向</strong>,这就是下面要说的消息转发机制。</li></ol><h1 id="4-消息转发机制"><a href="#4-消息转发机制" class="headerlink" title="4. 消息转发机制"></a>4. 消息转发机制</h1><p>我们先用一张图来简单了解这三种方法的调用关系:</p><img src="/2021/11/01/Runtime-Part1/lct.png" class="" title="lct"><h2 id="4-1-动态方法解析"><a href="#4-1-动态方法解析" class="headerlink" title="4.1 动态方法解析"></a>4.1 动态方法解析</h2><p>所谓动态解析，我们可以理解为通过cache和方法列表没有找到方法时，Runtime为我们提供一次动态添加方法实现的机会，主要用到的方法入如下:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//OC方法：</span><br><span class="hljs-comment">//类方法未找到时调起，可于此添加类方法实现</span><br>+ (<span class="hljs-keyword">BOOL</span>)resolveClassMethod:(SEL)sel<br><span class="hljs-comment">//实例方法未找到时调起，可于此添加实例方法实现</span><br>+ (<span class="hljs-keyword">BOOL</span>)resolveInstanceMethod:(SEL)sel<br><br><span class="hljs-comment">//Runtime方法：</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> 运行时方法：向指定类中添加特定方法实现的操作</span><br><span class="hljs-comment"> <span class="hljs-doctag">@param</span> cls 被添加方法的类</span><br><span class="hljs-comment"> <span class="hljs-doctag">@param</span> name selector方法名</span><br><span class="hljs-comment"> <span class="hljs-doctag">@param</span> imp 指向实现方法的函数指针</span><br><span class="hljs-comment"> <span class="hljs-doctag">@param</span> types imp函数实现的返回值与参数类型</span><br><span class="hljs-comment"> <span class="hljs-doctag">@return</span> 添加方法是否成功</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">BOOL</span> class_addMethod(<span class="hljs-class"><span class="hljs-keyword">Class</span> <span class="hljs-title">_Nullable</span> <span class="hljs-title">cls</span>,</span><br><span class="hljs-class">                     <span class="hljs-title">SEL</span> <span class="hljs-title">_Nonnull</span> <span class="hljs-title">name</span>,</span><br><span class="hljs-class">                     <span class="hljs-title">IMP</span> <span class="hljs-title">_Nonnull</span> <span class="hljs-title">imp</span>,</span><br><span class="hljs-class">                     <span class="hljs-title">const</span> <span class="hljs-title">char</span> * <span class="hljs-title">_Nullable</span> <span class="hljs-title">types</span>)</span><br></code></pre></td></tr></table></figure><h2 id="4-2-消息接受者重定向"><a href="#4-2-消息接受者重定向" class="headerlink" title="4.2 消息接受者重定向"></a>4.2 消息接受者重定向</h2><p>我们注意到动态方法解析过程中的两个resolve方法都返回了布尔值，当它们返回YES时方法即可正常执行，但是若它们返回NO，消息发送机制就进入了消息转发(Forwarding)的阶段了，我们可以使用Runtime通过下面的方法替换消息接收者的为其他对象，从而保证程序的继续执行。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-comment">//重定向类方法的消息接收者，返回一个类</span><br><span class="hljs-selector-tag">-</span> (id)<span class="hljs-selector-tag">forwardingTargetForSelector</span><span class="hljs-selector-pseudo">:(SEL)aSelector</span><br><br><span class="hljs-comment">//重定向实例方法的消息接受者，返回一个实例对象</span><br><span class="hljs-selector-tag">-</span> (id)<span class="hljs-selector-tag">forwardingTargetForSelector</span><span class="hljs-selector-pseudo">:(SEL)aSelector</span><br></code></pre></td></tr></table></figure><h2 id="4-3-消息重定向"><a href="#4-3-消息重定向" class="headerlink" title="4.3 消息重定向"></a>4.3 消息重定向</h2><p>当以上两种方法无法生效，那么这个对象会因为找不到相应的方法实现而无法响应消息，此时Runtime系统会通过forwardInvocation：消息通知该对象，给予此次消息发送最后一次寻找IMP的机会：</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs erlang">- <span class="hljs-params">(void)</span>forwardInvocation:<span class="hljs-params">(NSInvocation *)</span>anInvocation；<br></code></pre></td></tr></table></figure><p>其实每个对象都从NSObject类中继承了forwardInvocation：方法，但是NSObject中的这个方法只是简单的调用了doesNotRecongnizeSelector:方法，提示我们错误。所以我们可以重写这个方法：对不能处理的消息做一些默认处理，也可以将消息转发给其他对象来处理，而不抛出错误。</p><p>我们注意到anInvocation是forwardInvocation唯一参数，它封装了原始的消息和消息参数。正是因为它，我们还不得不重写另一个函数：methodSignatureForSelector。这是因为在forwardInvocation: 消息发送前，Runtime系统会向对象发送methodSignatureForSelector消息，并取到返回的方法签名用于生成NSInvocation对象。</p><h1 id="5-总结："><a href="#5-总结：" class="headerlink" title="5. 总结："></a>5. 总结：</h1><p>以上就是IOS运行时的基础部分，帮助我们理解Runtime的工作原理。在实际开发中，合理的运用Runtime，可以提高我们的开发效率。下一遍，我将总结Runtime在实际开发中的使用。</p><p><strong>其他参考链接</strong><br><a href="https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40008048">1.Objective-C Runtime Programming Guide</a><br>2.Objctive-C Runtime](<a href="http://yulingtianxia.com/blog/2014/11/05/objective-c-runtime/">http://yulingtianxia.com/blog/2014/11/05/objective-c-runtime/</a>)<br><a href="https://blog.csdn.net/zhaochen_009/article/details/54602930">3.iOS Runtime forwardInvocation的一些总结</a><br>4.<a href="https://blog.csdn.net/zhaochen_009/article/details/54602930">https://blog.csdn.net/zhaochen_009/article/details/54602930</a></p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
      <category>iOS进阶</category>
      
    </categories>
    
    
    <tags>
      
      <tag>iOS</tag>
      
      <tag>Runtime</tag>
      
      <tag>基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
