<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>post_name</title>
      <link href="2021/03/25/post-name/"/>
      <url>2021/03/25/post-name/</url>
      
        <content type="html"><![CDATA[<p><img src="/25/post-name/jcf/Documents/cfjia.github.io/source/_posts/post-name/lct.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Runtime - 进阶篇</title>
      <link href="2021/03/24/Runtime-Part2/"/>
      <url>2021/03/24/Runtime-Part2/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> iOS进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Runtime </tag>
            
            <tag> 进阶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Runtime - 基础篇</title>
      <link href="2020/08/14/Runtime-Part1/"/>
      <url>2020/08/14/Runtime-Part1/</url>
      
        <content type="html"><![CDATA[<h1 id="一、什么是动态语言，什么是Runtime？"><a href="#一、什么是动态语言，什么是Runtime？" class="headerlink" title="一、什么是动态语言，什么是Runtime？"></a>一、什么是动态语言，什么是Runtime？</h1><h2 id="静态语言-强类型语言-："><a href="#静态语言-强类型语言-：" class="headerlink" title="静态语言(强类型语言)："></a>静态语言(强类型语言)：</h2><p>静态语言是在编译时就要确定变量的数据类型，也就是变量使用之前必须声明数据类型。如：C、C++、Java、C#等。</p><h2 id="动态语言-弱类型语言"><a href="#动态语言-弱类型语言" class="headerlink" title="动态语言(弱类型语言):"></a>动态语言(弱类型语言):</h2><p>动态语言是在运行时才去做数据类型检查的语言，变量使用之前不需要类型声明，通常变量的类型是被赋值的那个值的类型。如：PHP、Ruby、Shell、Python等一些脚本语言。</p><h2 id="为什么说OC是一门动态语言"><a href="#为什么说OC是一门动态语言" class="headerlink" title="为什么说OC是一门动态语言:"></a>为什么说OC是一门动态语言:</h2><p>静态、动态是相对的，这里动态语言指的是不需要再编译阶段就确定所有变量方法等，还可以在运行时动态的添加。<br>Objective-C，在C语言的基础上添加了面向对象的特性，并且通过Runtime这个运行时机制，在运行时可以动态的添加变量，方法，类等，所以说Objective-C是一门动态语言。</p><h2 id="OC的动态性"><a href="#OC的动态性" class="headerlink" title="OC的动态性:"></a>OC的动态性:</h2><h3 id="1-动态类型"><a href="#1-动态类型" class="headerlink" title="1.动态类型:"></a>1.动态类型:</h3><p>如id类型。实际上静态类型因为其固定性和可预知性而使用的特别广泛。静态类型是强类型，动态类型是弱类型，运行时决定接收者。</p><h3 id="2-动态绑定"><a href="#2-动态绑定" class="headerlink" title="2.动态绑定:"></a>2.动态绑定:</h3><p>让代码在运行时判断需要调用什么方法，而不是在编译时。与其他面向对象语言一样，方法调用和代码并没有在编译时连接在一起，而是在消息发送时才进行连接。运行时决定调用哪个方法。</p><h3 id="3-动态载入"><a href="#3-动态载入" class="headerlink" title="3.动态载入:"></a>3.动态载入:</h3><p> 让程序在运行时添加代码模块已经其他资源。用户可以根据需要执行一些可执行代码和资源，而不是在启动时就加载所有资源组件。可执行代码中可以含有和程序运行时整合的新类。</p><a id="more"></a><h1 id="二、Runtime中的类和对象"><a href="#二、Runtime中的类和对象" class="headerlink" title="二、Runtime中的类和对象"></a>二、Runtime中的类和对象</h1><p>OC代码被编译器转化为C语言，然后再通过运行时执行，最终实现了动态调用。这其中的OC类、对象和方法等都对应了C中的结构体，而且我们都可以在Rutime源码中找到它们的定义。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#import &lt;objc&#x2F;runtime.h&gt;</span><br><span class="line">#import &lt;objc&#x2F;message.h&gt;</span><br></pre></td></tr></table></figure><h2 id="1-对象的定义（id—-gt-objc-object）"><a href="#1-对象的定义（id—-gt-objc-object）" class="headerlink" title="1. 对象的定义（id—&gt;objc_object）"></a>1. 对象的定义（id—&gt;objc_object）</h2><p>在Runtime源码中，我们能很快找到在oc中对象的定义。如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;&#x2F;A pointer to an instance of a class.</span><br><span class="line">typedef struct objc_object *id;</span><br></pre></td></tr></table></figure><p>很明显id是一个指向objc_object结构体的指针，我们点开查看Runtime对objc_object的具体定义：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;&#x2F;Represents an instance of a class.</span><br><span class="line">struct objc_object &#123;</span><br><span class="line">    Class _Nonnull isa  OBJC_ISA_AVAILABILITY;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>我们都知道id在OC中是表示一个任意类型的类实例，从这里也可以看出，OC中的对象虽然没有明显的使用指针，但是在OC代码被编译转化为C之后，每个OC对象其实都是拥有一个isa的指针的。</p><h2 id="2-类的定义-Class-gt-objc-classs"><a href="#2-类的定义-Class-gt-objc-classs" class="headerlink" title="2. 类的定义 (Class - &gt;objc_classs)"></a>2. 类的定义 (Class - &gt;objc_classs)</h2><p>我们先来看下Runtime中对于类的定义，显然class是一个指向objc_class结构体的指针，如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">typedef struct objc_class *Class;</span><br></pre></td></tr></table></figure><p>下面是Runtime中对objc_clas结构体的具体定义:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;usr&#x2F;include&#x2F;objc&#x2F;runtime.h</span><br><span class="line">struct objc_class &#123;</span><br><span class="line">    Class _Nonnull isa  OBJC_ISA_AVAILABILITY;</span><br><span class="line">#if !OBJC2</span><br><span class="line"></span><br><span class="line">    Class Nullable super_class                              OBJC2UNAVAILABLE;</span><br><span class="line">    const char * Nonnull name                               OBJC2UNAVAILABLE;</span><br><span class="line">    long version                                             OBJC2_UNAVAILABLE;</span><br><span class="line">    long info                                                OBJC2_UNAVAILABLE;</span><br><span class="line">    long instance_size                                       OBJC2_UNAVAILABLE;</span><br><span class="line">    struct objc_ivar_list * Nullable ivars                  OBJC2UNAVAILABLE;</span><br><span class="line">    struct objc_method_list * Nullable * _Nullable methodLists                    OBJC2UNAVAILABLE;</span><br><span class="line">    struct objc_cache * Nonnull cache                       OBJC2UNAVAILABLE;</span><br><span class="line">    struct objc_protocol_list * Nullable protocols          OBJC2UNAVAILABLE;</span><br><span class="line">#endif</span><br><span class="line">&#125; OBJC2_UNAVAILABLE;</span><br></pre></td></tr></table></figure><h3 id="isa指针"><a href="#isa指针" class="headerlink" title="isa指针"></a>isa指针</h3><p>是一个Class 类型的指针. 每个实例对象有个isa的指针,他指向对象的类，而Class里也有个isa的指针, 指向meteClass(元类)。元类保存了类方法的列表。当类方法被调用时，先会从本身查找类方法的实现，如果没有，元类会向他父类查找该方法。同时注意的是：<strong>元类（meteClass）也是类，它也是对象。</strong>元类也有isa指针,它的isa指针最终指向的是一个根元类(root meteClass).根元类的isa指针指向本身，这样形成了一个封闭的内循环。<br><img src="/Users/jcf/Documents/cfjia.github.io/source/images/xht.png" alt="isa"></p><h4 id="super-class指针"><a href="#super-class指针" class="headerlink" title="super_class指针 :"></a>super_class指针 :</h4><p>super_class指针指向objc_class类所继承的父类，但是如果当前类已经是最顶层的类(如NSProxy),则super_class指针为NULL</p><h4 id="cache"><a href="#cache" class="headerlink" title="cache :"></a>cache :</h4><p>为了优化性能，objc_class中的cache结构体用于记录每次使用类或者实例对象调用的方法。这样每次响应消息的时候，Runtime系统会优先在cache中寻找响应方法，相比直接在类的方法列表中遍历查找，效率更高。</p><h4 id="ivars"><a href="#ivars" class="headerlink" title="ivars :"></a>ivars :</h4><p>ivars用于存放所有的成员变量和属性信息，属性的存取方法都存放在methodLists中。</p><h4 id="methodLists"><a href="#methodLists" class="headerlink" title="methodLists :"></a>methodLists :</h4><p>methodLists用于存放对象的所有成员方法。</p><h2 id="3-Method"><a href="#3-Method" class="headerlink" title="3. Method"></a>3. Method</h2><p>了解OC中的发送消息机制，我们先来看看Method在Runtime中的定义:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">typedef struct objc_method *Method;</span><br><span class="line"></span><br><span class="line">struct objc_method &#123;</span><br><span class="line">    SEL method_name;</span><br><span class="line">    char * method_types;</span><br><span class="line">    IMP method_imp;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Method 定义为一个objc_method结构体指针，理解objc_method定义中的参数：<br>method_name:方法名类型SEL<br>method_types: 一个char指针，指向存储方法的参数类型和返回值类型<br>method_imp：本质上是一个指针，指向方法的实现<br>这里其实就是SEL(method_name)与IMP(method_name)形成了一个映射，通过SEL，我们可以很方便的找到方法实现IMP。</p><h3 id="SEL-："><a href="#SEL-：" class="headerlink" title="SEL ："></a>SEL ：</h3><p>先来看下SEL在Runtime中的定义:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;&#x2F; An opaque type that represents a method selector.</span><br><span class="line">typedef struct objc_selector *SEL;</span><br></pre></td></tr></table></figure><p>SEL是一个指向objc_selector结构体的指针,源码中我们没有找到这个结构体的明确定义。我们通过代码测试发现，SEL其实就是保存了方法名字符串的标识。下面有我们获取SEL的三种方法:<br>1.OC中，使用@selector(“方法名字符串”)<br>2.OC中，使用NSSelectorFromString(“方法名字符串”)<br>3.Runtime方法，使用sel_registerName(“方法名字符串”)</p><h3 id="IMP"><a href="#IMP" class="headerlink" title="IMP"></a>IMP</h3><p>IMP是一个函数指针，它在Runtime中的定义:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;&#x2F; A pointer to the function of a method implementation.</span><br><span class="line">typedef void (IMP)(void &#x2F; id, SEL, ... *&#x2F; );</span><br></pre></td></tr></table></figure><p>IMP函数指针指向了方法实现的首地址，当OC发起消息后，最终执行的代码是由IMP指针决定的。利用这个特性，我们可以对代码进行优化：当需要大量重复调用方法的时候，我们可以绕开消息绑定而直接利用IMP指针调起方法，这样的执行将会更加高效。</p><h1 id="三、Runtime消息发送"><a href="#三、Runtime消息发送" class="headerlink" title="三、Runtime消息发送"></a>三、Runtime消息发送</h1><p>Objective-C中的方法调用，不是简单的方法调用，而是发送消息。也就是说，其实[receiver message] 会被编译器转化为: objc_msgSend(receiver,selector)，在Runtime中它的原形为:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">OBJC_EXPORT void objc_msgSend(void &#x2F;* id self, SEL op, ... *&#x2F; )</span><br></pre></td></tr></table></figure><p>上面看到objc_msgSend会默认传入id和SEL。这对赢了两个隐含参数，self和_cmd。这意味着我们可以在方法的实现过程中拿到并使用。例如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">- (void)testCmd:(NSNumber *)num &#123;</span><br><span class="line">    </span><br><span class="line">    NSLog(@&quot;%ld&quot;, (long)num.integerValue);</span><br><span class="line">    </span><br><span class="line">    num &#x3D; [NSNumber numberWithInteger:num.integerValue-1];</span><br><span class="line">    </span><br><span class="line">    if (num.integerValue &gt; 0) &#123;</span><br><span class="line">        [self performSelector:_cmd withObject:num];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>尝试调用:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[self testCmd:@(5)];</span><br></pre></td></tr></table></figure><p>上面会按顺序输出 <code>5, 4, 3, 2, 1</code> ，然后结束。即我们可以在方法内部用 <code>_cmd</code> 来调用方法自身。</p><p>编译器会根据情况在 objc_msgSend，objc_msgSend_stret，objc_msgSendSuper，objc_msgSendSuper_stret 或 objc_msgSend_fpret 五个方法中选择一个来调用。如果消息是传递给超类，那么会调用 objc_msgSendSuper 方法，如果消息返回值是数据结构，就会调用 objc_msgSendSuper_stret 方法，如果返回值是浮点数，则调用 objc_msgSend_fpret 方法。</p><p>有一道网上常见的面试题来帮助我们加深理解，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@implementation Son : Father</span><br><span class="line">- (id)init</span><br><span class="line">&#123;</span><br><span class="line">    self &#x3D; [super init];</span><br><span class="line">    if (self) &#123;</span><br><span class="line">        NSLog(@&quot;%@&quot;, NSStringFromClass([self class]));</span><br><span class="line">        NSLog(@&quot;%@&quot;, NSStringFromClass([super class]));</span><br><span class="line">    &#125;</span><br><span class="line">    return self;</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure><p>这个题目主要是考察关于 Objective-C 中对 self 和 super 的理解。</p><p>我们都知道：self 是类的隐藏参数，指向当前调用方法的这个类的实例。那 super 呢？</p><p>很多人会想当然的认为“ super 和 self 类似，应该是指向父类的指针吧！”。这是很普遍的一个误区。其实 super 是一个 Magic Keyword， 它本质是一个编译器标示符，和 self 是指向的同一个消息接受者！他们两个的不同点在于：super 会告诉编译器，调用 class 这个方法时，要去父类的方法，而不是本类里的。</p><p>上面的例子不管调用<code>[self class]</code>还是<code>[super class]</code>，接受消息的对象都是当前 <code>Son ＊xxx</code> 这个对象。</p><p>当使用 self 调用方法时，会从当前类的方法列表中开始找，如果没有，就从父类中再找；而当使用 super 时，则从父类的方法列表中开始找。然后调用父类的这个方法。</p><p>下面是整个运行时阶段消息发送的详细步骤:</p><ol><li>检测selector 是不是需要忽略的。比如 Mac OS X 开发，有了垃圾回收就不理会retain,release 这些函数了。</li><li>检测target 是不是nil 对象。ObjC 的特性是允许对一个 nil对象执行任何一个方法不会 Crash，因为会被忽略掉。</li><li>如果上面两个都过了，那就开始查找这个类的 IMP，先从 cache 里面找，若可以找得到就跳到对应的函数去执行</li><li>如果在cache里找不到就找一下方法列表methodLists。</li><li>如果methodLists找不到，就到超类的方法列表里寻找，一直找，直到找到NSObject类为止。</li><li>如果还找不到，Runtime就提供了如下三种方法来处理：<strong>动态方法解析</strong>、<strong>消息接受者重定向</strong>、<strong>消息重定向</strong>,这就是下面要说的消息转发机制。</li></ol><h1 id="四、消息转发机制"><a href="#四、消息转发机制" class="headerlink" title="四、消息转发机制"></a>四、消息转发机制</h1><p>我们先用一张图来简单了解这三种方法的调用关系:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% asset_img lct.png 流程图 %&#125;</span><br></pre></td></tr></table></figure><h2 id="1-动态方法解析"><a href="#1-动态方法解析" class="headerlink" title="1.动态方法解析"></a>1.动态方法解析</h2><p>所谓动态解析，我们可以理解为通过cache和方法列表没有找到方法时，Runtime为我们提供一次动态添加方法实现的机会，主要用到的方法入如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;OC方法：</span><br><span class="line">&#x2F;&#x2F;类方法未找到时调起，可于此添加类方法实现</span><br><span class="line">+ (BOOL)resolveClassMethod:(SEL)sel</span><br><span class="line">&#x2F;&#x2F;实例方法未找到时调起，可于此添加实例方法实现</span><br><span class="line">+ (BOOL)resolveInstanceMethod:(SEL)sel</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Runtime方法：</span><br><span class="line">&#x2F;**</span><br><span class="line"> 运行时方法：向指定类中添加特定方法实现的操作</span><br><span class="line"> @param cls 被添加方法的类</span><br><span class="line"> @param name selector方法名</span><br><span class="line"> @param imp 指向实现方法的函数指针</span><br><span class="line"> @param types imp函数实现的返回值与参数类型</span><br><span class="line"> @return 添加方法是否成功</span><br><span class="line"> *&#x2F;</span><br><span class="line">BOOL class_addMethod(Class _Nullable cls,</span><br><span class="line">                     SEL _Nonnull name,</span><br><span class="line">                     IMP _Nonnull imp,</span><br><span class="line">                     const char * _Nullable types)</span><br></pre></td></tr></table></figure><h2 id="2-消息接受者重定向"><a href="#2-消息接受者重定向" class="headerlink" title="2. 消息接受者重定向"></a>2. 消息接受者重定向</h2><p>我们注意到动态方法解析过程中的两个resolve方法都返回了布尔值，当它们返回YES时方法即可正常执行，但是若它们返回NO，消息发送机制就进入了消息转发(Forwarding)的阶段了，我们可以使用Runtime通过下面的方法替换消息接收者的为其他对象，从而保证程序的继续执行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;重定向类方法的消息接收者，返回一个类</span><br><span class="line">- (id)forwardingTargetForSelector:(SEL)aSelector</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;重定向实例方法的消息接受者，返回一个实例对象</span><br><span class="line">- (id)forwardingTargetForSelector:(SEL)aSelector</span><br></pre></td></tr></table></figure><h2 id="3-消息重定向"><a href="#3-消息重定向" class="headerlink" title="3. 消息重定向"></a>3. 消息重定向</h2><p>当以上两种方法无法生效，那么这个对象会因为找不到相应的方法实现而无法响应消息，此时Runtime系统会通过forwardInvocation：消息通知该对象，给予此次消息发送最后一次寻找IMP的机会：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- (void)forwardInvocation:(NSInvocation *)anInvocation；</span><br></pre></td></tr></table></figure><p>其实每个对象都从NSObject类中继承了forwardInvocation：方法，但是NSObject中的这个方法只是简单的调用了doesNotRecongnizeSelector:方法，提示我们错误。所以我们可以重写这个方法：对不能处理的消息做一些默认处理，也可以将消息转发给其他对象来处理，而不抛出错误。</p><p>我们注意到anInvocation是forwardInvocation唯一参数，它封装了原始的消息和消息参数。正是因为它，我们还不得不重写另一个函数：methodSignatureForSelector。这是因为在forwardInvocation: 消息发送前，Runtime系统会向对象发送methodSignatureForSelector消息，并取到返回的方法签名用于生成NSInvocation对象。</p><h1 id="五、总结："><a href="#五、总结：" class="headerlink" title="五、总结："></a>五、总结：</h1><p>以上就是IOS运行时的基础部分，帮助我们理解Runtime的工作原理。在实际开发中，合理的运用Runtime，可以提高我们的开发效率。下一遍，我将总结Runtime在实际开发中的使用。</p><p><strong>其他参考链接</strong><br><a href="https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40008048">1.Objective-C Runtime Programming Guide</a><br><a href="http://yulingtianxia.com/blog/2014/11/05/objective-c-runtime/">2.Objctive-C Runtime</a><br><a href="https://blog.csdn.net/zhaochen_009/article/details/54602930">3.iOS Runtime forwardInvocation的一些总结</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> iOS进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Runtime </tag>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
