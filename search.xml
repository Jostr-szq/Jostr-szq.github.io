<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Runloop详解</title>
      <link href="2021/11/04/Runloop/"/>
      <url>2021/11/04/Runloop/</url>
      
        <content type="html"><![CDATA[<p>原理：</p><ol><li><p>什么是Runloop?</p><p>Runloop是一个调度任务和处理任务的事件循环。Runloop的目的是为了在有工作的时候让线程忙起来，而在没工作的时候让线程进入休眠状态。简单的说RunLoop是一种高级的循环机制，让程序持续运行，并处理程序中的各种事件，让线程在需要做事的时候忙起来，不需要的话就让线程休眠。</p></li><li><p>Runloop和线程？</p><p>RunLoop<code>和线程是绑定在一起的，每条线程都有唯一一个与之对应的</code>RunLoop对象<code>。不能自己创建</code>RunLoop对象<code>，但是可以获取系统提供的</code>RunLoop对象<code>。主线程的</code>RunLoop对象<code>是由系统自动创建好的，在应用程序启动的时候会自动完成启动，而子线程中的</code>RunLoop对象`需要我们手动获取并启动。</p><p>线程刚创建时并没有 RunLoop，如果你不主动获取，那它一直都不会有。RunLoop 的创建是发生在第一次获取时，RunLoop 的销毁是发生在线程结束时。你只能在一个线程的内部获取其 RunLoop（主线程除外）。</p></li><li><p>Runloop对外接口</p><p>一个 RunLoop 包含若干个 Mode，每个 Mode 又包含若干个 Source/Timer/Observer。每次调用 RunLoop 的主函数时，只能指定其中一个 Mode，这个Mode被称作 CurrentMode。如果需要切换 Mode，只能退出 Loop，再重新指定一个 Mode 进入。这样做主要是为了分隔开不同组的 Source/Timer/Observer，让其互不影响。</p><p>苹果文档中提到的 Mode 有五个，分别是：</p><ul><li>NSDefaultRunLoopMode</li><li>NSConnectionReplyMode</li><li>NSModalPanelRunLoopMode</li><li>NSEventTrackingRunLoopMode</li><li>NSRunLoopCommonModes</li></ul><p>iOS 中公开暴露出来的只有 NSDefaultRunLoopMode 和 NSRunLoopCommonModes。 NSRunLoopCommonModes 实际上是一个 Mode 的集合，默认包括 NSDefaultRunLoopMode 和 NSEventTrackingRunLoopMode。</p><p>应用场景举例：主线程的 RunLoop 里有两个预置的 Mode：kCFRunLoopDefaultMode 和 UITrackingRunLoopMode。这两个 Mode 都已经被标记为”Common”属性。DefaultMode 是 App 平时所处的状态，TrackingRunLoopMode 是追踪 ScrollView 滑动时的状态。当你创建一个 Timer 并加到 DefaultMode 时，Timer 会得到重复回调，但此时滑动一个TableView时，RunLoop 会将 mode 切换为 TrackingRunLoopMode，这时 Timer 就不会被回调，并且也不会影响到滑动操作。</p><p>有时你需要一个 Timer，在两个 Mode 中都能得到回调，一种办法就是将这个 Timer 分别加入这两个 Mode。还有一种方式，就是将 Timer 加入到顶层的 RunLoop 的 “commonModeItems” 中。”commonModeItems” 被 RunLoop 自动更新到所有具有”Common”属性的 Mode 里去。</p></li></ol><p>实践</p><ol><li><p>AutoReleasePool</p><p>App启动后，苹果在主线程 RunLoop 里注册了两个 Observer，其回调都是 _wrapRunLoopWithAutoreleasePoolHandler()。</p><p>第一个 Observer 监视的事件是 Entry(即将进入Loop)，其回调内会调用 _objc_autoreleasePoolPush() 创建自动释放池。其 order 是-2147483647，优先级最高，保证创建释放池发生在其他所有回调之前。</p><p>第二个 Observer 监视了两个事件： BeforeWaiting(准备进入休眠) 时调用_objc_autoreleasePoolPop() 和 _objc_autoreleasePoolPush() 释放旧的池并创建新池；Exit(即将退出Loop) 时调用 _objc_autoreleasePoolPop() 来释放自动释放池。这个 Observer 的 order 是 2147483647，优先级最低，保证其释放池子发生在其他所有回调之后。</p><p>在主线程执行的代码，通常是写在诸如事件回调、Timer回调内的。这些回调会被 RunLoop 创建好的 AutoreleasePool 环绕着，所以不会出现内存泄漏，开发者也不必显示创建 Pool 了。</p></li><li><p>事件响应</p><p>mack port -&gt; source1回调 -&gt;source0回调 将IOHIDEvent对象封装成UIEvent对象，并放入UIApplication的事件队列中，单例的 UIApplication 会从事件队列中取出触摸事件并传递给单例的 UIWindow 来处理，UIWindow 对象首先会使用 <code>hitTest:withEvent:</code>方法寻找此次 Touch 操作初始点所在的视图(View)，即需要将触摸事件传递给其处理的视图，这个过程称之为 hit-test view。</p><p><code>hitTest:withEvent:</code>方法的处理流程如下:</p><ul><li>首先调用当前视图的 <code>pointInside:withEvent:</code> 方法判断触摸点是否在当前视图内；</li><li>若返回 NO, 则 <code>hitTest:withEvent:</code> 返回 nil，若返回 YES, 则向当前视图的所有子视图 (subviews) 发送 <code>hitTest:withEvent:</code> 消息，所有子视图的遍历顺序是从最顶层视图一直到到最底层视图，即从 subviews 数组的末尾向前遍历，直到有子视图返回非空对象或者全部子视图遍历完毕；</li><li>若第一次有子视图返回非空对象，则 <code>hitTest:withEvent:</code> 方法返回此对象，处理结束；</li><li>如所有子视图都返回空，则 hitTest:withEvent: 方法返回自身 (self)。</li></ul></li><li><p>NSTimer</p><p>NSTimer 其实就是 CFRunLoopTimerRef，他们之间是 toll-free bridged 的。一个 NSTimer 注册到 RunLoop 后，RunLoop 会为其重复的时间点注册好事件。例如 10:00, 10:10, 10:20 这几个时间点。RunLoop为了节省资源，并不会在非常准确的时间点回调这个Timer。Timer 有个属性叫做 Tolerance (宽容度)，标示了当时间点到后，容许有多少最大误差。</p><p>如果某个时间点被错过了，例如执行了一个很长的任务，则那个时间点的回调也会跳过去，不会延后执行。就比如等公交，如果 10:10 时我忙着玩手机错过了那个点的公交，那我只能等 10:20 这一趟了。</p></li><li><p>performSelecter</p><p>当调用 NSObject 的 performSelecter:afterDelay: 后，实际上其内部会创建一个 Timer 并添加到当前线程的 RunLoop 中。所以如果当前线程没有 RunLoop，则这个方法会失效。</p><p>当调用 performSelector:onThread: 时，实际上其会创建一个 Timer 加到对应的线程去，同样的，如果对应线程没有 RunLoop 该方法也会失效。</p></li><li><p>线程保活</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> iOS进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> RunLoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Runtime - 进阶篇</title>
      <link href="2021/11/02/Runtime-Part2/"/>
      <url>2021/11/02/Runtime-Part2/</url>
      
        <content type="html"><![CDATA[<h1 id="一、动态方法交换：Method-Swizzling"><a href="#一、动态方法交换：Method-Swizzling" class="headerlink" title="一、动态方法交换：Method Swizzling"></a>一、动态方法交换：Method Swizzling</h1><p>实现动态方法交换(Method Swizzling )是Runtime中最具盛名的应用场景，其原理是：通过Runtime获取到方法实现的地址，进而动态交换两个方法的功能。使用到关键方法如下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取类方法的Mthod</span></span><br><span class="line"><span class="type">Method</span> _Nullable class_getClassMethod(<span class="type">Class</span> _Nullable cls, <span class="type">SEL</span> _Nonnull name)</span><br><span class="line"><span class="comment">//获取实例对象方法的Mthod</span></span><br><span class="line"><span class="type">Method</span> _Nullable class_getInstanceMethod(<span class="type">Class</span> _Nullable cls, <span class="type">SEL</span> _Nonnull name)</span><br><span class="line"><span class="comment">//交换两个方法的实现</span></span><br><span class="line">void method_exchangeImplementations(<span class="type">Method</span> _Nonnull m1, <span class="type">Method</span> _Nonnull m2)</span><br></pre></td></tr></table></figure><h2 id="1-动态方法交换示例"><a href="#1-动态方法交换示例" class="headerlink" title="1. 动态方法交换示例"></a>1. 动态方法交换示例</h2><p>现在演示一个代码示例：在视图控制中，定义两个实例方法printA与printB，然后执行交换</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">- (void)printA&#123;</span><br><span class="line">    <span class="type">NSLog</span>(@<span class="string">&quot;打印A......&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)printB&#123;</span><br><span class="line">    <span class="type">NSLog</span>(@<span class="string">&quot;打印B......&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//交换方法的实现，并测试打印</span></span><br><span class="line"><span class="type">Method</span> methodA = class_getInstanceMethod([<span class="keyword">self</span> <span class="class"><span class="keyword">class</span>], @<span class="title">selector</span>(<span class="title">printA</span>));</span></span><br><span class="line"><span class="class"><span class="title">Method</span> <span class="title">methodB</span> = <span class="title">class_getInstanceMethod</span>([<span class="title">self</span> <span class="title">class</span>], @<span class="title">selector</span>(<span class="title">printB</span>));</span></span><br><span class="line"><span class="class"><span class="title">method_exchangeImplementations</span>(<span class="title">methodA</span>, <span class="title">methodB</span>);</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">[<span class="title">self</span> <span class="title">printA</span>];  //打印<span class="title">B</span>......</span></span><br><span class="line"><span class="class">[<span class="title">self</span> <span class="title">printB</span>];  //打印<span class="title">A</span>......</span></span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="2-拦截并替换系统方法"><a href="#2-拦截并替换系统方法" class="headerlink" title="2. 拦截并替换系统方法"></a>2. 拦截并替换系统方法</h2><p>Runtime动态方法交换更多的是应用于系统类库和第三方框架的方法替换。在不可见源码的情况下，我们可以借助Rutime交换方法实现，为原有方法添加额外功能，这在实际开发中具有十分重要的意义。</p><p>下面将展示一个拦截并替换系统方法的示例：为了实现不同机型上的字体都按照比例适配，我们可以拦截系统UIFont的systemFontOfSize方法，具体操作如下：</p><h3 id="步骤1：在当前工程中添加UIFont的分类：UIFont-Adapt-并在其中添用以替换的方法。"><a href="#步骤1：在当前工程中添加UIFont的分类：UIFont-Adapt-并在其中添用以替换的方法。" class="headerlink" title="步骤1：在当前工程中添加UIFont的分类：UIFont +Adapt,并在其中添用以替换的方法。"></a>步骤1：在当前工程中添加UIFont的分类：UIFont +Adapt,并在其中添用以替换的方法。</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+ (<span class="built_in">UIFont</span> *)zs_systemFontOfSize:(<span class="built_in">CGFloat</span>)fontSize&#123;</span><br><span class="line">    <span class="comment">//获取设备屏幕宽度，并计算出比例scale</span></span><br><span class="line">    <span class="built_in">CGFloat</span> width = [[<span class="built_in">UIScreen</span> mainScreen] bounds].size.width;</span><br><span class="line">    <span class="built_in">CGFloat</span> scale  = width/<span class="number">375.0</span>;</span><br><span class="line">    <span class="comment">//注意：由于方法交换，系统的方法名已变成了自定义的方法名，所以这里使用了</span></span><br><span class="line">    <span class="comment">//自定义的方法名来获取UIFont</span></span><br><span class="line">    <span class="keyword">return</span> [<span class="built_in">UIFont</span> zs_systemFontOfSize:fontSize * scale];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="步骤2：在UIFont的分类中拦截系统方法，将其替换为我们自定义的方法，代码如下："><a href="#步骤2：在UIFont的分类中拦截系统方法，将其替换为我们自定义的方法，代码如下：" class="headerlink" title="步骤2：在UIFont的分类中拦截系统方法，将其替换为我们自定义的方法，代码如下："></a>步骤2：在UIFont的分类中拦截系统方法，将其替换为我们自定义的方法，代码如下：</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//load方法不需要手动调用，iOS会在应用程序启动的时候自动调起load方法，而且执行时间较早，所以在此方法中执行交换操作比较合适。</span></span><br><span class="line">+ (void)load&#123;</span><br><span class="line">    <span class="comment">//获取系统方法地址</span></span><br><span class="line">    <span class="type">Method</span> sytemMethod = class_getClassMethod([<span class="type">UIFont</span> <span class="class"><span class="keyword">class</span>], @<span class="title">selector</span>(<span class="title">systemFontOfSize</span>:));</span></span><br><span class="line"><span class="class">    //获取自定义方法地址</span></span><br><span class="line"><span class="class">    <span class="title">Method</span> <span class="title">customMethod</span> = <span class="title">class_getClassMethod</span>([<span class="title">UIFont</span> <span class="title">class</span>], @<span class="title">selector</span>(<span class="title">zs_systemFontOfSize</span>:));</span></span><br><span class="line"><span class="class">    //交换两个方法的实现</span></span><br><span class="line"><span class="class">    <span class="title">method_exchangeImplementations</span>(<span class="title">sytemMethod</span>, <span class="title">customMethod</span>);</span></span><br><span class="line"><span class="class">&#125;</span></span><br></pre></td></tr></table></figure><p>添加一段测试代码，切换不同的模拟器，观察在不同机型上文字的大小：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">UILabel</span> *label = [[<span class="type">UILabel</span> alloc] initWithFrame:<span class="type">CGRectMake</span>(<span class="number">0</span>, <span class="number">100</span>, <span class="number">300</span>, <span class="number">50</span>)];</span><br><span class="line">label.text = @<span class="string">&quot;测试Runtime拦截方法&quot;</span>;</span><br><span class="line">label.font = [<span class="type">UIFont</span> systemFontOfSize:<span class="number">20</span>];</span><br><span class="line">[<span class="keyword">self</span>.view addSubview:label];</span><br></pre></td></tr></table></figure><h1 id="二、实现分类添加新属性"><a href="#二、实现分类添加新属性" class="headerlink" title="二、实现分类添加新属性"></a>二、实现分类添加新属性</h1><p>我们在开发中常常使用类目Category为一些已有的类扩展功能。虽然继承也能够为已有类增加新的方法，而且相比类目更是具有增加属性的优势，但是继承毕竟是一个重量级的操作，添加不必要的继承关系无疑增加了代码的复杂度。</p><p>遗憾的是，OC的类目并不支持直接添加属性，如果我们直接在分类的声明中写入Property属性，那么只能为其生成set与get方法声明，却不能生成成员变量，直接调用这些属性还会造成崩溃。</p><p>所以为了实现给分类添加属性，我们还需借助Runtime的**关联对象(Associated Objects)**特性，它能够帮助我们在运行阶段将任意的属性关联到一个对象上，下面是相关的三个方法：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 1.给对象设置关联属性</span></span><br><span class="line"><span class="comment"> @param object 需要设置关联属性的对象，即给哪个对象关联属性</span></span><br><span class="line"><span class="comment"> @param key 关联属性对应的key，可通过key获取这个属性，</span></span><br><span class="line"><span class="comment"> @param value 给关联属性设置的值</span></span><br><span class="line"><span class="comment"> @param policy 关联属性的存储策略(对应Property属性中的assign,copy，retain等)</span></span><br><span class="line"><span class="comment"> OBJC_ASSOCIATION_ASSIGN             @property(assign)。</span></span><br><span class="line"><span class="comment"> OBJC_ASSOCIATION_RETAIN_NONATOMIC   @property(strong, nonatomic)。</span></span><br><span class="line"><span class="comment"> OBJC_ASSOCIATION_COPY_NONATOMIC     @property(copy, nonatomic)。</span></span><br><span class="line"><span class="comment"> OBJC_ASSOCIATION_RETAIN             @property(strong,atomic)。</span></span><br><span class="line"><span class="comment"> OBJC_ASSOCIATION_COPY               @property(copy, atomic)。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">void objc_setAssociatedObject(id _Nonnull object,</span><br><span class="line">                              const void * _Nonnull key,</span><br><span class="line">                              id _Nullable value,</span><br><span class="line">                              objc_AssociationPolicy policy)</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 2.通过key获取关联的属性</span></span><br><span class="line"><span class="comment"> @param object 从哪个对象中获取关联属性</span></span><br><span class="line"><span class="comment"> @param key 关联属性对应的key</span></span><br><span class="line"><span class="comment"> @return 返回关联属性的值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">id _Nullable objc_getAssociatedObject(id _Nonnull object,</span><br><span class="line">                                      const void * _Nonnull key)</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 3.移除对象所关联的属性</span></span><br><span class="line"><span class="comment"> @param object 移除某个对象的所有关联属性</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">void objc_removeAssociatedObjects(id _Nonnull object)</span><br></pre></td></tr></table></figure><p>注意：key与关联属性一一对应，我们必须确保其全局唯一性，常用我们使用@selector(methodName)作为key。</p><p>现在演示一个代码示例：为UIImage增加一个分类：UIImage+Tools，并为其设置关联属性urlString(图片网络链接属性），相关代码如下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//UIImage+Tools.h文件中</span></span><br><span class="line"><span class="type">UIImage</span>+<span class="type">Tools</span>.m</span><br><span class="line">@interface <span class="type">UIImage</span> (<span class="type">Tools</span>)</span><br><span class="line"><span class="comment">//添加一个新属性：图片网络链接</span></span><br><span class="line">@property(nonatomic,copy)<span class="type">NSString</span> *urlString;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//UIImage+Tools.m文件中</span></span><br><span class="line">#<span class="keyword">import</span> &quot;UIImage+Tools.h&quot;</span><br><span class="line">#<span class="keyword">import</span> &lt;objc/runtime.h&gt;</span><br><span class="line">@implementation <span class="type">UIImage</span> (<span class="type">Tools</span>)</span><br><span class="line"><span class="comment">//set方法</span></span><br><span class="line">- (void)setUrlString:(<span class="type">NSString</span> *)urlString&#123;</span><br><span class="line">    objc_setAssociatedObject(<span class="keyword">self</span>,</span><br><span class="line">                             @selector(urlString),</span><br><span class="line">                             urlString,</span><br><span class="line">                             <span class="type">OBJC_ASSOCIATION_RETAIN_NONATOMIC</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//get方法</span></span><br><span class="line">- (<span class="type">NSString</span> *)urlString&#123;</span><br><span class="line">    <span class="keyword">return</span> objc_getAssociatedObject(<span class="keyword">self</span>,</span><br><span class="line">                                    @selector(urlString));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//添加一个自定义方法，用于清除所有关联属性</span></span><br><span class="line">- (void)clearAssociatedObjcet&#123;</span><br><span class="line">    objc_removeAssociatedObjects(<span class="keyword">self</span>);</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure><p>测试文件中:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">UIImage</span> *image = [[<span class="type">UIImage</span> alloc] <span class="keyword">init</span>];</span><br><span class="line">image.urlString = @<span class="string">&quot;http://www.image.png&quot;</span>;</span><br><span class="line"><span class="type">NSLog</span>(@<span class="string">&quot;获取关联属性：%@&quot;</span>,image.urlString);</span><br><span class="line">    </span><br><span class="line">[image clearAssociatedObjcet];</span><br><span class="line"><span class="type">NSLog</span>(@<span class="string">&quot;获取关联属性：%@&quot;</span>,image.urlString);</span><br><span class="line"><span class="comment">//打印：</span></span><br><span class="line"><span class="comment">//获取关联属性：http://www.image.png</span></span><br><span class="line"><span class="comment">// 获取关联属性：(null)</span></span><br></pre></td></tr></table></figure><h1 id="三、获取类的详细信息"><a href="#三、获取类的详细信息" class="headerlink" title="三、获取类的详细信息"></a>三、获取类的详细信息</h1><h2 id="1-获取属性列表"><a href="#1-获取属性列表" class="headerlink" title="1. 获取属性列表"></a>1. 获取属性列表</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">unsigned int <span class="built_in">count</span>;</span><br><span class="line">objc_property_t *propertyList = class_copyPropertyList([<span class="keyword">self</span> <span class="class"><span class="keyword">class</span>], &amp;<span class="title">count</span>);</span></span><br><span class="line"><span class="class"><span class="title">for</span> (<span class="title">unsigned</span> <span class="title">int</span> <span class="title">i</span> = 0; <span class="title">i</span>&lt;<span class="title">count</span>; <span class="title">i</span>++) </span>&#123;</span><br><span class="line">    const char *propertyName = property_getName(propertyList[i]);</span><br><span class="line">    <span class="type">NSLog</span>(@<span class="string">&quot;PropertyName(%d): %@&quot;</span>,i,[<span class="type">NSString</span> stringWithUTF8String:propertyName]);</span><br><span class="line">&#125;</span><br><span class="line">free(propertyList);</span><br></pre></td></tr></table></figure><h2 id="2-获取所有成员变量"><a href="#2-获取所有成员变量" class="headerlink" title="2. 获取所有成员变量"></a>2. 获取所有成员变量</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Ivar</span> *ivarList = class_copyIvarList([<span class="keyword">self</span> <span class="class"><span class="keyword">class</span>], &amp;<span class="title">count</span>);</span></span><br><span class="line"><span class="class"><span class="title">for</span> (<span class="title">int</span> <span class="title">i</span>= 0; <span class="title">i</span>&lt;<span class="title">count</span>; <span class="title">i</span>++) </span>&#123;</span><br><span class="line">    <span class="type">Ivar</span> ivar = ivarList[i];</span><br><span class="line">    const char *ivarName = ivar_getName(ivar);</span><br><span class="line">    <span class="type">NSLog</span>(@<span class="string">&quot;Ivar(%d): %@&quot;</span>, i, [<span class="type">NSString</span> stringWithUTF8String:ivarName]);</span><br><span class="line">&#125;</span><br><span class="line">free(ivarList);</span><br></pre></td></tr></table></figure><h2 id="3-获取所有方法"><a href="#3-获取所有方法" class="headerlink" title="3. 获取所有方法"></a>3. 获取所有方法</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Method</span> *methodList = class_copyMethodList([<span class="keyword">self</span> <span class="class"><span class="keyword">class</span>], &amp;<span class="title">count</span>);</span></span><br><span class="line"><span class="class"><span class="title">for</span> (<span class="title">unsigned</span> <span class="title">int</span> <span class="title">i</span> = 0; <span class="title">i</span>&lt;<span class="title">count</span>; <span class="title">i</span>++) </span>&#123;</span><br><span class="line">    <span class="type">Method</span> method = methodList[i];</span><br><span class="line">    <span class="type">SEL</span> mthodName = method_getName(method);</span><br><span class="line">    <span class="type">NSLog</span>(@<span class="string">&quot;MethodName(%d): %@&quot;</span>,i,<span class="type">NSStringFromSelector</span>(mthodName));</span><br><span class="line">&#125;</span><br><span class="line">free(methodList);</span><br></pre></td></tr></table></figure><h2 id="4-获取当前遵循的所有协议"><a href="#4-获取当前遵循的所有协议" class="headerlink" title="4. 获取当前遵循的所有协议"></a>4. 获取当前遵循的所有协议</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">__unsafe_unretained <span class="type">Protocol</span> **protocolList = class_copyProtocolList([<span class="keyword">self</span> <span class="class"><span class="keyword">class</span>], &amp;<span class="title">count</span>);</span></span><br><span class="line"><span class="class"><span class="title">for</span> (<span class="title">int</span> <span class="title">i</span>=0; <span class="title">i</span>&lt;<span class="title">count</span>; <span class="title">i</span>++) </span>&#123;</span><br><span class="line">    <span class="type">Protocol</span> *protocal = protocolList[i];</span><br><span class="line">    const char *protocolName = protocol_getName(protocal);</span><br><span class="line">    <span class="type">NSLog</span>(@<span class="string">&quot;protocol(%d): %@&quot;</span>,i, [<span class="type">NSString</span> stringWithUTF8String:protocolName]);</span><br><span class="line">&#125;</span><br><span class="line">free(propertyList);</span><br></pre></td></tr></table></figure><p><strong>注意：C语言中使用Copy操作的方法，要注意释放指针，防止内存泄漏</strong></p><h1 id="四、解决同一方法高频率调用的效率问题"><a href="#四、解决同一方法高频率调用的效率问题" class="headerlink" title="四、解决同一方法高频率调用的效率问题"></a>四、解决同一方法高频率调用的效率问题</h1><p>Runtime源码中的IMP作为函数指针，指向方法的实现。通过它，我们可以绕开发送消息的过程来提高函数调用的效率。当我们需要持续大量重复调用某个方法的时候，会十分有用，具体代码示例如下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">void (*setter)(id, <span class="type">SEL</span>, <span class="type">BOOL</span>);</span><br><span class="line">int i;</span><br><span class="line"></span><br><span class="line">setter = (void (*)(id, <span class="type">SEL</span>, <span class="type">BOOL</span>))[target methodForSelector:@selector(setFilled:)];</span><br><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span> ; i &lt; <span class="number">1000</span> ; i++ )</span><br><span class="line">    setter(targetList[i], @selector(setFilled:), <span class="type">YES</span>);</span><br></pre></td></tr></table></figure><h1 id="五、方法动态解析与消息转发"><a href="#五、方法动态解析与消息转发" class="headerlink" title="五、方法动态解析与消息转发"></a>五、方法动态解析与消息转发</h1><p>其实该部分可以参考基础篇中内容，这里不再重复赘述，只是大概做出一些总结。</p><h2 id="1-动态方法解析：动态添加方法"><a href="#1-动态方法解析：动态添加方法" class="headerlink" title="1. 动态方法解析：动态添加方法"></a>1. 动态方法解析：动态添加方法</h2><p>Runtime足够强大，能够让我们在运行时动态添加一个未实现的方法，这个功能主要有两个应用场景：<br> <strong>场景1</strong>：动态添加未实现方法，解决代码中因为方法未找到而报错的问题；<br> <strong>场景2</strong>：利用懒加载思路，若一个类有很多个方法，同时加载到内存中会耗费资源，可以使用动态解析添加方法。方法动态解析主要用到的方法如下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//OC方法：</span></span><br><span class="line"><span class="comment">//类方法未找到时调起，可于此添加类方法实现</span></span><br><span class="line">+ (<span class="type">BOOL</span>)resolveClassMethod:(<span class="type">SEL</span>)sel</span><br><span class="line"></span><br><span class="line"><span class="comment">//实例方法未找到时调起，可于此添加实例方法实现</span></span><br><span class="line">+ (<span class="type">BOOL</span>)resolveInstanceMethod:(<span class="type">SEL</span>)sel</span><br><span class="line"></span><br><span class="line"><span class="comment">//Runtime方法：</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 运行时方法：向指定类中添加特定方法实现的操作</span></span><br><span class="line"><span class="comment"> @param cls 被添加方法的类</span></span><br><span class="line"><span class="comment"> @param name selector方法名</span></span><br><span class="line"><span class="comment"> @param imp 指向实现方法的函数指针</span></span><br><span class="line"><span class="comment"> @param types imp函数实现的返回值与参数类型</span></span><br><span class="line"><span class="comment"> @return 添加方法是否成功</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">BOOL</span> class_addMethod(<span class="type">Class</span> _Nullable cls,</span><br><span class="line">                     <span class="type">SEL</span> _Nonnull name,</span><br><span class="line">                     <span class="type">IMP</span> _Nonnull imp,</span><br><span class="line">                     const char * _Nullable types)</span><br></pre></td></tr></table></figure><h2 id="2-解决方法无响应崩溃问题"><a href="#2-解决方法无响应崩溃问题" class="headerlink" title="2. 解决方法无响应崩溃问题"></a>2. 解决方法无响应崩溃问题</h2><p>执行OC方法其实就是一个发送消息的过程，若方法未实现，我们可以利用方法动态解析与消息转发来避免程序崩溃，这主要涉及下面一个处理未实现消息的过程：</p><img src="/2021/11/02/Runtime-Part2/lct.png" class="" title="消息转发流程图"><p>除了上述的方法动态解析，还使用到的相关方法如下：<br> 消息接收者重定向</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//重定向类方法的消息接收者，返回一个类</span></span><br><span class="line">- (id)forwardingTargetForSelector:(<span class="type">SEL</span>)aSelector</span><br><span class="line"></span><br><span class="line"><span class="comment">//重定向实例方法的消息接受者，返回一个实例对象</span></span><br><span class="line">- (id)forwardingTargetForSelector:(<span class="type">SEL</span>)aSelector</span><br></pre></td></tr></table></figure><p>消息重定向</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- (void)forwardInvocation:(<span class="type">NSInvocation</span> *)anInvocation；</span><br><span class="line"></span><br><span class="line">- (<span class="type">NSMethodSignature</span>*)methodSignatureForSelector:(<span class="type">SEL</span>)aSelector;</span><br></pre></td></tr></table></figure><h1 id="六、动态操作属性"><a href="#六、动态操作属性" class="headerlink" title="六、动态操作属性"></a>六、动态操作属性</h1><h2 id="1-动态修改属性变量"><a href="#1-动态修改属性变量" class="headerlink" title="1. 动态修改属性变量"></a>1. 动态修改属性变量</h2><p>现在假设这样一个情况：我们使用第三方框架里的Person类，在特殊需求下想要更改其私有属性nickName，这样的操作我们就可以使用Runtime可以动态修改对象属性。</p><p>基本思路：首先使用Runtime获取Peson对象的所有属性，找到nickName，然后使用ivar的方法修改其值。具体的代码示例如下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Person</span> *ps = [[<span class="type">Person</span> alloc] <span class="keyword">init</span>];</span><br><span class="line"><span class="type">NSLog</span>(@<span class="string">&quot;ps-nickName: %@&quot;</span>,[ps valueForKey:@<span class="string">&quot;nickName&quot;</span>]); <span class="comment">//null</span></span><br><span class="line"><span class="comment">//第一步：遍历对象的所有属性</span></span><br><span class="line">unsigned int <span class="built_in">count</span>;</span><br><span class="line"><span class="type">Ivar</span> *ivarList = class_copyIvarList([ps <span class="class"><span class="keyword">class</span>], &amp;<span class="title">count</span>);</span></span><br><span class="line"><span class="class"><span class="title">for</span> (<span class="title">int</span> <span class="title">i</span>= 0; <span class="title">i</span>&lt;<span class="title">count</span>; <span class="title">i</span>++) </span>&#123;</span><br><span class="line">    <span class="comment">//第二步：获取每个属性名</span></span><br><span class="line">    <span class="type">Ivar</span> ivar = ivarList[i];</span><br><span class="line">    const char *ivarName = ivar_getName(ivar);</span><br><span class="line">    <span class="type">NSString</span> *propertyName = [<span class="type">NSString</span> stringWithUTF8String:ivarName];</span><br><span class="line">    <span class="keyword">if</span> ([propertyName isEqualToString:@<span class="string">&quot;_nickName&quot;</span>]) &#123;</span><br><span class="line">        <span class="comment">//第三步：匹配到对应的属性，然后修改；注意属性带有下划线</span></span><br><span class="line">        object_setIvar(ps, ivar, @<span class="string">&quot;梧雨北辰&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">NSLog</span>(@<span class="string">&quot;ps-nickName: %@&quot;</span>,[ps valueForKey:@<span class="string">&quot;nickName&quot;</span>]); <span class="comment">//梧雨北辰</span></span><br></pre></td></tr></table></figure><p>总结：此过程类似KVC的取值和赋值</p><h2 id="2-实现-NSCoding-的自动归档和解档"><a href="#2-实现-NSCoding-的自动归档和解档" class="headerlink" title="2. 实现 NSCoding 的自动归档和解档"></a>2. 实现 NSCoding 的自动归档和解档</h2><p>归档是一种常用的轻量型文件存储方式，但是它有个弊端：在归档过程中，若一个Model有多个属性，我们不得不对每个属性进行处理，非常繁琐。<br> 归档操作主要涉及两个方法：encodeObject 和 decodeObjectForKey，现在，我们可以利用Runtime来改进它们，关键的代码示例如下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//原理：使用Runtime动态获取所有属性</span></span><br><span class="line"><span class="comment">//解档操作</span></span><br><span class="line">- (instancetype)initWithCoder:(<span class="type">NSCoder</span> *)aDecoder&#123;</span><br><span class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> <span class="keyword">init</span>];</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>) &#123;</span><br><span class="line">        unsigned int <span class="built_in">count</span> = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="type">Ivar</span> *ivarList = class_copyIvarList([<span class="keyword">self</span> <span class="class"><span class="keyword">class</span>], &amp;<span class="title">count</span>);</span></span><br><span class="line"><span class="class">        <span class="title">for</span> (<span class="title">int</span> <span class="title">i</span> = 0; <span class="title">i</span> &lt; <span class="title">count</span>; <span class="title">i</span>++) </span>&#123;</span><br><span class="line">            <span class="type">Ivar</span> ivar = ivarList[i];</span><br><span class="line">            const char *ivarName = ivar_getName(ivar);</span><br><span class="line">            <span class="type">NSString</span> *key = [<span class="type">NSString</span> stringWithUTF8String:ivarName];</span><br><span class="line">            id value = [aDecoder decodeObjectForKey:key];</span><br><span class="line">            [<span class="keyword">self</span> setValue:value forKey:key];</span><br><span class="line">        &#125;</span><br><span class="line">        free(ivarList); <span class="comment">//释放指针</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//归档操作</span></span><br><span class="line">- (void)encodeWithCoder:(<span class="type">NSCoder</span> *)aCoder&#123;</span><br><span class="line">    unsigned int <span class="built_in">count</span> = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="type">Ivar</span> *ivarList = class_copyIvarList([<span class="keyword">self</span> <span class="class"><span class="keyword">class</span>], &amp;<span class="title">count</span>);</span></span><br><span class="line"><span class="class">    <span class="title">for</span> (<span class="title">NSInteger</span> <span class="title">i</span> = 0; <span class="title">i</span> &lt; <span class="title">count</span>; <span class="title">i</span>++) </span>&#123;</span><br><span class="line">        <span class="type">Ivar</span> ivar = ivarList[i];</span><br><span class="line">        <span class="type">NSString</span> *key = [<span class="type">NSString</span> stringWithUTF8String:ivar_getName(ivar)];</span><br><span class="line">        </span><br><span class="line">        id value = [<span class="keyword">self</span> valueForKey:key];</span><br><span class="line">        [aCoder encodeObject:value forKey:key];</span><br><span class="line">    &#125;</span><br><span class="line">    free(ivarList); <span class="comment">//释放指针</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是有关归档的测试代码：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//--测试归档</span></span><br><span class="line"><span class="type">Person</span> *ps = [[<span class="type">Person</span> alloc] <span class="keyword">init</span>];</span><br><span class="line">ps.name = @<span class="string">&quot;梧雨北辰&quot;</span>;</span><br><span class="line">ps.age  = <span class="number">18</span>;</span><br><span class="line"><span class="type">NSString</span> *temp = <span class="type">NSTemporaryDirectory</span>();</span><br><span class="line"><span class="type">NSString</span> *fileTemp = [temp stringByAppendingString:@<span class="string">&quot;person.archive&quot;</span>];</span><br><span class="line">[<span class="type">NSKeyedArchiver</span> archiveRootObject:ps toFile:fileTemp];</span><br><span class="line"></span><br><span class="line"><span class="comment">//--测试解档</span></span><br><span class="line"><span class="type">NSString</span> *temp = <span class="type">NSTemporaryDirectory</span>();</span><br><span class="line"><span class="type">NSString</span> *fileTemp = [temp stringByAppendingString:@<span class="string">&quot;person.henry&quot;</span>];</span><br><span class="line"><span class="type">Person</span> *person = [<span class="type">NSKeyedUnarchiver</span> unarchiveObjectWithFile:fileTemp];</span><br><span class="line"><span class="type">NSLog</span>(@<span class="string">&quot;person-name:%@，person-age:%ld&quot;</span>,person.name,person.age); </span><br><span class="line"><span class="comment">//person-name:梧雨北辰，person-age:18</span></span><br></pre></td></tr></table></figure><h2 id="3-实现字典与模型的转换"><a href="#3-实现字典与模型的转换" class="headerlink" title="3. 实现字典与模型的转换"></a>3. 实现字典与模型的转换</h2><p>字典数据转模型的操作在项目开发中很常见，通常我们会选择第三方如YYModel；其实我们也可以自己来实现这一功能，主要的思路有两种：KVC、Runtime，总结字典转化模型过程中需要解决的问题如下：</p><img src="/2021/11/02/Runtime-Part2/zdzmx.png" class="" title="字典转模型"><p>现在，我们使用Runtime来实现字典转模型的操作，大致的思路是这样：<br> <strong><em>借助Runtime可以动态获取成员列表的特性，遍历模型中所有属性，然后以获取到的属性名为key，在JSON字典中寻找对应的值value；再将每一个对应Value赋值给模型，就完成了字典转模型的目的\</em></strong>。</p><p>首先准备下面的JSON数据用于测试：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>:<span class="string">&quot;2462079046&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;梧雨北辰&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;age&quot;</span>:<span class="string">&quot;18&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;weight&quot;</span>:<span class="number">140</span>,</span><br><span class="line">    <span class="attr">&quot;address&quot;</span>:&#123;</span><br><span class="line">            <span class="attr">&quot;country&quot;</span>:<span class="string">&quot;中国&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;province&quot;</span>: <span class="string">&quot;河南&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">    <span class="attr">&quot;courses&quot;</span>:[&#123;</span><br><span class="line">               <span class="attr">&quot;name&quot;</span>:<span class="string">&quot;Chinese&quot;</span>,</span><br><span class="line">               <span class="attr">&quot;desc&quot;</span>:<span class="string">&quot;语文课&quot;</span></span><br><span class="line">    &#125;,&#123;</span><br><span class="line">               <span class="attr">&quot;name&quot;</span>:<span class="string">&quot;Math&quot;</span>,</span><br><span class="line">               <span class="attr">&quot;desc&quot;</span>:<span class="string">&quot;数学课&quot;</span></span><br><span class="line">    &#125;,&#123;</span><br><span class="line">               <span class="attr">&quot;name&quot;</span>:<span class="string">&quot;English&quot;</span>,</span><br><span class="line">               <span class="attr">&quot;desc&quot;</span>:<span class="string">&quot;英语课&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体的代码实现流程如下：</p><h3 id="步骤1：创建NSObject的类目NSObject-ZSModel，用于实现字典转模型"><a href="#步骤1：创建NSObject的类目NSObject-ZSModel，用于实现字典转模型" class="headerlink" title="步骤1：创建NSObject的类目NSObject+ZSModel，用于实现字典转模型"></a>步骤1：创建NSObject的类目NSObject+ZSModel，用于实现字典转模型</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@interface <span class="type">NSObject</span> (<span class="type">ZSModel</span>)</span><br><span class="line">+ (instancetype)zs_modelWithDictionary:(<span class="type">NSDictionary</span> *)dictionary;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line"><span class="comment">//ZSModel协议，协议方法可以返回一个字典，表明特殊字段的处理规则</span></span><br><span class="line">@<span class="class"><span class="keyword">protocol</span> <span class="title">ZSModel</span>&lt;<span class="title">NSObject</span>&gt;</span></span><br><span class="line"><span class="class">@<span class="title">optional</span></span></span><br><span class="line"><span class="class">+ (<span class="title">nullable</span> <span class="title">NSDictionary</span>&lt;<span class="title">NSString</span> *, <span class="title">id</span>&gt; *)<span class="title">modelContainerPropertyGenericClass</span>;</span></span><br><span class="line"><span class="class">@<span class="title">end</span>;</span></span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">#<span class="keyword">import</span> &quot;NSObject+ZSModel.h&quot;</span><br><span class="line">#<span class="keyword">import</span> &lt;objc/runtime.h&gt;</span><br><span class="line">@implementation <span class="type">NSObject</span> (<span class="type">ZSModel</span>)</span><br><span class="line">+ (instancetype)zs_modelWithDictionary:(<span class="type">NSDictionary</span> *)dictionary&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//创建当前模型对象</span></span><br><span class="line">    id object = [[<span class="keyword">self</span> alloc] <span class="keyword">init</span>];</span><br><span class="line">    <span class="comment">//1.获取当前对象的成员变量列表</span></span><br><span class="line">    unsigned int <span class="built_in">count</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="type">Ivar</span> *ivarList = class_copyIvarList([<span class="keyword">self</span> <span class="class"><span class="keyword">class</span>], &amp;<span class="title">count</span>);</span></span><br><span class="line"><span class="class">    </span></span><br><span class="line"><span class="class">    //2.遍历<span class="title">ivarList</span>中所有成员变量，以其属性名为<span class="title">key</span>，在字典中查找<span class="title">Value</span></span></span><br><span class="line"><span class="class">    <span class="title">for</span> (<span class="title">int</span> <span class="title">i</span>= 0; <span class="title">i</span>&lt;<span class="title">count</span>; <span class="title">i</span>++) </span>&#123;</span><br><span class="line">        <span class="comment">//2.1获取成员属性</span></span><br><span class="line">        <span class="type">Ivar</span> ivar = ivarList[i];</span><br><span class="line">        <span class="type">NSString</span> *ivarName = [<span class="type">NSString</span> stringWithUTF8String:ivar_getName(ivar)] ;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//2.2截取成员变量名：去掉成员变量前面的&quot;_&quot;号</span></span><br><span class="line">        <span class="type">NSString</span> *propertyName = [ivarName substringFromIndex:<span class="number">1</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//2.3以属性名为key，在字典中查找value</span></span><br><span class="line">        id value = dictionary[propertyName];</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//3.获取成员变量类型, 因为ivar_getTypeEncoding获取的类型是&quot;@\&quot;NSString\&quot;&quot;的形式</span></span><br><span class="line">        <span class="comment">//所以我们要做以下的替换</span></span><br><span class="line">        <span class="type">NSString</span> *ivarType = [<span class="type">NSString</span> stringWithUTF8String:ivar_getTypeEncoding(ivar)];<span class="comment">// 替换:</span></span><br><span class="line">        <span class="comment">//3.1去除转义字符：@\&quot;name\&quot; -&gt; @&quot;name&quot;</span></span><br><span class="line">        ivarType = [ivarType stringByReplacingOccurrencesOfString:@<span class="string">&quot;\&quot;&quot;</span> withString:@<span class="string">&quot;&quot;</span>];</span><br><span class="line">        <span class="comment">//3.2去除@符号</span></span><br><span class="line">        ivarType = [ivarType stringByReplacingOccurrencesOfString:@<span class="string">&quot;@&quot;</span> withString:@<span class="string">&quot;&quot;</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//4.对特殊成员变量进行处理：</span></span><br><span class="line">        <span class="comment">//判断当前类是否实现了协议方法，获取协议方法中规定的特殊变量的处理方式</span></span><br><span class="line">        <span class="type">NSDictionary</span> *perpertyTypeDic;</span><br><span class="line">        <span class="keyword">if</span>([<span class="keyword">self</span> respondsToSelector:@selector(modelContainerPropertyGenericClass)])&#123;</span><br><span class="line">            perpertyTypeDic = [<span class="keyword">self</span> performSelector:@selector(modelContainerPropertyGenericClass) withObject:<span class="literal">nil</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//4.1处理：字典的key与模型属性不匹配的问题，如id-&gt;uid</span></span><br><span class="line">        id anotherName = perpertyTypeDic[propertyName];</span><br><span class="line">        <span class="keyword">if</span>(anotherName &amp;&amp; [anotherName isKindOfClass:[<span class="type">NSString</span> <span class="class"><span class="keyword">class</span>]])</span>&#123;</span><br><span class="line">            value =  dictionary[anotherName];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//4.2.处理：模型嵌套模型</span></span><br><span class="line">        <span class="keyword">if</span> ([value isKindOfClass:[<span class="type">NSDictionary</span> <span class="class"><span class="keyword">class</span>]] &amp;&amp; ![<span class="title">ivarType</span> <span class="title">hasPrefix</span>:@&quot;<span class="title">NS</span>&quot;]) </span>&#123;</span><br><span class="line">            <span class="type">Class</span> modelClass = <span class="type">NSClassFromString</span>(ivarType);</span><br><span class="line">            <span class="keyword">if</span> (modelClass != <span class="literal">nil</span>) &#123;</span><br><span class="line">                <span class="comment">//将被嵌套字典数据也转化成Model</span></span><br><span class="line">                value = [modelClass zs_modelWithDictionary:value];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//4.3处理：模型嵌套模型数组</span></span><br><span class="line">        <span class="comment">//判断当前Vaue是一个数组，而且存在协议方法返回了perpertyTypeDic</span></span><br><span class="line">        <span class="keyword">if</span> ([value isKindOfClass:[<span class="type">NSArray</span> <span class="class"><span class="keyword">class</span>]] &amp;&amp; <span class="title">perpertyTypeDic</span>) </span>&#123;</span><br><span class="line">            <span class="type">Class</span> itemModelClass = perpertyTypeDic[propertyName];</span><br><span class="line">            <span class="comment">//封装数组：将每一个子数据转化为Model</span></span><br><span class="line">            <span class="type">NSMutableArray</span> *itemArray = @[].mutableCopy;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">NSDictionary</span> *itemDic  <span class="keyword">in</span> value) &#123;</span><br><span class="line">                id model = [itemModelClass zs_modelWithDictionary:itemDic];</span><br><span class="line">                [itemArray addObject:model];</span><br><span class="line">            &#125;</span><br><span class="line">            value = itemArray;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//5.使用KVC方法将Vlue更新到object中</span></span><br><span class="line">        <span class="keyword">if</span> (value != <span class="literal">nil</span>) &#123;</span><br><span class="line">            [object setValue:value forKey:propertyName];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    free(ivarList); <span class="comment">//释放C指针</span></span><br><span class="line">    <span class="keyword">return</span> object;</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure><h3 id="步骤2：分别创建各个数据模型Student、Address、Course"><a href="#步骤2：分别创建各个数据模型Student、Address、Course" class="headerlink" title="步骤2：分别创建各个数据模型Student、Address、Course"></a>步骤2：分别创建各个数据模型Student、Address、Course</h3><p><strong>Student类</strong>：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Student.h文件</span></span><br><span class="line">#<span class="keyword">import</span> &quot;NSObject+ZSModel.h&quot;</span><br><span class="line">#<span class="keyword">import</span> &quot;AddressModel.h&quot;</span><br><span class="line">#<span class="keyword">import</span> &quot;CourseModel.h&quot;</span><br><span class="line">@interface <span class="type">StudentModel</span> : <span class="type">NSObject</span>&lt;<span class="type">ZSModel</span>&gt; <span class="comment">//遵循协议</span></span><br><span class="line"><span class="comment">//普通属性</span></span><br><span class="line">@property (nonatomic, copy) <span class="type">NSString</span> *uid;</span><br><span class="line">@property(nonatomic,copy)<span class="type">NSString</span> *name;</span><br><span class="line">@property (nonatomic, assign) <span class="type">NSInteger</span> age;</span><br><span class="line"><span class="comment">//嵌套模型</span></span><br><span class="line">@property (nonatomic, strong) <span class="type">AddressModel</span> *address;</span><br><span class="line"><span class="comment">//嵌套模型数组</span></span><br><span class="line">@property (nonatomic, strong) <span class="type">NSArray</span> *courses;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#<span class="keyword">import</span> &quot;StudentModel.h&quot;</span><br><span class="line">@implementation <span class="type">StudentModel</span></span><br><span class="line">+ (<span class="type">NSDictionary</span> *)modelContainerPropertyGenericClass &#123;</span><br><span class="line">    <span class="comment">//需要特别处理的属性</span></span><br><span class="line">    <span class="keyword">return</span> @&#123;@<span class="string">&quot;courses&quot;</span> : [<span class="type">CourseModel</span> <span class="class"><span class="keyword">class</span>],@&quot;<span class="title">uid</span>&quot;:@&quot;<span class="title">id</span>&quot;&#125;;</span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class">@<span class="title">end</span></span></span><br></pre></td></tr></table></figure><p><strong>Address类</strong>：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//AddressModel.h文件</span></span><br><span class="line">@interface <span class="type">AddressModel</span> : <span class="type">NSObject</span></span><br><span class="line">@property (nonatomic, copy) <span class="type">NSString</span> *country;  <span class="comment">//国籍</span></span><br><span class="line">@property (nonatomic, copy) <span class="type">NSString</span> *province; <span class="comment">//省份</span></span><br><span class="line">@property (nonatomic, copy) <span class="type">NSString</span> *city;     <span class="comment">//城市</span></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line"><span class="comment">//-----------------优美的分割线------------------------</span></span><br><span class="line"><span class="comment">//AddressModel.m文件</span></span><br><span class="line">#<span class="keyword">import</span> &quot;AddressModel.h&quot;</span><br><span class="line">@implementation <span class="type">AddressModel</span></span><br><span class="line">@end</span><br></pre></td></tr></table></figure><p><strong>Course类</strong>：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@interface <span class="type">CourseModel</span> : <span class="type">NSObject</span></span><br><span class="line">@property (nonatomic, copy) <span class="type">NSString</span> *name; <span class="comment">//课程名</span></span><br><span class="line">@property (nonatomic, copy) <span class="type">NSString</span> *desc; <span class="comment">//课程介绍</span></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line"><span class="comment">//-----------------优美的分割线------------------------</span></span><br><span class="line"> #<span class="keyword">import</span> &quot;CourseModel.h&quot;</span><br><span class="line">@implementation <span class="type">CourseModel</span></span><br><span class="line">@end</span><br></pre></td></tr></table></figure><h3 id="步骤4：测试字典转模型操作"><a href="#步骤4：测试字典转模型操作" class="headerlink" title="步骤4：测试字典转模型操作"></a>步骤4：测试字典转模型操作</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//读取JSON数据</span></span><br><span class="line"><span class="type">NSDictionary</span> *jsonData = [<span class="type">FileTools</span> getDictionaryFromJsonFile:@<span class="string">&quot;Student&quot;</span>];</span><br><span class="line"><span class="type">NSLog</span>(@<span class="string">&quot;%@&quot;</span>,jsonData);</span><br><span class="line"></span><br><span class="line"><span class="comment">//字典转模型</span></span><br><span class="line"><span class="type">StudentModel</span> *student = [<span class="type">StudentModel</span> zs_modelWithDictionary:jsonData];</span><br><span class="line"><span class="type">CourseModel</span> *courseModel = student.courses[<span class="number">0</span>];</span><br><span class="line"><span class="type">NSLog</span>(@<span class="string">&quot;%@&quot;</span>,courseModel.name);</span><br></pre></td></tr></table></figure><h1 id="最后总结"><a href="#最后总结" class="headerlink" title="最后总结"></a>最后总结</h1><img src="/2021/11/02/Runtime-Part2/1244124-6037157.png" class="" width="1244124"><p>以上就是我们在实际开发中常用的Runtime的操作了，Runtime的强大作用远不止如此。深入的了解和学习Runtime，不仅仅有助于iOS开发，而且对于理解编程语言的底层原理也十分有用，Keep Learning！~</p><p>参考链接：</p><ol><li><a href="https://links.jianshu.com/go?to=https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Introduction/Introduction.html%23//apple_ref/doc/uid/TP40008048">Objective-C Runtime Programming Guide</a></li><li><a href="https://links.jianshu.com/go?to=%5Bhttp://nshipster.cn/method-swizzling/%5D(http://nshipster.cn/method-swizzling/)">Method Swizzling</a></li><li><a href="https://links.jianshu.com/go?to=https://www.cnblogs.com/wuqh-iOS/p/4846811.html">iOS数据持久化存储:归档</a></li><li><a href="https://links.jianshu.com/go?to=https://github.com/ibireme/YYModel">YYModel源码</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> iOS进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Runtime </tag>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="2021/11/01/Runtime-Part1/"/>
      <url>2021/11/01/Runtime-Part1/</url>
      
        <content type="html"><![CDATA[<h1 id="一、什么是动态语言，什么是Runtime？"><a href="#一、什么是动态语言，什么是Runtime？" class="headerlink" title="一、什么是动态语言，什么是Runtime？"></a>一、什么是动态语言，什么是Runtime？</h1><h2 id="静态语言-强类型语言-："><a href="#静态语言-强类型语言-：" class="headerlink" title="静态语言(强类型语言)："></a>静态语言(强类型语言)：</h2><p>静态语言是在编译时就要确定变量的数据类型，也就是变量使用之前必须声明数据类型。如：C、C++、Java、C#等。</p><h2 id="动态语言-弱类型语言"><a href="#动态语言-弱类型语言" class="headerlink" title="动态语言(弱类型语言):"></a>动态语言(弱类型语言):</h2><p>动态语言是在运行时才去做数据类型检查的语言，变量使用之前不需要类型声明，通常变量的类型是被赋值的那个值的类型。如：PHP、Ruby、Shell、Python等一些脚本语言。</p><h2 id="为什么说OC是一门动态语言"><a href="#为什么说OC是一门动态语言" class="headerlink" title="为什么说OC是一门动态语言:"></a>为什么说OC是一门动态语言:</h2><p>静态、动态是相对的，这里动态语言指的是不需要再编译阶段就确定所有变量方法等，还可以在运行时动态的添加。 Objective-C，在C语言的基础上添加了面向对象的特性，并且通过Runtime这个运行时机制，在运行时可以动态的添加变量，方法，类等，所以说Objective-C是一门动态语言。</p><h2 id="OC的动态性"><a href="#OC的动态性" class="headerlink" title="OC的动态性:"></a>OC的动态性:</h2><h3 id="1-动态类型"><a href="#1-动态类型" class="headerlink" title="1.动态类型:"></a>1.动态类型:</h3><p>如id类型。实际上静态类型因为其固定性和可预知性而使用的特别广泛。静态类型是强类型，动态类型是弱类型，运行时决定接收者。</p><h3 id="2-动态绑定"><a href="#2-动态绑定" class="headerlink" title="2.动态绑定:"></a>2.动态绑定:</h3><p>让代码在运行时判断需要调用什么方法，而不是在编译时。与其他面向对象语言一样，方法调用和代码并没有在编译时连接在一起，而是在消息发送时才进行连接。运行时决定调用哪个方法。</p><h3 id="3-动态载入"><a href="#3-动态载入" class="headerlink" title="3.动态载入:"></a>3.动态载入:</h3><p> 让程序在运行时添加代码模块已经其他资源。用户可以根据需要执行一些可执行代码和资源，而不是在启动时就加载所有资源组件。可执行代码中可以含有和程序运行时整合的新类。</p><a id="more"></a><h1 id="二、Runtime中的类和对象"><a href="#二、Runtime中的类和对象" class="headerlink" title="二、Runtime中的类和对象"></a>二、Runtime中的类和对象</h1><p>OC代码被编译器转化为C语言，然后再通过运行时执行，最终实现了动态调用。这其中的OC类、对象和方法等都对应了C中的结构体，而且我们都可以在Rutime源码中找到它们的定义。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#import &lt;objc&#x2F;runtime.h&gt;</span><br><span class="line">#import &lt;objc&#x2F;message.h&gt;</span><br></pre></td></tr></table></figure><h2 id="1-对象的定义（id—-gt-objc-object）"><a href="#1-对象的定义（id—-gt-objc-object）" class="headerlink" title="1. 对象的定义（id—&gt;objc_object）"></a>1. 对象的定义（id—&gt;objc_object）</h2><p>在Runtime源码中，我们能很快找到在oc中对象的定义。如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;&#x2F;A pointer to an instance of a class.</span><br><span class="line">typedef struct objc_object *id;</span><br></pre></td></tr></table></figure><p>很明显id是一个指向objc_object结构体的指针，我们点开查看Runtime对objc_object的具体定义：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;&#x2F;Represents an instance of a class.</span><br><span class="line">struct objc_object &#123;</span><br><span class="line">    Class _Nonnull isa  OBJC_ISA_AVAILABILITY;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>我们都知道id在OC中是表示一个任意类型的类实例，从这里也可以看出，OC中的对象虽然没有明显的使用指针，但是在OC代码被编译转化为C之后，每个OC对象其实都是拥有一个isa的指针的。</p><h2 id="2-类的定义-Class-gt-objc-classs"><a href="#2-类的定义-Class-gt-objc-classs" class="headerlink" title="2. 类的定义 (Class - &gt;objc_classs)"></a>2. 类的定义 (Class - &gt;objc_classs)</h2><p>我们先来看下Runtime中对于类的定义，显然class是一个指向objc_class结构体的指针，如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">typedef struct objc_class *Class;</span><br></pre></td></tr></table></figure><p>下面是Runtime中对objc_clas结构体的具体定义:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;usr&#x2F;include&#x2F;objc&#x2F;runtime.h</span><br><span class="line">struct objc_class &#123;</span><br><span class="line">    Class _Nonnull isa  OBJC_ISA_AVAILABILITY;</span><br><span class="line">#if !OBJC2</span><br><span class="line"></span><br><span class="line">    Class Nullable super_class                              OBJC2UNAVAILABLE;</span><br><span class="line">    const char * Nonnull name                               OBJC2UNAVAILABLE;</span><br><span class="line">    long version                                             OBJC2_UNAVAILABLE;</span><br><span class="line">    long info                                                OBJC2_UNAVAILABLE;</span><br><span class="line">    long instance_size                                       OBJC2_UNAVAILABLE;</span><br><span class="line">    struct objc_ivar_list * Nullable ivars                  OBJC2UNAVAILABLE;</span><br><span class="line">    struct objc_method_list * Nullable * _Nullable methodLists                    OBJC2UNAVAILABLE;</span><br><span class="line">    struct objc_cache * Nonnull cache                       OBJC2UNAVAILABLE;</span><br><span class="line">    struct objc_protocol_list * Nullable protocols          OBJC2UNAVAILABLE;</span><br><span class="line">#endif</span><br><span class="line">&#125; OBJC2_UNAVAILABLE;</span><br></pre></td></tr></table></figure><h3 id="isa指针"><a href="#isa指针" class="headerlink" title="isa指针"></a>isa指针</h3><p>是一个Class 类型的指针. 每个实例对象有个isa的指针,他指向对象的类，而Class里也有个isa的指针, 指向meteClass(元类)。元类保存了类方法的列表。当类方法被调用时，先会从本身查找类方法的实现，如果没有，元类会向他父类查找该方法。同时注意的是：<strong>元类（meteClass）也是类，它也是对象。</strong>元类也有isa指针,它的isa指针最终指向的是一个根元类(root meteClass).根元类的isa指针指向本身，这样形成了一个封闭的内循环。</p><img src="/2021/11/01/Runtime-Part1/xht.png" class="" title="xht"><h4 id="super-class指针"><a href="#super-class指针" class="headerlink" title="super_class指针 :"></a>super_class指针 :</h4><p>super_class指针指向objc_class类所继承的父类，但是如果当前类已经是最顶层的类(如NSProxy),则super_class指针为NULL</p><h4 id="cache"><a href="#cache" class="headerlink" title="cache :"></a>cache :</h4><p>为了优化性能，objc_class中的cache结构体用于记录每次使用类或者实例对象调用的方法。这样每次响应消息的时候，Runtime系统会优先在cache中寻找响应方法，相比直接在类的方法列表中遍历查找，效率更高。</p><h4 id="ivars"><a href="#ivars" class="headerlink" title="ivars :"></a>ivars :</h4><p>ivars用于存放所有的成员变量和属性信息，属性的存取方法都存放在methodLists中。</p><h4 id="methodLists"><a href="#methodLists" class="headerlink" title="methodLists :"></a>methodLists :</h4><p>methodLists用于存放对象的所有成员方法。</p><h2 id="3-Method"><a href="#3-Method" class="headerlink" title="3. Method"></a>3. Method</h2><p>了解OC中的发送消息机制，我们先来看看Method在Runtime中的定义:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">typedef struct objc_method *Method;</span><br><span class="line"></span><br><span class="line">struct objc_method &#123;</span><br><span class="line">    SEL method_name;</span><br><span class="line">    char * method_types;</span><br><span class="line">    IMP method_imp;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Method 定义为一个objc_method结构体指针，理解objc_method定义中的参数： method_name:方法名类型SEL method_types: 一个char指针，指向存储方法的参数类型和返回值类型 method_imp：本质上是一个指针，指向方法的实现 这里其实就是SEL(method_name)与IMP(method_name)形成了一个映射，通过SEL，我们可以很方便的找到方法实现IMP。</p><h3 id="SEL-："><a href="#SEL-：" class="headerlink" title="SEL ："></a>SEL ：</h3><p>先来看下SEL在Runtime中的定义:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;&#x2F; An opaque type that represents a method selector.</span><br><span class="line">typedef struct objc_selector *SEL;</span><br></pre></td></tr></table></figure><p>SEL是一个指向objc_selector结构体的指针,源码中我们没有找到这个结构体的明确定义。我们通过代码测试发现，SEL其实就是保存了方法名字符串的标识。下面有我们获取SEL的三种方法: 1.OC中，使用@selector(“方法名字符串”) 2.OC中，使用NSSelectorFromString(“方法名字符串”) 3.Runtime方法，使用sel_registerName(“方法名字符串”)</p><h3 id="IMP"><a href="#IMP" class="headerlink" title="IMP"></a>IMP</h3><p>IMP是一个函数指针，它在Runtime中的定义:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;&#x2F; A pointer to the function of a method implementation.</span><br><span class="line">typedef void (IMP)(void &#x2F; id, SEL, ... *&#x2F; );</span><br></pre></td></tr></table></figure><p>IMP函数指针指向了方法实现的首地址，当OC发起消息后，最终执行的代码是由IMP指针决定的。利用这个特性，我们可以对代码进行优化：当需要大量重复调用方法的时候，我们可以绕开消息绑定而直接利用IMP指针调起方法，这样的执行将会更加高效。</p><h1 id="三、Runtime消息发送"><a href="#三、Runtime消息发送" class="headerlink" title="三、Runtime消息发送"></a>三、Runtime消息发送</h1><p>Objective-C中的方法调用，不是简单的方法调用，而是发送消息。也就是说，其实[receiver message] 会被编译器转化为: objc_msgSend(receiver,selector)，在Runtime中它的原形为:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">OBJC_EXPORT void objc_msgSend(void &#x2F;* id self, SEL op, ... *&#x2F; )</span><br></pre></td></tr></table></figure><p>上面看到objc_msgSend会默认传入id和SEL。这对赢了两个隐含参数，self和_cmd。这意味着我们可以在方法的实现过程中拿到并使用。例如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">- (void)testCmd:(NSNumber *)num &#123;</span><br><span class="line">    </span><br><span class="line">    NSLog(@&quot;%ld&quot;, (long)num.integerValue);</span><br><span class="line">    </span><br><span class="line">    num &#x3D; [NSNumber numberWithInteger:num.integerValue-1];</span><br><span class="line">    </span><br><span class="line">    if (num.integerValue &gt; 0) &#123;</span><br><span class="line">        [self performSelector:_cmd withObject:num];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>尝试调用:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[self testCmd:@(5)];</span><br></pre></td></tr></table></figure><p>上面会按顺序输出 <code>5, 4, 3, 2, 1</code> ，然后结束。即我们可以在方法内部用 <code>_cmd</code> 来调用方法自身。</p><p>编译器会根据情况在 objc_msgSend，objc_msgSend_stret，objc_msgSendSuper，objc_msgSendSuper_stret 或 objc_msgSend_fpret 五个方法中选择一个来调用。如果消息是传递给超类，那么会调用 objc_msgSendSuper 方法，如果消息返回值是数据结构，就会调用 objc_msgSendSuper_stret 方法，如果返回值是浮点数，则调用 objc_msgSend_fpret 方法。</p><p>有一道网上常见的面试题来帮助我们加深理解，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@implementation Son : Father</span><br><span class="line">- (id)init</span><br><span class="line">&#123;</span><br><span class="line">    self &#x3D; [super init];</span><br><span class="line">    if (self) &#123;</span><br><span class="line">        NSLog(@&quot;%@&quot;, NSStringFromClass([self class]));</span><br><span class="line">        NSLog(@&quot;%@&quot;, NSStringFromClass([super class]));</span><br><span class="line">    &#125;</span><br><span class="line">    return self;</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure><p>这个题目主要是考察关于 Objective-C 中对 self 和 super 的理解。</p><p>我们都知道：self 是类的隐藏参数，指向当前调用方法的这个类的实例。那 super 呢？</p><p>很多人会想当然的认为“ super 和 self 类似，应该是指向父类的指针吧！”。这是很普遍的一个误区。其实 super 是一个 Magic Keyword， 它本质是一个编译器标示符，和 self 是指向的同一个消息接受者！他们两个的不同点在于：super 会告诉编译器，调用 class 这个方法时，要去父类的方法，而不是本类里的。</p><p>上面的例子不管调用<code>[self class]</code>还是<code>[super class]</code>，接受消息的对象都是当前 <code>Son ＊xxx</code> 这个对象。</p><p>当使用 self 调用方法时，会从当前类的方法列表中开始找，如果没有，就从父类中再找；而当使用 super 时，则从父类的方法列表中开始找。然后调用父类的这个方法。</p><p>下面是整个运行时阶段消息发送的详细步骤:</p><ol><li>检测selector 是不是需要忽略的。比如 Mac OS X 开发，有了垃圾回收就不理会retain,release 这些函数了。</li><li>检测target 是不是nil 对象。ObjC 的特性是允许对一个 nil对象执行任何一个方法不会 Crash，因为会被忽略掉。</li><li>如果上面两个都过了，那就开始查找这个类的 IMP，先从 cache 里面找，若可以找得到就跳到对应的函数去执行</li><li>如果在cache里找不到就找一下方法列表methodLists。</li><li>如果methodLists找不到，就到超类的方法列表里寻找，一直找，直到找到NSObject类为止。</li><li>如果还找不到，Runtime就提供了如下三种方法来处理：<strong>动态方法解析</strong>、<strong>消息接受者重定向</strong>、<strong>消息重定向</strong>,这就是下面要说的消息转发机制。</li></ol><h1 id="四、消息转发机制"><a href="#四、消息转发机制" class="headerlink" title="四、消息转发机制"></a>四、消息转发机制</h1><p>我们先用一张图来简单了解这三种方法的调用关系:</p><img src="/2021/11/01/Runtime-Part1/lct.png" class="" title="lct"><h2 id="1-动态方法解析"><a href="#1-动态方法解析" class="headerlink" title="1.动态方法解析"></a>1.动态方法解析</h2><p>所谓动态解析，我们可以理解为通过cache和方法列表没有找到方法时，Runtime为我们提供一次动态添加方法实现的机会，主要用到的方法入如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;OC方法：</span><br><span class="line">&#x2F;&#x2F;类方法未找到时调起，可于此添加类方法实现</span><br><span class="line">+ (BOOL)resolveClassMethod:(SEL)sel</span><br><span class="line">&#x2F;&#x2F;实例方法未找到时调起，可于此添加实例方法实现</span><br><span class="line">+ (BOOL)resolveInstanceMethod:(SEL)sel</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Runtime方法：</span><br><span class="line">&#x2F;**</span><br><span class="line"> 运行时方法：向指定类中添加特定方法实现的操作</span><br><span class="line"> @param cls 被添加方法的类</span><br><span class="line"> @param name selector方法名</span><br><span class="line"> @param imp 指向实现方法的函数指针</span><br><span class="line"> @param types imp函数实现的返回值与参数类型</span><br><span class="line"> @return 添加方法是否成功</span><br><span class="line"> *&#x2F;</span><br><span class="line">BOOL class_addMethod(Class _Nullable cls,</span><br><span class="line">                     SEL _Nonnull name,</span><br><span class="line">                     IMP _Nonnull imp,</span><br><span class="line">                     const char * _Nullable types)</span><br></pre></td></tr></table></figure><h2 id="2-消息接受者重定向"><a href="#2-消息接受者重定向" class="headerlink" title="2. 消息接受者重定向"></a>2. 消息接受者重定向</h2><p>我们注意到动态方法解析过程中的两个resolve方法都返回了布尔值，当它们返回YES时方法即可正常执行，但是若它们返回NO，消息发送机制就进入了消息转发(Forwarding)的阶段了，我们可以使用Runtime通过下面的方法替换消息接收者的为其他对象，从而保证程序的继续执行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;重定向类方法的消息接收者，返回一个类</span><br><span class="line">- (id)forwardingTargetForSelector:(SEL)aSelector</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;重定向实例方法的消息接受者，返回一个实例对象</span><br><span class="line">- (id)forwardingTargetForSelector:(SEL)aSelector</span><br></pre></td></tr></table></figure><h2 id="3-消息重定向"><a href="#3-消息重定向" class="headerlink" title="3. 消息重定向"></a>3. 消息重定向</h2><p>当以上两种方法无法生效，那么这个对象会因为找不到相应的方法实现而无法响应消息，此时Runtime系统会通过forwardInvocation：消息通知该对象，给予此次消息发送最后一次寻找IMP的机会：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- (void)forwardInvocation:(NSInvocation *)anInvocation；</span><br></pre></td></tr></table></figure><p>其实每个对象都从NSObject类中继承了forwardInvocation：方法，但是NSObject中的这个方法只是简单的调用了doesNotRecongnizeSelector:方法，提示我们错误。所以我们可以重写这个方法：对不能处理的消息做一些默认处理，也可以将消息转发给其他对象来处理，而不抛出错误。</p><p>我们注意到anInvocation是forwardInvocation唯一参数，它封装了原始的消息和消息参数。正是因为它，我们还不得不重写另一个函数：methodSignatureForSelector。这是因为在forwardInvocation: 消息发送前，Runtime系统会向对象发送methodSignatureForSelector消息，并取到返回的方法签名用于生成NSInvocation对象。</p><h1 id="五、总结："><a href="#五、总结：" class="headerlink" title="五、总结："></a>五、总结：</h1><p>以上就是IOS运行时的基础部分，帮助我们理解Runtime的工作原理。在实际开发中，合理的运用Runtime，可以提高我们的开发效率。下一遍，我将总结Runtime在实际开发中的使用。</p><p><strong>其他参考链接</strong> <a href="https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40008048">1.Objective-C Runtime Programming Guide</a> <a href="http://yulingtianxia.com/blog/2014/11/05/objective-c-runtime/">2.Objctive-C Runtime</a> <a href="https://blog.csdn.net/zhaochen_009/article/details/54602930">3.iOS Runtime forwardInvocation的一些总结</a><a href="https://blog.csdn.net/zhaochen_009/article/details/54602930">https://blog.csdn.net/zhaochen_009/article/details/54602930</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> iOS进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Runtime </tag>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
